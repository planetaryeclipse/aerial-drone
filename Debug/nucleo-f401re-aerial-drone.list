
nucleo-f401re-aerial-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f360  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800f500  0800f500  0001f500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd30  0800fd30  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd38  0800fd38  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800fd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ffc  200001d8  0800ff18  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200061d4  0800ff18  000261d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022085  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051e6  00000000  00000000  000422d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  000474b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ca  00000000  00000000  00048f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9cf  00000000  00000000  0004a462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022442  00000000  00000000  00066e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd45  00000000  00000000  00089273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000841c  00000000  00000000  00128fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001313d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4e8 	.word	0x0800f4e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800f4e8 	.word	0x0800f4e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of actCmds */
  actCmdsHandle = osMessageQueueNew (16, sizeof(actuator_t), &actCmds_attributes);
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <MX_FREERTOS_Init+0x128>)
 8001006:	2128      	movs	r1, #40	; 0x28
 8001008:	2010      	movs	r0, #16
 800100a:	f006 ff7e 	bl	8007f0a <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <MX_FREERTOS_Init+0x12c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of pressrToLog */
  pressrToLogHandle = osMessageQueueNew (16, sizeof(sens_pressr_t), &pressrToLog_attributes);
 8001014:	4a46      	ldr	r2, [pc, #280]	; (8001130 <MX_FREERTOS_Init+0x130>)
 8001016:	2110      	movs	r1, #16
 8001018:	2010      	movs	r0, #16
 800101a:	f006 ff76 	bl	8007f0a <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <MX_FREERTOS_Init+0x134>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of pressrToSend */
  pressrToSendHandle = osMessageQueueNew (16, sizeof(sens_pressr_t), &pressrToSend_attributes);
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <MX_FREERTOS_Init+0x138>)
 8001026:	2110      	movs	r1, #16
 8001028:	2010      	movs	r0, #16
 800102a:	f006 ff6e 	bl	8007f0a <osMessageQueueNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a42      	ldr	r2, [pc, #264]	; (800113c <MX_FREERTOS_Init+0x13c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of rng1ToLog */
  rng1ToLogHandle = osMessageQueueNew (16, sizeof(sens_rng_t), &rng1ToLog_attributes);
 8001034:	4a42      	ldr	r2, [pc, #264]	; (8001140 <MX_FREERTOS_Init+0x140>)
 8001036:	2108      	movs	r1, #8
 8001038:	2010      	movs	r0, #16
 800103a:	f006 ff66 	bl	8007f0a <osMessageQueueNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <MX_FREERTOS_Init+0x144>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of rng1ToSend */
  rng1ToSendHandle = osMessageQueueNew (16, sizeof(sens_rng_t), &rng1ToSend_attributes);
 8001044:	4a40      	ldr	r2, [pc, #256]	; (8001148 <MX_FREERTOS_Init+0x148>)
 8001046:	2108      	movs	r1, #8
 8001048:	2010      	movs	r0, #16
 800104a:	f006 ff5e 	bl	8007f0a <osMessageQueueNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a3e      	ldr	r2, [pc, #248]	; (800114c <MX_FREERTOS_Init+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of rng2ToLog */
  rng2ToLogHandle = osMessageQueueNew (16, sizeof(sens_rng_t), &rng2ToLog_attributes);
 8001054:	4a3e      	ldr	r2, [pc, #248]	; (8001150 <MX_FREERTOS_Init+0x150>)
 8001056:	2108      	movs	r1, #8
 8001058:	2010      	movs	r0, #16
 800105a:	f006 ff56 	bl	8007f0a <osMessageQueueNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a3c      	ldr	r2, [pc, #240]	; (8001154 <MX_FREERTOS_Init+0x154>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of rng2ToSend */
  rng2ToSendHandle = osMessageQueueNew (16, sizeof(sens_rng_t), &rng2ToSend_attributes);
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <MX_FREERTOS_Init+0x158>)
 8001066:	2108      	movs	r1, #8
 8001068:	2010      	movs	r0, #16
 800106a:	f006 ff4e 	bl	8007f0a <osMessageQueueNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a3a      	ldr	r2, [pc, #232]	; (800115c <MX_FREERTOS_Init+0x15c>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of actCmdsToLog */
  actCmdsToLogHandle = osMessageQueueNew (16, sizeof(actuator_t), &actCmdsToLog_attributes);
 8001074:	4a3a      	ldr	r2, [pc, #232]	; (8001160 <MX_FREERTOS_Init+0x160>)
 8001076:	2128      	movs	r1, #40	; 0x28
 8001078:	2010      	movs	r0, #16
 800107a:	f006 ff46 	bl	8007f0a <osMessageQueueNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a38      	ldr	r2, [pc, #224]	; (8001164 <MX_FREERTOS_Init+0x164>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of imuToLog */
  imuToLogHandle = osMessageQueueNew (16, sizeof(sens_imu_t), &imuToLog_attributes);
 8001084:	4a38      	ldr	r2, [pc, #224]	; (8001168 <MX_FREERTOS_Init+0x168>)
 8001086:	2160      	movs	r1, #96	; 0x60
 8001088:	2010      	movs	r0, #16
 800108a:	f006 ff3e 	bl	8007f0a <osMessageQueueNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a36      	ldr	r2, [pc, #216]	; (800116c <MX_FREERTOS_Init+0x16c>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of imuToSend */
  imuToSendHandle = osMessageQueueNew (16, sizeof(sens_imu_t), &imuToSend_attributes);
 8001094:	4a36      	ldr	r2, [pc, #216]	; (8001170 <MX_FREERTOS_Init+0x170>)
 8001096:	2160      	movs	r1, #96	; 0x60
 8001098:	2010      	movs	r0, #16
 800109a:	f006 ff36 	bl	8007f0a <osMessageQueueNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a34      	ldr	r2, [pc, #208]	; (8001174 <MX_FREERTOS_Init+0x174>)
 80010a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 80010a4:	4a34      	ldr	r2, [pc, #208]	; (8001178 <MX_FREERTOS_Init+0x178>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4834      	ldr	r0, [pc, #208]	; (800117c <MX_FREERTOS_Init+0x17c>)
 80010aa:	f006 fe60 	bl	8007d6e <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a33      	ldr	r2, [pc, #204]	; (8001180 <MX_FREERTOS_Init+0x180>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of readPressrSens */
  readPressrSensHandle = osThreadNew(ReadPressureSensor, NULL, &readPressrSens_attributes);
 80010b4:	4a33      	ldr	r2, [pc, #204]	; (8001184 <MX_FREERTOS_Init+0x184>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4833      	ldr	r0, [pc, #204]	; (8001188 <MX_FREERTOS_Init+0x188>)
 80010ba:	f006 fe58 	bl	8007d6e <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a32      	ldr	r2, [pc, #200]	; (800118c <MX_FREERTOS_Init+0x18c>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of writeLogger */
  writeLoggerHandle = osThreadNew(WriteLogger, NULL, &writeLogger_attributes);
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <MX_FREERTOS_Init+0x190>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4832      	ldr	r0, [pc, #200]	; (8001194 <MX_FREERTOS_Init+0x194>)
 80010ca:	f006 fe50 	bl	8007d6e <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_FREERTOS_Init+0x198>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of radioManager */
  radioManagerHandle = osThreadNew(RadioManager, NULL, &radioManager_attributes);
 80010d4:	4a31      	ldr	r2, [pc, #196]	; (800119c <MX_FREERTOS_Init+0x19c>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <MX_FREERTOS_Init+0x1a0>)
 80010da:	f006 fe48 	bl	8007d6e <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <MX_FREERTOS_Init+0x1a4>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of readMag */
  readMagHandle = osThreadNew(ReadMag, NULL, &readMag_attributes);
 80010e4:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <MX_FREERTOS_Init+0x1a8>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4830      	ldr	r0, [pc, #192]	; (80011ac <MX_FREERTOS_Init+0x1ac>)
 80010ea:	f006 fe40 	bl	8007d6e <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <MX_FREERTOS_Init+0x1b0>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* creation of readInertial */
  readInertialHandle = osThreadNew(ReadInertial, NULL, &readInertial_attributes);
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <MX_FREERTOS_Init+0x1b4>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_FREERTOS_Init+0x1b8>)
 80010fa:	f006 fe38 	bl	8007d6e <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a2e      	ldr	r2, [pc, #184]	; (80011bc <MX_FREERTOS_Init+0x1bc>)
 8001102:	6013      	str	r3, [r2, #0]

  /* creation of readRngs */
  readRngsHandle = osThreadNew(ReadRngs, NULL, &readRngs_attributes);
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <MX_FREERTOS_Init+0x1c0>)
 8001106:	2100      	movs	r1, #0
 8001108:	482e      	ldr	r0, [pc, #184]	; (80011c4 <MX_FREERTOS_Init+0x1c4>)
 800110a:	f006 fe30 	bl	8007d6e <osThreadNew>
 800110e:	4603      	mov	r3, r0
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <MX_FREERTOS_Init+0x1c8>)
 8001112:	6013      	str	r3, [r2, #0]

  /* creation of cntrlActuators */
  cntrlActuatorsHandle = osThreadNew(ControlActuators, NULL, &cntrlActuators_attributes);
 8001114:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <MX_FREERTOS_Init+0x1cc>)
 8001116:	2100      	movs	r1, #0
 8001118:	482d      	ldr	r0, [pc, #180]	; (80011d0 <MX_FREERTOS_Init+0x1d0>)
 800111a:	f006 fe28 	bl	8007d6e <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a2c      	ldr	r2, [pc, #176]	; (80011d4 <MX_FREERTOS_Init+0x1d4>)
 8001122:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800f7ac 	.word	0x0800f7ac
 800112c:	20000214 	.word	0x20000214
 8001130:	0800f7c4 	.word	0x0800f7c4
 8001134:	20000218 	.word	0x20000218
 8001138:	0800f7dc 	.word	0x0800f7dc
 800113c:	2000021c 	.word	0x2000021c
 8001140:	0800f7f4 	.word	0x0800f7f4
 8001144:	20000220 	.word	0x20000220
 8001148:	0800f80c 	.word	0x0800f80c
 800114c:	20000224 	.word	0x20000224
 8001150:	0800f824 	.word	0x0800f824
 8001154:	20000228 	.word	0x20000228
 8001158:	0800f83c 	.word	0x0800f83c
 800115c:	2000022c 	.word	0x2000022c
 8001160:	0800f854 	.word	0x0800f854
 8001164:	20000230 	.word	0x20000230
 8001168:	0800f86c 	.word	0x0800f86c
 800116c:	20000234 	.word	0x20000234
 8001170:	0800f884 	.word	0x0800f884
 8001174:	20000238 	.word	0x20000238
 8001178:	0800f68c 	.word	0x0800f68c
 800117c:	080011d9 	.word	0x080011d9
 8001180:	200001f4 	.word	0x200001f4
 8001184:	0800f6b0 	.word	0x0800f6b0
 8001188:	08005e91 	.word	0x08005e91
 800118c:	200001f8 	.word	0x200001f8
 8001190:	0800f6d4 	.word	0x0800f6d4
 8001194:	080011f5 	.word	0x080011f5
 8001198:	200001fc 	.word	0x200001fc
 800119c:	0800f6f8 	.word	0x0800f6f8
 80011a0:	08006125 	.word	0x08006125
 80011a4:	20000200 	.word	0x20000200
 80011a8:	0800f71c 	.word	0x0800f71c
 80011ac:	08005e79 	.word	0x08005e79
 80011b0:	20000204 	.word	0x20000204
 80011b4:	0800f740 	.word	0x0800f740
 80011b8:	08001205 	.word	0x08001205
 80011bc:	20000208 	.word	0x20000208
 80011c0:	0800f764 	.word	0x0800f764
 80011c4:	08005bb9 	.word	0x08005bb9
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	0800f788 	.word	0x0800f788
 80011d0:	08005a05 	.word	0x08005a05
 80011d4:	20000210 	.word	0x20000210

080011d8 <StartBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011e0:	2120      	movs	r1, #32
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <StartBlink+0x18>)
 80011e4:	f001 fcbb 	bl	8002b5e <HAL_GPIO_TogglePin>
      osDelay(250);
 80011e8:	20fa      	movs	r0, #250	; 0xfa
 80011ea:	f006 fe73 	bl	8007ed4 <osDelay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011ee:	e7f7      	b.n	80011e0 <StartBlink+0x8>
 80011f0:	40020000 	.word	0x40020000

080011f4 <WriteLogger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WriteLogger */
__weak void WriteLogger(void *argument)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WriteLogger */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f006 fe69 	bl	8007ed4 <osDelay>
 8001202:	e7fb      	b.n	80011fc <WriteLogger+0x8>

08001204 <ReadInertial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadInertial */
__weak void ReadInertial(void *argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadInertial */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f006 fe61 	bl	8007ed4 <osDelay>
 8001212:	e7fb      	b.n	800120c <ReadInertial+0x8>

08001214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a6b      	ldr	r2, [pc, #428]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a64      	ldr	r2, [pc, #400]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a56      	ldr	r2, [pc, #344]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <MX_GPIO_Init+0x1cc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	484a      	ldr	r0, [pc, #296]	; (80013e4 <MX_GPIO_Init+0x1d0>)
 80012bc:	f001 fc36 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRESSR_OUT_Pin|OPENLOGGER_DTR_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f241 0102 	movw	r1, #4098	; 0x1002
 80012c6:	4848      	ldr	r0, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x1d4>)
 80012c8:	f001 fc30 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_PWR_Pin|RNG2_TRIG_Pin|RNG1_TRIG_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 80012d2:	4846      	ldr	r0, [pc, #280]	; (80013ec <MX_GPIO_Init+0x1d8>)
 80012d4:	f001 fc2a 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <MX_GPIO_Init+0x1d8>)
 80012f0:	f001 fa80 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f4:	2320      	movs	r3, #32
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4836      	ldr	r0, [pc, #216]	; (80013e4 <MX_GPIO_Init+0x1d0>)
 800130c:	f001 fa72 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PRESSR_OUT_Pin|OPENLOGGER_DTR_Pin;
 8001310:	f241 0302 	movw	r3, #4098	; 0x1002
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	482f      	ldr	r0, [pc, #188]	; (80013e8 <MX_GPIO_Init+0x1d4>)
 800132a:	f001 fa63 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRESSR_SCK_Pin;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRESSR_SCK_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4829      	ldr	r0, [pc, #164]	; (80013e8 <MX_GPIO_Init+0x1d4>)
 8001342:	f001 fa57 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_PWR_Pin;
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_PWR_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_GPIO_Init+0x1d8>)
 800135e:	f001 fa49 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RNG2_TRIG_Pin|RNG1_TRIG_Pin;
 8001362:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_GPIO_Init+0x1d8>)
 800137c:	f001 fa3a 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RNG2_ECHO_Pin;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001386:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RNG2_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_GPIO_Init+0x1d8>)
 8001398:	f001 fa2c 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RNG1_ECHO_Pin;
 800139c:	2304      	movs	r3, #4
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013a0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RNG1_ECHO_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_GPIO_Init+0x1dc>)
 80013b2:	f001 fa1f 	bl	80027f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	2008      	movs	r0, #8
 80013bc:	f001 f95e 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013c0:	2008      	movs	r0, #8
 80013c2:	f001 f977 	bl	80026b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2028      	movs	r0, #40	; 0x28
 80013cc:	f001 f956 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 f96f 	bl	80026b4 <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C1_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C1_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C1_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C1_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C1_Init+0x50>)
 8001432:	f001 fbc7 	bl	8002bc4 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f95e 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000023c 	.word	0x2000023c
 8001448:	40005400 	.word	0x40005400
 800144c:	000186a0 	.word	0x000186a0

08001450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_I2C_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C_SCL_Pin|IMU_I2C_SDA_Pin;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0x8c>)
 80014ac:	f001 f9a2 	bl	80027f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001500:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001508:	e000      	b.n	800150c <ITM_SendChar+0x2c>
    {
      __NOP();
 800150a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800150c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f9      	beq.n	800150a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001516:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void _putchar(char ch){
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
    uint32_t c = *(uint8_t*)&ch;
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
    ITM_SendChar(c);
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff ffce 	bl	80014e0 <ITM_SendChar>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001550:	f000 ff76 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001554:	f000 f856 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001558:	f7ff fe5c 	bl	8001214 <MX_GPIO_Init>
  MX_TIM10_Init();
 800155c:	f000 fc6c 	bl	8001e38 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001560:	f000 fe0c 	bl	800217c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001564:	f7ff ff46 	bl	80013f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001568:	f000 fe32 	bl	80021d0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800156c:	f000 fe5a 	bl	8002224 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 8001570:	f000 fc86 	bl	8001e80 <MX_TIM11_Init>
  MX_TIM9_Init();
 8001574:	f000 fc26 	bl	8001dc4 <MX_TIM9_Init>
  MX_TIM3_Init();
 8001578:	f000 fb0a 	bl	8001b90 <MX_TIM3_Init>
  MX_TIM2_Init();
 800157c:	f000 fa7c 	bl	8001a78 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001580:	f000 fb9e 	bl	8001cc0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Timers used in reading sensors
  HAL_TIM_Base_Start(&htim9);
 8001584:	4819      	ldr	r0, [pc, #100]	; (80015ec <main+0xa0>)
 8001586:	f002 fb01 	bl	8003b8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim10);
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <main+0xa4>)
 800158c:	f002 fafe 	bl	8003b8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8001590:	4818      	ldr	r0, [pc, #96]	; (80015f4 <main+0xa8>)
 8001592:	f002 fafb 	bl	8003b8c <HAL_TIM_Base_Start>

  // Wing control surfaces
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <main+0xac>)
 800159a:	f002 fc0d 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800159e:	2104      	movs	r1, #4
 80015a0:	4815      	ldr	r0, [pc, #84]	; (80015f8 <main+0xac>)
 80015a2:	f002 fc09 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015a6:	2108      	movs	r1, #8
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <main+0xac>)
 80015aa:	f002 fc05 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015ae:	210c      	movs	r1, #12
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <main+0xac>)
 80015b2:	f002 fc01 	bl	8003db8 <HAL_TIM_PWM_Start>

  // Tail control surfaces
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015b6:	2100      	movs	r1, #0
 80015b8:	4810      	ldr	r0, [pc, #64]	; (80015fc <main+0xb0>)
 80015ba:	f002 fbfd 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015be:	2104      	movs	r1, #4
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <main+0xb0>)
 80015c2:	f002 fbf9 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80015c6:	2108      	movs	r1, #8
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <main+0xb0>)
 80015ca:	f002 fbf5 	bl	8003db8 <HAL_TIM_PWM_Start>

  // Electric speed controllers (ESCs)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <main+0xb4>)
 80015d2:	f002 fbf1 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <main+0xb4>)
 80015da:	f002 fbed 	bl	8003db8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80015de:	f006 faa9 	bl	8007b34 <osKernelInitialize>
  MX_FREERTOS_Init();
 80015e2:	f7ff fd0d 	bl	8001000 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015e6:	f006 fac9 	bl	8007b7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <main+0x9e>
 80015ec:	200003b4 	.word	0x200003b4
 80015f0:	200003fc 	.word	0x200003fc
 80015f4:	20000444 	.word	0x20000444
 80015f8:	20000324 	.word	0x20000324
 80015fc:	200002dc 	.word	0x200002dc
 8001600:	2000036c 	.word	0x2000036c

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	; 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2230      	movs	r2, #48	; 0x30
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00a fadb 	bl	800bbce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <SystemClock_Config+0xcc>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <SystemClock_Config+0xcc>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <SystemClock_Config+0xd0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <SystemClock_Config+0xd0>)
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <SystemClock_Config+0xd0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001678:	2304      	movs	r3, #4
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800167c:	23a8      	movs	r3, #168	; 0xa8
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001680:	2304      	movs	r3, #4
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001684:	2307      	movs	r3, #7
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fd63 	bl	8003158 <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001698:	f000 f830 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2102      	movs	r1, #2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ffc5 	bl	8003648 <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016c4:	f000 f81a 	bl	80016fc <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3750      	adds	r7, #80	; 0x50
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ea:	f000 fecb 	bl	8002484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x54>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_MspInit+0x54>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x54>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_MspInit+0x54>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_MspInit+0x54>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_MspInit+0x54>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210f      	movs	r1, #15
 800174a:	f06f 0001 	mvn.w	r0, #1
 800174e:	f000 ff95 	bl	800267c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_InitTick+0xd0>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_InitTick+0xd0>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6453      	str	r3, [r2, #68]	; 0x44
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_InitTick+0xd0>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f002 f976 	bl	8003a88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800179c:	f002 f960 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 80017a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_InitTick+0xd4>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3b01      	subs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_InitTick+0xd8>)
 80017b2:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_InitTick+0xdc>)
 80017b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_InitTick+0xd8>)
 80017b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_InitTick+0xd8>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_InitTick+0xd8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_InitTick+0xd8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_InitTick+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017d6:	4818      	ldr	r0, [pc, #96]	; (8001838 <HAL_InitTick+0xd8>)
 80017d8:	f002 f988 	bl	8003aec <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11b      	bne.n	8001822 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017ea:	4813      	ldr	r0, [pc, #76]	; (8001838 <HAL_InitTick+0xd8>)
 80017ec:	f002 fa28 	bl	8003c40 <HAL_TIM_Base_Start_IT>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d111      	bne.n	8001822 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017fe:	2019      	movs	r0, #25
 8001800:	f000 ff58 	bl	80026b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d808      	bhi.n	800181c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800180a:	2200      	movs	r2, #0
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	2019      	movs	r0, #25
 8001810:	f000 ff34 	bl	800267c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_InitTick+0xe0>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e002      	b.n	8001822 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001826:	4618      	mov	r0, r3
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	431bde83 	.word	0x431bde83
 8001838:	20000290 	.word	0x20000290
 800183c:	40010000 	.word	0x40010000
 8001840:	20000004 	.word	0x20000004

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RNG1_ECHO_Pin);
 8001874:	2004      	movs	r0, #4
 8001876:	f001 f98d 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001886:	f002 fb47 	bl	8003f18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800188c:	f002 fb44 	bl	8003f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000290 	.word	0x20000290
 8001898:	200003fc 	.word	0x200003fc

0800189c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART1_IRQHandler+0x10>)
 80018a2:	f003 f9bf 	bl	8004c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000048c 	.word	0x2000048c

080018b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RNG2_ECHO_Pin);
 80018b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018b8:	f001 f96c 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c0:	f001 f968 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e2:	f00a fa1d 	bl	800bd20 <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f00a f982 	bl	800bd20 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20018000 	.word	0x20018000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200002d8 	.word	0x200002d8
 8001a50:	200061d8 	.word	0x200061d8

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680;
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001ab2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad2:	482e      	ldr	r0, [pc, #184]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001ad4:	f002 f80a 	bl	8003aec <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ade:	f7ff fe0d 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4827      	ldr	r0, [pc, #156]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001af0:	f002 fbdc 	bl	80042ac <HAL_TIM_ConfigClockSource>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001afa:	f7ff fdff 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001afe:	4823      	ldr	r0, [pc, #140]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b00:	f002 f900 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b0a:	f7ff fdf7 	bl	80016fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481b      	ldr	r0, [pc, #108]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b1e:	f002 ff81 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b28:	f7ff fde8 	bl	80016fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	; 0x60
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b44:	f002 faf0 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b4e:	f7ff fdd5 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2204      	movs	r2, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b5a:	f002 fae5 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001b64:	f7ff fdca 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b70:	f002 fada 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001b7a:	f7ff fdbf 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM2_Init+0x114>)
 8001b80:	f000 fa36 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200002dc 	.word	0x200002dc

08001b90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <MX_TIM3_Init+0x12c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bc8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001bcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be8:	4833      	ldr	r0, [pc, #204]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001bea:	f001 ff7f 	bl	8003aec <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bf4:	f7ff fd82 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c02:	4619      	mov	r1, r3
 8001c04:	482c      	ldr	r0, [pc, #176]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c06:	f002 fb51 	bl	80042ac <HAL_TIM_ConfigClockSource>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c10:	f7ff fd74 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c14:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c16:	f002 f875 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c20:	f7ff fd6c 	bl	80016fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4619      	mov	r1, r3
 8001c32:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c34:	f002 fef6 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c3e:	f7ff fd5d 	bl	80016fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c42:	2360      	movs	r3, #96	; 0x60
 8001c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c5a:	f002 fa65 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c64:	f7ff fd4a 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c70:	f002 fa5a 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001c7a:	f7ff fd3f 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2208      	movs	r2, #8
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c86:	f002 fa4f 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c90:	f7ff fd34 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001c9c:	f002 fa44 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001ca6:	f7ff fd29 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM3_Init+0x128>)
 8001cac:	f000 f9a0 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3738      	adds	r7, #56	; 0x38
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000324 	.word	0x20000324
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	; 0x38
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001cf2:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <MX_TIM4_Init+0x100>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680;
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001cf8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001cfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d18:	4828      	ldr	r0, [pc, #160]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d1a:	f001 fee7 	bl	8003aec <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001d24:	f7ff fcea 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4821      	ldr	r0, [pc, #132]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d36:	f002 fab9 	bl	80042ac <HAL_TIM_ConfigClockSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001d40:	f7ff fcdc 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d44:	481d      	ldr	r0, [pc, #116]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d46:	f001 ffdd 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001d50:	f7ff fcd4 	bl	80016fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4619      	mov	r1, r3
 8001d62:	4816      	ldr	r0, [pc, #88]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d64:	f002 fe5e 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d6e:	f7ff fcc5 	bl	80016fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d72:	2360      	movs	r3, #96	; 0x60
 8001d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001d8a:	f002 f9cd 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d94:	f7ff fcb2 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001da0:	f002 f9c2 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001daa:	f7ff fca7 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM4_Init+0xfc>)
 8001db0:	f000 f91e 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000036c 	.word	0x2000036c
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <MX_TIM9_Init+0x70>)
 8001dda:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001dde:	2253      	movs	r2, #83	; 0x53
 8001de0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001dfe:	f001 fe75 	bl	8003aec <HAL_TIM_Base_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001e08:	f7ff fc78 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_TIM9_Init+0x6c>)
 8001e18:	f002 fa48 	bl	80042ac <HAL_TIM_ConfigClockSource>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001e22:	f7ff fc6b 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200003b4 	.word	0x200003b4
 8001e34:	40014000 	.word	0x40014000

08001e38 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <MX_TIM10_Init+0x44>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e44:	2253      	movs	r2, #83	; 0x53
 8001e46:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e54:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM10_Init+0x40>)
 8001e64:	f001 fe42 	bl	8003aec <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e6e:	f7ff fc45 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003fc 	.word	0x200003fc
 8001e7c:	40014400 	.word	0x40014400

08001e80 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <MX_TIM11_Init+0x44>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001e8c:	2253      	movs	r2, #83	; 0x53
 8001e8e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_TIM11_Init+0x40>)
 8001eac:	f001 fe1e 	bl	8003aec <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001eb6:	f7ff fc21 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000444 	.word	0x20000444
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001ef6:	e06a      	b.n	8001fce <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <HAL_TIM_Base_MspInit+0x114>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
}
 8001f1e:	e056      	b.n	8001fce <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM4)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_TIM_Base_MspInit+0x118>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
}
 8001f46:	e042      	b.n	8001fce <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM9)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_TIM_Base_MspInit+0x11c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
}
 8001f6e:	e02e      	b.n	8001fce <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM10)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_TIM_Base_MspInit+0x120>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d116      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	210f      	movs	r1, #15
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f000 fb6e 	bl	800267c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f000 fb87 	bl	80026b4 <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e012      	b.n	8001fce <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM11)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_TIM_Base_MspInit+0x124>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_TIM_Base_MspInit+0x110>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40000800 	.word	0x40000800
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d13e      	bne.n	8002090 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = R_ELEV_PWM_Pin|L_ELEV_PWM_Pin;
 800204a:	f248 0302 	movw	r3, #32770	; 0x8002
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4840      	ldr	r0, [pc, #256]	; (8002168 <HAL_TIM_MspPostInit+0x178>)
 8002068:	f000 fbc4 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RUDDER_PWM_Pin;
 800206c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800207e:	2301      	movs	r3, #1
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RUDDER_PWM_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	4838      	ldr	r0, [pc, #224]	; (800216c <HAL_TIM_MspPostInit+0x17c>)
 800208a:	f000 fbb3 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800208e:	e065      	b.n	800215c <HAL_TIM_MspPostInit+0x16c>
  else if(timHandle->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_TIM_MspPostInit+0x180>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d13d      	bne.n	8002116 <HAL_TIM_MspPostInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_FLAP_PWM_Pin;
 80020d2:	2340      	movs	r3, #64	; 0x40
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e2:	2302      	movs	r3, #2
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(L_FLAP_PWM_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <HAL_TIM_MspPostInit+0x178>)
 80020ee:	f000 fb81 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = L_AILERON_PWM_Pin|R_FLAP_PWM_Pin|R_AILERON_PWM_Pin;
 80020f2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002104:	2302      	movs	r3, #2
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	4819      	ldr	r0, [pc, #100]	; (8002174 <HAL_TIM_MspPostInit+0x184>)
 8002110:	f000 fb70 	bl	80027f4 <HAL_GPIO_Init>
}
 8002114:	e022      	b.n	800215c <HAL_TIM_MspPostInit+0x16c>
  else if(timHandle->Instance==TIM4)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_TIM_MspPostInit+0x188>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d11d      	bne.n	800215c <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_TIM_MspPostInit+0x174>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L_SPEED_PWM_Pin|R_SPEED_PWM_Pin;
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800214c:	2302      	movs	r3, #2
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_TIM_MspPostInit+0x17c>)
 8002158:	f000 fb4c 	bl	80027f4 <HAL_GPIO_Init>
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40000400 	.word	0x40000400
 8002174:	40020800 	.word	0x40020800
 8002178:	40000800 	.word	0x40000800

0800217c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <MX_USART1_UART_Init+0x50>)
 8002184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 8002188:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800218c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_USART1_UART_Init+0x4c>)
 80021b4:	f002 fcb8 	bl	8004b28 <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021be:	f7ff fa9d 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000048c 	.word	0x2000048c
 80021cc:	40011000 	.word	0x40011000

080021d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <MX_USART2_UART_Init+0x50>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002208:	f002 fc8e 	bl	8004b28 <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002212:	f7ff fa73 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200004d0 	.word	0x200004d0
 8002220:	40004400 	.word	0x40004400

08002224 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <MX_USART6_UART_Init+0x50>)
 800222c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_USART6_UART_Init+0x4c>)
 800225c:	f002 fc64 	bl	8004b28 <HAL_UART_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002266:	f7ff fa49 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000514 	.word	0x20000514
 8002274:	40011400 	.word	0x40011400

08002278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08e      	sub	sp, #56	; 0x38
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d135      	bne.n	8002306 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <HAL_UART_MspInit+0x164>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RADIO_TX_Pin|RADIO_RX_Pin;
 80022d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e4:	2307      	movs	r3, #7
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	4619      	mov	r1, r3
 80022ee:	483c      	ldr	r0, [pc, #240]	; (80023e0 <HAL_UART_MspInit+0x168>)
 80022f0:	f000 fa80 	bl	80027f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2105      	movs	r1, #5
 80022f8:	2025      	movs	r0, #37	; 0x25
 80022fa:	f000 f9bf 	bl	800267c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022fe:	2025      	movs	r0, #37	; 0x25
 8002300:	f000 f9d8 	bl	80026b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002304:	e063      	b.n	80023ce <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <HAL_UART_MspInit+0x16c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d12c      	bne.n	800236a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_UART_MspInit+0x164>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6313      	str	r3, [r2, #48]	; 0x30
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_UART_MspInit+0x164>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002348:	230c      	movs	r3, #12
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002358:	2307      	movs	r3, #7
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	481f      	ldr	r0, [pc, #124]	; (80023e0 <HAL_UART_MspInit+0x168>)
 8002364:	f000 fa46 	bl	80027f4 <HAL_GPIO_Init>
}
 8002368:	e031      	b.n	80023ce <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART6)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_UART_MspInit+0x170>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d12c      	bne.n	80023ce <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_UART_MspInit+0x164>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_UART_MspInit+0x164>)
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	6453      	str	r3, [r2, #68]	; 0x44
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_UART_MspInit+0x164>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_UART_MspInit+0x164>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OPENLOGGER_TX_Pin|OPENLOGGER_RX_Pin;
 80023ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023be:	2308      	movs	r3, #8
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_UART_MspInit+0x168>)
 80023ca:	f000 fa13 	bl	80027f4 <HAL_GPIO_Init>
}
 80023ce:	bf00      	nop
 80023d0:	3738      	adds	r7, #56	; 0x38
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40004400 	.word	0x40004400
 80023e8:	40011400 	.word	0x40011400

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f2:	490e      	ldr	r1, [pc, #56]	; (800242c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002408:	4c0b      	ldr	r4, [pc, #44]	; (8002438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002416:	f7ff fb1d 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f009 fc87 	bl	800bd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7ff f895 	bl	800154c <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002424:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002430:	0800fd40 	.word	0x0800fd40
  ldr r2, =_sbss
 8002434:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002438:	200061d4 	.word	0x200061d4

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 f8fc 	bl	8002666 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	200f      	movs	r0, #15
 8002470:	f7ff f976 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff f948 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000558 	.word	0x20000558

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000558 	.word	0x20000558

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff ffee 	bl	80024ac <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffde 	bl	80024ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008

0800250c <__NVIC_SetPriorityGrouping>:
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff4c 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268e:	f7ff ff61 	bl	8002554 <__NVIC_GetPriorityGrouping>
 8002692:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6978      	ldr	r0, [r7, #20]
 800269a:	f7ff ffb1 	bl	8002600 <NVIC_EncodePriority>
 800269e:	4602      	mov	r2, r0
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff80 	bl	80025ac <__NVIC_SetPriority>
}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff54 	bl	8002570 <__NVIC_EnableIRQ>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026de:	f7ff fee5 	bl	80024ac <HAL_GetTick>
 80026e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d008      	beq.n	8002702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e052      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0216 	bic.w	r2, r2, #22
 8002710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_DMA_Abort+0x62>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0208 	bic.w	r2, r2, #8
 8002740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002752:	e013      	b.n	800277c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002754:	f7ff feaa 	bl	80024ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d90c      	bls.n	800277c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2203      	movs	r2, #3
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e015      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e4      	bne.n	8002754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	223f      	movs	r2, #63	; 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00c      	b.n	80027e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e159      	b.n	8002ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8148 	bne.w	8002abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a2 	beq.w	8002abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x202>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2f4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x1fe>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x1fa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_GPIO_Init+0x300>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x1f2>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f aea2 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 fafa 	bl	80061ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e12b      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fc30 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c28:	f000 ff06 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a81      	ldr	r2, [pc, #516]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d807      	bhi.n	8002c48 <HAL_I2C_Init+0x84>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <HAL_I2C_Init+0x278>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e006      	b.n	8002c56 <HAL_I2C_Init+0x92>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <HAL_I2C_Init+0x27c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0e7      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a78      	ldr	r2, [pc, #480]	; (8002e44 <HAL_I2C_Init+0x280>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9b      	lsrs	r3, r3, #18
 8002c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <HAL_I2C_Init+0xd4>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3301      	adds	r3, #1
 8002c96:	e009      	b.n	8002cac <HAL_I2C_Init+0xe8>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	4a69      	ldr	r2, [pc, #420]	; (8002e48 <HAL_I2C_Init+0x284>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	3301      	adds	r3, #1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	495c      	ldr	r1, [pc, #368]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d819      	bhi.n	8002d00 <HAL_I2C_Init+0x13c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e59      	subs	r1, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_I2C_Init+0x138>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e59      	subs	r1, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	e051      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e04f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <HAL_I2C_Init+0x168>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e012      	b.n	8002d52 <HAL_I2C_Init+0x18e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x196>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e022      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10e      	bne.n	8002d80 <HAL_I2C_Init+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e58      	subs	r0, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	440b      	add	r3, r1
 8002d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	e00f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6809      	ldr	r1, [r1, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6911      	ldr	r1, [r2, #16]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	000186a0 	.word	0x000186a0
 8002e3c:	001e847f 	.word	0x001e847f
 8002e40:	003d08ff 	.word	0x003d08ff
 8002e44:	431bde83 	.word	0x431bde83
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fb26 	bl	80024ac <HAL_GetTick>
 8002e60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	f040 8111 	bne.w	8003096 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2319      	movs	r3, #25
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4988      	ldr	r1, [pc, #544]	; (80030a0 <HAL_I2C_IsDeviceReady+0x254>)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f912 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e104      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2C_IsDeviceReady+0x50>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0fd      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d007      	beq.n	8002ec2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2224      	movs	r2, #36	; 0x24
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a70      	ldr	r2, [pc, #448]	; (80030a4 <HAL_I2C_IsDeviceReady+0x258>)
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8d0 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1c:	d103      	bne.n	8002f26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0b6      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff fab7 	bl	80024ac <HAL_GetTick>
 8002f3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f6e:	e025      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f70:	f7ff fa9c 	bl	80024ac <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d302      	bcc.n	8002f86 <HAL_I2C_IsDeviceReady+0x13a>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22a0      	movs	r2, #160	; 0xa0
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_I2C_IsDeviceReady+0x188>
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_I2C_IsDeviceReady+0x188>
 8002fce:	7dbb      	ldrb	r3, [r7, #22]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0cd      	beq.n	8002f70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d129      	bne.n	800303e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	4921      	ldr	r1, [pc, #132]	; (80030a0 <HAL_I2C_IsDeviceReady+0x254>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f844 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e036      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e02c      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003056:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_I2C_IsDeviceReady+0x254>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f820 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e012      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3301      	adds	r3, #1
 8003076:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	f4ff af32 	bcc.w	8002ee6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00100002 	.word	0x00100002
 80030a4:	ffff0000 	.word	0xffff0000

080030a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	e025      	b.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c0:	d021      	beq.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7ff f9f3 	bl	80024ac <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e023      	b.n	800314e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10d      	bne.n	800312c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	e00c      	b.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d0b6      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e267      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d075      	beq.n	8003262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00c      	beq.n	800319c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003182:	4b85      	ldr	r3, [pc, #532]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d112      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319a:	d10b      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d05b      	beq.n	8003260 <HAL_RCC_OscConfig+0x108>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d157      	bne.n	8003260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e242      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d106      	bne.n	80031cc <HAL_RCC_OscConfig+0x74>
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x98>
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6f      	ldr	r2, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6c      	ldr	r2, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a68      	ldr	r2, [pc, #416]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a65      	ldr	r2, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff f94c 	bl	80024ac <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7ff f948 	bl	80024ac <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e207      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xc0>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7ff f938 	bl	80024ac <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7ff f934 	bl	80024ac <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1f3      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b51      	ldr	r3, [pc, #324]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0xe8>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1c7      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4937      	ldr	r1, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x244>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7ff f8ed 	bl	80024ac <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d6:	f7ff f8e9 	bl	80024ac <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1a8      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4925      	ldr	r1, [pc, #148]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_OscConfig+0x244>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff f8cc 	bl	80024ac <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003318:	f7ff f8c8 	bl	80024ac <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e187      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d036      	beq.n	80033b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_RCC_OscConfig+0x248>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7ff f8ac 	bl	80024ac <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003358:	f7ff f8a8 	bl	80024ac <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e167      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_OscConfig+0x240>)
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x200>
 8003376:	e01b      	b.n	80033b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_OscConfig+0x248>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7ff f895 	bl	80024ac <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e00e      	b.n	80033a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003386:	f7ff f891 	bl	80024ac <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d907      	bls.n	80033a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e150      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	42470000 	.word	0x42470000
 80033a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ea      	bne.n	8003386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8097 	beq.w	80034ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	4b7d      	ldr	r3, [pc, #500]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a7c      	ldr	r2, [pc, #496]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b7a      	ldr	r3, [pc, #488]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b77      	ldr	r3, [pc, #476]	; (80035cc <HAL_RCC_OscConfig+0x474>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d118      	bne.n	800342c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fa:	4b74      	ldr	r3, [pc, #464]	; (80035cc <HAL_RCC_OscConfig+0x474>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x474>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003406:	f7ff f851 	bl	80024ac <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7ff f84d 	bl	80024ac <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e10c      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x474>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x2ea>
 8003434:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x324>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x30c>
 800344a:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a5e      	ldr	r2, [pc, #376]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a5b      	ldr	r2, [pc, #364]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x324>
 8003464:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a57      	ldr	r2, [pc, #348]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a54      	ldr	r2, [pc, #336]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff f812 	bl	80024ac <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7ff f80e 	bl	80024ac <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0cb      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ee      	beq.n	800348c <HAL_RCC_OscConfig+0x334>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7fe fffc 	bl	80024ac <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe fff8 	bl	80024ac <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0b5      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ce:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a1 	beq.w	8003638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d05c      	beq.n	80035bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d141      	bne.n	800358e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_OscConfig+0x478>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe ffcc 	bl	80024ac <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe ffc8 	bl	80024ac <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e087      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	491b      	ldr	r1, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x478>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fe ffa1 	bl	80024ac <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356e:	f7fe ff9d 	bl	80024ac <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e05c      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x416>
 800358c:	e054      	b.n	8003638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_RCC_OscConfig+0x478>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe ff8a 	bl	80024ac <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe ff86 	bl	80024ac <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e045      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_OscConfig+0x470>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x444>
 80035ba:	e03d      	b.n	8003638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e038      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000
 80035d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x4ec>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d028      	beq.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d121      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d11a      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800360a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800360c:	4293      	cmp	r3, r2
 800360e:	d111      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0cc      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d90c      	bls.n	8003684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d044      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	2b03      	cmp	r3, #3
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e067      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4934      	ldr	r1, [pc, #208]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003738:	f7fe feb8 	bl	80024ac <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7fe feb4 	bl	80024ac <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e04f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003768:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20c      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd ffb6 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	0800f89c 	.word	0x0800f89c
 800380c:	20000000 	.word	0x20000000
 8003810:	20000004 	.word	0x20000004

08003814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b094      	sub	sp, #80	; 0x50
 800381a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
 8003820:	2300      	movs	r3, #0
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	2300      	movs	r3, #0
 8003826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382c:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d00d      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x40>
 8003838:	2b08      	cmp	r3, #8
 800383a:	f200 80e1 	bhi.w	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x34>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x3a>
 8003846:	e0db      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800384c:	e0db      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003852:	e0d8      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003854:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d063      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
 8003874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	633b      	str	r3, [r7, #48]	; 0x30
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	; 0x34
 8003882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	f04f 0000 	mov.w	r0, #0
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003898:	0150      	lsls	r0, r2, #5
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4621      	mov	r1, r4
 80038a0:	1a51      	subs	r1, r2, r1
 80038a2:	6139      	str	r1, [r7, #16]
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb63 0301 	sbc.w	r3, r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	018b      	lsls	r3, r1, #6
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c2:	4651      	mov	r1, sl
 80038c4:	018a      	lsls	r2, r1, #6
 80038c6:	4651      	mov	r1, sl
 80038c8:	ebb2 0801 	subs.w	r8, r2, r1
 80038cc:	4659      	mov	r1, fp
 80038ce:	eb63 0901 	sbc.w	r9, r3, r1
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	4623      	mov	r3, r4
 80038ec:	eb18 0303 	adds.w	r3, r8, r3
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	462b      	mov	r3, r5
 80038f4:	eb49 0303 	adc.w	r3, r9, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003906:	4629      	mov	r1, r5
 8003908:	024b      	lsls	r3, r1, #9
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003910:	4621      	mov	r1, r4
 8003912:	024a      	lsls	r2, r1, #9
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003924:	f7fd f9b8 	bl	8000c98 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	e058      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	2200      	movs	r2, #0
 800393a:	4618      	mov	r0, r3
 800393c:	4611      	mov	r1, r2
 800393e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800394c:	4642      	mov	r2, r8
 800394e:	464b      	mov	r3, r9
 8003950:	f04f 0000 	mov.w	r0, #0
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395e:	0150      	lsls	r0, r2, #5
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4641      	mov	r1, r8
 8003966:	ebb2 0a01 	subs.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800397c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003984:	ebb2 040a 	subs.w	r4, r2, sl
 8003988:	eb63 050b 	sbc.w	r5, r3, fp
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	00eb      	lsls	r3, r5, #3
 8003996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399a:	00e2      	lsls	r2, r4, #3
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	4643      	mov	r3, r8
 80039a2:	18e3      	adds	r3, r4, r3
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	464b      	mov	r3, r9
 80039a8:	eb45 0303 	adc.w	r3, r5, r3
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ba:	4629      	mov	r1, r5
 80039bc:	028b      	lsls	r3, r1, #10
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c4:	4621      	mov	r1, r4
 80039c6:	028a      	lsls	r2, r1, #10
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	61fa      	str	r2, [r7, #28]
 80039d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d8:	f7fd f95e 	bl	8000c98 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3750      	adds	r7, #80	; 0x50
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000000 	.word	0x20000000

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	0800f8ac 	.word	0x0800f8ac

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a64:	f7ff ffdc 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0b5b      	lsrs	r3, r3, #13
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800f8ac 	.word	0x0800f8ac

08003a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	220f      	movs	r2, #15
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_RCC_GetClockConfig+0x60>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40023c00 	.word	0x40023c00

08003aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe f9d8 	bl	8001ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 fcae 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d001      	beq.n	8003ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e03c      	b.n	8003c1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_TIM_Base_Start+0xa0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_TIM_Base_Start+0x5c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d013      	beq.n	8003be8 <HAL_TIM_Base_Start+0x5c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_TIM_Base_Start+0xa4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_TIM_Base_Start+0x5c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_TIM_Base_Start+0xa8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_TIM_Base_Start+0x5c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_TIM_Base_Start+0xac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_Base_Start+0x5c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_TIM_Base_Start+0xb0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d111      	bne.n	8003c0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d010      	beq.n	8003c1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	e007      	b.n	8003c1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40014000 	.word	0x40014000

08003c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e044      	b.n	8003ce2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d013      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d111      	bne.n	8003cd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d010      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	e007      	b.n	8003ce0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000

08003d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e041      	b.n	8003d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f839 	bl	8003da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 fba2 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x24>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e022      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x3e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e015      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x58>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e068      	b.n	8003efc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x82>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e38:	e013      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0x92>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xa2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2201      	movs	r2, #1
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fdb4 	bl	80049d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <HAL_TIM_PWM_Start+0x14c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d107      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_TIM_PWM_Start+0x14c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x10e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d013      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x10e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_TIM_PWM_Start+0x150>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x10e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <HAL_TIM_PWM_Start+0x154>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x10e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_TIM_PWM_Start+0x158>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x10e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_TIM_PWM_Start+0x15c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d010      	beq.n	8003efa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	e007      	b.n	8003efa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	40014000 	.word	0x40014000

08003f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0202 	mvn.w	r2, #2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa77 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa69 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa7a 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0204 	mvn.w	r2, #4
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa4d 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa3f 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa50 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0208 	mvn.w	r2, #8
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa23 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa15 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa26 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0210 	mvn.w	r2, #16
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2208      	movs	r2, #8
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9f9 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9eb 	bl	800443a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9fc 	bl	8004462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0201 	mvn.w	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fb1e 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fd26 	bl	8004b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9c1 	bl	8004476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0220 	mvn.w	r2, #32
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fcf0 	bl	8004b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004142:	2302      	movs	r3, #2
 8004144:	e0ae      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	f200 809f 	bhi.w	8004294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004191 	.word	0x08004191
 8004160:	08004295 	.word	0x08004295
 8004164:	08004295 	.word	0x08004295
 8004168:	08004295 	.word	0x08004295
 800416c:	080041d1 	.word	0x080041d1
 8004170:	08004295 	.word	0x08004295
 8004174:	08004295 	.word	0x08004295
 8004178:	08004295 	.word	0x08004295
 800417c:	08004213 	.word	0x08004213
 8004180:	08004295 	.word	0x08004295
 8004184:	08004295 	.word	0x08004295
 8004188:	08004295 	.word	0x08004295
 800418c:	08004253 	.word	0x08004253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f9f8 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
      break;
 80041ce:	e064      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fa3e 	bl	8004658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6999      	ldr	r1, [r3, #24]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	619a      	str	r2, [r3, #24]
      break;
 8004210:	e043      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fa89 	bl	8004730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0208 	orr.w	r2, r2, #8
 800422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0204 	bic.w	r2, r2, #4
 800423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	61da      	str	r2, [r3, #28]
      break;
 8004250:	e023      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fad3 	bl	8004804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69d9      	ldr	r1, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	61da      	str	r2, [r3, #28]
      break;
 8004292:	e002      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
      break;
 8004298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_ConfigClockSource+0x1c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0b4      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x186>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d03e      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0xd4>
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	f200 8087 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	f000 8086 	beq.w	800441e <HAL_TIM_ConfigClockSource+0x172>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d87f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b70      	cmp	r3, #112	; 0x70
 800431a:	d01a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xa6>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d87b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b60      	cmp	r3, #96	; 0x60
 8004322:	d050      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d877      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b50      	cmp	r3, #80	; 0x50
 800432a:	d03c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xfa>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d873      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d058      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d86f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d064      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d86b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d060      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d867      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d05a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	e062      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f000 fb19 	bl	8004998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]
      break;
 800437e:	e04f      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f000 fb02 	bl	8004998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e03c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 fa76 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2150      	movs	r1, #80	; 0x50
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 facf 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e02c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 fa95 	bl	8004902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2160      	movs	r1, #96	; 0x60
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fabf 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e01c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f000 fa56 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 faaf 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004404:	e00c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f000 faa6 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004416:	e003      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e000      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800441e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a34      	ldr	r2, [pc, #208]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a31      	ldr	r2, [pc, #196]	; (8004574 <TIM_Base_SetConfig+0xe8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a30      	ldr	r2, [pc, #192]	; (8004578 <TIM_Base_SetConfig+0xec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0xf0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d017      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a22      	ldr	r2, [pc, #136]	; (8004574 <TIM_Base_SetConfig+0xe8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <TIM_Base_SetConfig+0xec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00f      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a20      	ldr	r2, [pc, #128]	; (800457c <TIM_Base_SetConfig+0xf0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <TIM_Base_SetConfig+0xf4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <TIM_Base_SetConfig+0xf8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <TIM_Base_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d103      	bne.n	800455c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a13      	ldr	r2, [pc, #76]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40010000 	.word	0x40010000

08004658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0210 	bic.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0320 	bic.w	r3, r3, #32
 80046a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <TIM_OC2_SetConfig+0xd4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10d      	bne.n	80046d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <TIM_OC2_SetConfig+0xd4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d113      	bne.n	8004704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000

08004730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <TIM_OC3_SetConfig+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10d      	bne.n	80047aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <TIM_OC3_SetConfig+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d113      	bne.n	80047da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40010000 	.word	0x40010000

08004804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a10      	ldr	r2, [pc, #64]	; (80048a0 <TIM_OC4_SetConfig+0x9c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d109      	bne.n	8004878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000

080048a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 030a 	bic.w	r3, r3, #10
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2201      	movs	r2, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e050      	b.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10c      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40014000 	.word	0x40014000

08004b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e03f      	b.n	8004bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd fb92 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	; 0x24
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fcd5 	bl	800551c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d11d      	bne.n	8004c18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_UART_Receive_IT+0x26>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e016      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Receive_IT+0x38>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e00f      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 faac 	bl	800516c <UART_Start_Receive_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	e000      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0ba      	sub	sp, #232	; 0xe8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_UART_IRQHandler+0x66>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fb8f 	bl	80053a6 <UART_Receive_IT>
      return;
 8004c88:	e256      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80de 	beq.w	8004e50 <HAL_UART_IRQHandler+0x22c>
 8004c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80d1 	beq.w	8004e50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xae>
 8004cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0201 	orr.w	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xd2>
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <HAL_UART_IRQHandler+0xf6>
 8004d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <HAL_UART_IRQHandler+0x126>
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0208 	orr.w	r2, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 81ed 	beq.w	800512e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x14e>
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb1a 	bl	80053a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <HAL_UART_IRQHandler+0x17a>
 8004d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04f      	beq.n	8004e3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa22 	bl	80051e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d141      	bne.n	8004e36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3314      	adds	r3, #20
 8004dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d9      	bne.n	8004db2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4a7d      	ldr	r2, [pc, #500]	; (8005000 <HAL_UART_IRQHandler+0x3dc>)
 8004e0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd fccc 	bl	80027b0 <HAL_DMA_Abort_IT>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00e      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f986 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00a      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f982 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f97e 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e4a:	e170      	b.n	800512e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	bf00      	nop
    return;
 8004e4e:	e16e      	b.n	800512e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 814a 	bne.w	80050ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8143 	beq.w	80050ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 813c 	beq.w	80050ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	f040 80b4 	bne.w	8005004 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8140 	beq.w	8005132 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f080 8139 	bcs.w	8005132 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed2:	f000 8088 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3314      	adds	r3, #20
 8004f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e1      	bne.n	8004f22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e3      	bne.n	8004f5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e3      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fd fb75 	bl	80026d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8ac 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ffc:	e099      	b.n	8005132 <HAL_UART_IRQHandler+0x50e>
 8004ffe:	bf00      	nop
 8005000:	080052af 	.word	0x080052af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 808b 	beq.w	8005136 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8086 	beq.w	8005136 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800504e:	647a      	str	r2, [r7, #68]	; 0x44
 8005050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	623b      	str	r3, [r7, #32]
   return(result);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005086:	633a      	str	r2, [r7, #48]	; 0x30
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e3      	bne.n	8005062 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0310 	bic.w	r3, r3, #16
 80050be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	617b      	str	r3, [r7, #20]
   return(result);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f834 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ec:	e023      	b.n	8005136 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_UART_IRQHandler+0x4ea>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8e5 	bl	80052d6 <UART_Transmit_IT>
    return;
 800510c:	e014      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00e      	beq.n	8005138 <HAL_UART_IRQHandler+0x514>
 800511a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f925 	bl	8005376 <UART_EndTransmit_IT>
    return;
 800512c:	e004      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
    return;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
      return;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
      return;
 8005136:	bf00      	nop
  }
}
 8005138:	37e8      	adds	r7, #232	; 0xe8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2222      	movs	r2, #34	; 0x22
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0220 	orr.w	r2, r2, #32
 80051d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b095      	sub	sp, #84	; 0x54
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005210:	643a      	str	r2, [r7, #64]	; 0x40
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005244:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	d119      	bne.n	8005294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f023 0310 	bic.w	r3, r3, #16
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005280:	61ba      	str	r2, [r7, #24]
 8005282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	613b      	str	r3, [r7, #16]
   return(result);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052a2:	bf00      	nop
 80052a4:	3754      	adds	r7, #84	; 0x54
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff ff39 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b21      	cmp	r3, #33	; 0x21
 80052e8:	d13e      	bne.n	8005368 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	d114      	bne.n	800531e <UART_Transmit_IT+0x48>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d110      	bne.n	800531e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005310:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	1c9a      	adds	r2, r3, #2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]
 800531c:	e008      	b.n	8005330 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6211      	str	r1, [r2, #32]
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29b      	uxth	r3, r3
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4619      	mov	r1, r3
 800533e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10f      	bne.n	8005364 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005352:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005362:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fefe 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b08c      	sub	sp, #48	; 0x30
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	f040 80ab 	bne.w	8005512 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d117      	bne.n	80053f6 <UART_Receive_IT+0x50>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d113      	bne.n	80053f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
 80053f4:	e026      	b.n	8005444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005408:	d007      	beq.n	800541a <UART_Receive_IT+0x74>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <UART_Receive_IT+0x82>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e008      	b.n	800543a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005434:	b2da      	uxtb	r2, r3
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4619      	mov	r1, r3
 8005452:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005454:	2b00      	cmp	r3, #0
 8005456:	d15a      	bne.n	800550e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0220 	bic.w	r2, r2, #32
 8005466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d135      	bne.n	8005504 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	613b      	str	r3, [r7, #16]
   return(result);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f023 0310 	bic.w	r3, r3, #16
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	623a      	str	r2, [r7, #32]
 80054c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	69f9      	ldr	r1, [r7, #28]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d10a      	bne.n	80054f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fe29 	bl	8005154 <HAL_UARTEx_RxEventCallback>
 8005502:	e002      	b.n	800550a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fe37 	bl	8006178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e002      	b.n	8005514 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3730      	adds	r7, #48	; 0x30
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005520:	b0c0      	sub	sp, #256	; 0x100
 8005522:	af00      	add	r7, sp, #0
 8005524:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	68d9      	ldr	r1, [r3, #12]
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	ea40 0301 	orr.w	r3, r0, r1
 8005544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	431a      	orrs	r2, r3
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	431a      	orrs	r2, r3
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005574:	f021 010c 	bic.w	r1, r1, #12
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005582:	430b      	orrs	r3, r1
 8005584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	6999      	ldr	r1, [r3, #24]
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	ea40 0301 	orr.w	r3, r0, r1
 80055a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <UART_SetConfig+0x2cc>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d005      	beq.n	80055bc <UART_SetConfig+0xa0>
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b8d      	ldr	r3, [pc, #564]	; (80057ec <UART_SetConfig+0x2d0>)
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d104      	bne.n	80055c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7fe fa50 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 80055c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055c4:	e003      	b.n	80055ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c6:	f7fe fa37 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 80055ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d8:	f040 810c 	bne.w	80057f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	1891      	adds	r1, r2, r2
 80055f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055f6:	415b      	adcs	r3, r3
 80055f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055fe:	4621      	mov	r1, r4
 8005600:	eb12 0801 	adds.w	r8, r2, r1
 8005604:	4629      	mov	r1, r5
 8005606:	eb43 0901 	adc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800562c:	462b      	mov	r3, r5
 800562e:	eb49 0303 	adc.w	r3, r9, r3
 8005632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005642:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800564a:	460b      	mov	r3, r1
 800564c:	18db      	adds	r3, r3, r3
 800564e:	653b      	str	r3, [r7, #80]	; 0x50
 8005650:	4613      	mov	r3, r2
 8005652:	eb42 0303 	adc.w	r3, r2, r3
 8005656:	657b      	str	r3, [r7, #84]	; 0x54
 8005658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800565c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005660:	f7fb fb1a 	bl	8000c98 <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4b61      	ldr	r3, [pc, #388]	; (80057f0 <UART_SetConfig+0x2d4>)
 800566a:	fba3 2302 	umull	r2, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	011c      	lsls	r4, r3, #4
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800567c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	1891      	adds	r1, r2, r2
 800568a:	64b9      	str	r1, [r7, #72]	; 0x48
 800568c:	415b      	adcs	r3, r3
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005694:	4641      	mov	r1, r8
 8005696:	eb12 0a01 	adds.w	sl, r2, r1
 800569a:	4649      	mov	r1, r9
 800569c:	eb43 0b01 	adc.w	fp, r3, r1
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b4:	4692      	mov	sl, r2
 80056b6:	469b      	mov	fp, r3
 80056b8:	4643      	mov	r3, r8
 80056ba:	eb1a 0303 	adds.w	r3, sl, r3
 80056be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056c2:	464b      	mov	r3, r9
 80056c4:	eb4b 0303 	adc.w	r3, fp, r3
 80056c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056e0:	460b      	mov	r3, r1
 80056e2:	18db      	adds	r3, r3, r3
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
 80056e6:	4613      	mov	r3, r2
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	647b      	str	r3, [r7, #68]	; 0x44
 80056ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056f6:	f7fb facf 	bl	8000c98 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <UART_SetConfig+0x2d4>)
 8005702:	fba3 2301 	umull	r2, r3, r3, r1
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2264      	movs	r2, #100	; 0x64
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	1acb      	subs	r3, r1, r3
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <UART_SetConfig+0x2d4>)
 8005718:	fba3 2302 	umull	r2, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005724:	441c      	add	r4, r3
 8005726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005730:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	1891      	adds	r1, r2, r2
 800573e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005740:	415b      	adcs	r3, r3
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005748:	4641      	mov	r1, r8
 800574a:	1851      	adds	r1, r2, r1
 800574c:	6339      	str	r1, [r7, #48]	; 0x30
 800574e:	4649      	mov	r1, r9
 8005750:	414b      	adcs	r3, r1
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005760:	4659      	mov	r1, fp
 8005762:	00cb      	lsls	r3, r1, #3
 8005764:	4651      	mov	r1, sl
 8005766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576a:	4651      	mov	r1, sl
 800576c:	00ca      	lsls	r2, r1, #3
 800576e:	4610      	mov	r0, r2
 8005770:	4619      	mov	r1, r3
 8005772:	4603      	mov	r3, r0
 8005774:	4642      	mov	r2, r8
 8005776:	189b      	adds	r3, r3, r2
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800577c:	464b      	mov	r3, r9
 800577e:	460a      	mov	r2, r1
 8005780:	eb42 0303 	adc.w	r3, r2, r3
 8005784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005794:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800579c:	460b      	mov	r3, r1
 800579e:	18db      	adds	r3, r3, r3
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a2:	4613      	mov	r3, r2
 80057a4:	eb42 0303 	adc.w	r3, r2, r3
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057b2:	f7fb fa71 	bl	8000c98 <__aeabi_uldivmod>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <UART_SetConfig+0x2d4>)
 80057bc:	fba3 1302 	umull	r1, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	2164      	movs	r1, #100	; 0x64
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	3332      	adds	r3, #50	; 0x32
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <UART_SetConfig+0x2d4>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	f003 0207 	and.w	r2, r3, #7
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4422      	add	r2, r4
 80057e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e4:	e106      	b.n	80059f4 <UART_SetConfig+0x4d8>
 80057e6:	bf00      	nop
 80057e8:	40011000 	.word	0x40011000
 80057ec:	40011400 	.word	0x40011400
 80057f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005806:	4642      	mov	r2, r8
 8005808:	464b      	mov	r3, r9
 800580a:	1891      	adds	r1, r2, r2
 800580c:	6239      	str	r1, [r7, #32]
 800580e:	415b      	adcs	r3, r3
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
 8005812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005816:	4641      	mov	r1, r8
 8005818:	1854      	adds	r4, r2, r1
 800581a:	4649      	mov	r1, r9
 800581c:	eb43 0501 	adc.w	r5, r3, r1
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	00eb      	lsls	r3, r5, #3
 800582a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582e:	00e2      	lsls	r2, r4, #3
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	4643      	mov	r3, r8
 8005836:	18e3      	adds	r3, r4, r3
 8005838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800583c:	464b      	mov	r3, r9
 800583e:	eb45 0303 	adc.w	r3, r5, r3
 8005842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005862:	4629      	mov	r1, r5
 8005864:	008b      	lsls	r3, r1, #2
 8005866:	4621      	mov	r1, r4
 8005868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800586c:	4621      	mov	r1, r4
 800586e:	008a      	lsls	r2, r1, #2
 8005870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005874:	f7fb fa10 	bl	8000c98 <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4b60      	ldr	r3, [pc, #384]	; (8005a00 <UART_SetConfig+0x4e4>)
 800587e:	fba3 2302 	umull	r2, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	011c      	lsls	r4, r3, #4
 8005886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005890:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005898:	4642      	mov	r2, r8
 800589a:	464b      	mov	r3, r9
 800589c:	1891      	adds	r1, r2, r2
 800589e:	61b9      	str	r1, [r7, #24]
 80058a0:	415b      	adcs	r3, r3
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a8:	4641      	mov	r1, r8
 80058aa:	1851      	adds	r1, r2, r1
 80058ac:	6139      	str	r1, [r7, #16]
 80058ae:	4649      	mov	r1, r9
 80058b0:	414b      	adcs	r3, r1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c0:	4659      	mov	r1, fp
 80058c2:	00cb      	lsls	r3, r1, #3
 80058c4:	4651      	mov	r1, sl
 80058c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ca:	4651      	mov	r1, sl
 80058cc:	00ca      	lsls	r2, r1, #3
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	4642      	mov	r2, r8
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058dc:	464b      	mov	r3, r9
 80058de:	460a      	mov	r2, r1
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005900:	4649      	mov	r1, r9
 8005902:	008b      	lsls	r3, r1, #2
 8005904:	4641      	mov	r1, r8
 8005906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590a:	4641      	mov	r1, r8
 800590c:	008a      	lsls	r2, r1, #2
 800590e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005912:	f7fb f9c1 	bl	8000c98 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4611      	mov	r1, r2
 800591c:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <UART_SetConfig+0x4e4>)
 800591e:	fba3 2301 	umull	r2, r3, r3, r1
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	2264      	movs	r2, #100	; 0x64
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	1acb      	subs	r3, r1, r3
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	3332      	adds	r3, #50	; 0x32
 8005930:	4a33      	ldr	r2, [pc, #204]	; (8005a00 <UART_SetConfig+0x4e4>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800593c:	441c      	add	r4, r3
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	673b      	str	r3, [r7, #112]	; 0x70
 8005946:	677a      	str	r2, [r7, #116]	; 0x74
 8005948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	415b      	adcs	r3, r3
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800595c:	4641      	mov	r1, r8
 800595e:	1851      	adds	r1, r2, r1
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	4649      	mov	r1, r9
 8005964:	414b      	adcs	r3, r1
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005974:	4659      	mov	r1, fp
 8005976:	00cb      	lsls	r3, r1, #3
 8005978:	4651      	mov	r1, sl
 800597a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800597e:	4651      	mov	r1, sl
 8005980:	00ca      	lsls	r2, r1, #3
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	4603      	mov	r3, r0
 8005988:	4642      	mov	r2, r8
 800598a:	189b      	adds	r3, r3, r2
 800598c:	66bb      	str	r3, [r7, #104]	; 0x68
 800598e:	464b      	mov	r3, r9
 8005990:	460a      	mov	r2, r1
 8005992:	eb42 0303 	adc.w	r3, r2, r3
 8005996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	663b      	str	r3, [r7, #96]	; 0x60
 80059a2:	667a      	str	r2, [r7, #100]	; 0x64
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059b0:	4649      	mov	r1, r9
 80059b2:	008b      	lsls	r3, r1, #2
 80059b4:	4641      	mov	r1, r8
 80059b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ba:	4641      	mov	r1, r8
 80059bc:	008a      	lsls	r2, r1, #2
 80059be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059c2:	f7fb f969 	bl	8000c98 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <UART_SetConfig+0x4e4>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	; 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	3332      	adds	r3, #50	; 0x32
 80059de:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <UART_SetConfig+0x4e4>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4422      	add	r2, r4
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a00:	51eb851f 	.word	0x51eb851f

08005a04 <ControlActuators>:
#define TAIL_SERVO_2_FLIPPED false
#define TAIL_SERVO_3_FLIPPED false

extern osMessageQueueId_t actCmdsHandle;

void ControlActuators(){
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	; 0x30
 8005a08:	af00      	add	r7, sp, #0
    // Use standard control scheme
    for(;;){

        // Pulls all the available actuator commands so as to clear the queue
        actuator_t act_cmd;
        uint32_t num_waiting_cmds = osMessageQueueGetCount(actCmdsHandle);
 8005a0a:	4b64      	ldr	r3, [pc, #400]	; (8005b9c <ControlActuators+0x198>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f002 fbac 	bl	800816c <osMessageQueueGetCount>
 8005a14:	62b8      	str	r0, [r7, #40]	; 0x28

        for(int i = 0; i < num_waiting_cmds; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	e00a      	b.n	8005a32 <ControlActuators+0x2e>
            osMessageQueueGet(actCmdsHandle, &act_cmd, 0, osWaitForever);
 8005a1c:	4b5f      	ldr	r3, [pc, #380]	; (8005b9c <ControlActuators+0x198>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	4639      	mov	r1, r7
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a26:	2200      	movs	r2, #0
 8005a28:	f002 fb42 	bl	80080b0 <osMessageQueueGet>
        for(int i = 0; i < num_waiting_cmds; i++)
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	3301      	adds	r3, #1
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d8f0      	bhi.n	8005a1c <ControlActuators+0x18>

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (WING_SERVO_1_FLIPPED? -1 : 1) * (act_cmd.left_flap_ang/WING_SERVO_MAX_ANG * (WING_SERVO_IDEAL_RANGE_CCX/2)) + WING_SERVO_IDEAL_NEUTRAL_CCX + (WING_SERVO_1_ZERO_BIAS_CCX));
 8005a3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ba0 <ControlActuators+0x19c>
 8005a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a46:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a4e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005ba4 <ControlActuators+0x1a0>
 8005a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a5e:	4b52      	ldr	r3, [pc, #328]	; (8005ba8 <ControlActuators+0x1a4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a66:	ee17 2a90 	vmov	r2, s15
 8005a6a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (WING_SERVO_2_FLIPPED? -1 : 1) * (act_cmd.left_aileron_ang/WING_SERVO_MAX_ANG * (WING_SERVO_IDEAL_RANGE_CCX/2)) + WING_SERVO_IDEAL_NEUTRAL_CCX + (WING_SERVO_2_ZERO_BIAS_CCX));
 8005a6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a70:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8005ba0 <ControlActuators+0x19c>
 8005a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a80:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005ba4 <ControlActuators+0x1a0>
 8005a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <ControlActuators+0x1a4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a98:	ee17 2a90 	vmov	r2, s15
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (WING_SERVO_3_FLIPPED? -1 : 1) * (act_cmd.right_flap_ang/WING_SERVO_MAX_ANG * (WING_SERVO_IDEAL_RANGE_CCX/2)) + WING_SERVO_IDEAL_NEUTRAL_CCX + (WING_SERVO_3_ZERO_BIAS_CCX));
 8005a9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005aa2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8005ba0 <ControlActuators+0x19c>
 8005aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aaa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005ba4 <ControlActuators+0x1a0>
 8005ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <ControlActuators+0x1a4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aca:	ee17 2a90 	vmov	r2, s15
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (WING_SERVO_4_FLIPPED? -1 : 1) * (act_cmd.right_aileron_ang/WING_SERVO_MAX_ANG * (WING_SERVO_IDEAL_RANGE_CCX/2)) + WING_SERVO_IDEAL_NEUTRAL_CCX + (WING_SERVO_4_ZERO_BIAS_CCX));
 8005ad0:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ad4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005ba0 <ControlActuators+0x19c>
 8005ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005adc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ae4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005ba4 <ControlActuators+0x1a0>
 8005ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005af4:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <ControlActuators+0x1a4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afc:	ee17 2a90 	vmov	r2, s15
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (TAIL_SERVO_1_FLIPPED? -1 : 1) * (act_cmd.left_elevator_ang/TAIL_SERVO_MAX_ANG * (TAIL_SERVO_IDEAL_RANGE_CCX/2)) + TAIL_SERVO_IDEAL_NEUTRAL_CCX + (TAIL_SERVO_1_ZERO_BIAS_CCX));
 8005b02:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b06:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005bac <ControlActuators+0x1a8>
 8005b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b0e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005bb0 <ControlActuators+0x1ac>
 8005b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b16:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005ba4 <ControlActuators+0x1a0>
 8005b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b1e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <ControlActuators+0x1b0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2e:	ee17 2a90 	vmov	r2, s15
 8005b32:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (TAIL_SERVO_2_FLIPPED? -1 : 1) * (act_cmd.right_elevator_ang/TAIL_SERVO_MAX_ANG * (TAIL_SERVO_IDEAL_RANGE_CCX/2)) + TAIL_SERVO_IDEAL_NEUTRAL_CCX + (TAIL_SERVO_2_ZERO_BIAS_CCX));
 8005b34:	ed97 7a08 	vldr	s14, [r7, #32]
 8005b38:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005bac <ControlActuators+0x1a8>
 8005b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b40:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005bb0 <ControlActuators+0x1ac>
 8005b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005ba4 <ControlActuators+0x1a0>
 8005b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b50:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <ControlActuators+0x1b0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b60:	ee17 2a90 	vmov	r2, s15
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (TAIL_SERVO_3_FLIPPED? -1 : 1) * (act_cmd.rudder_ang/TAIL_SERVO_MAX_ANG * (TAIL_SERVO_IDEAL_RANGE_CCX/2)) + TAIL_SERVO_IDEAL_NEUTRAL_CCX + (TAIL_SERVO_3_ZERO_BIAS_CCX));
 8005b66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b6a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8005bac <ControlActuators+0x1a8>
 8005b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b72:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005bb0 <ControlActuators+0x1ac>
 8005b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b7a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005ba4 <ControlActuators+0x1a0>
 8005b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <ControlActuators+0x1b0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b92:	ee17 2a90 	vmov	r2, s15
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
    for(;;){
 8005b98:	e737      	b.n	8005a0a <ControlActuators+0x6>
 8005b9a:	bf00      	nop
 8005b9c:	20000214 	.word	0x20000214
 8005ba0:	42340000 	.word	0x42340000
 8005ba4:	42960000 	.word	0x42960000
 8005ba8:	20000324 	.word	0x20000324
 8005bac:	42b40000 	.word	0x42b40000
 8005bb0:	42480000 	.word	0x42480000
 8005bb4:	200002dc 	.word	0x200002dc

08005bb8 <ReadRngs>:
extern osMessageQueueId_t rng2ToLogHandle;

bool rng1_echo_started = false;
bool rng2_echo_started = false;

void ReadRngs(){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
    for(;;){
        // Generates the triggers to cause a read, the echos are handled by interrupts

        osKernelLock(); // Prevents switching while generating trigger pulse
 8005bbc:	f002 f804 	bl	8007bc8 <osKernelLock>

        // Generates pulses concurrently
        HAL_GPIO_WritePin(RNG1_TRIG_GPIO_Port, RNG1_TRIG_Pin, GPIO_PIN_SET);
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bc6:	4812      	ldr	r0, [pc, #72]	; (8005c10 <ReadRngs+0x58>)
 8005bc8:	f7fc ffb0 	bl	8002b2c <HAL_GPIO_WritePin>
        delay_us(10, &htim10);
 8005bcc:	4911      	ldr	r1, [pc, #68]	; (8005c14 <ReadRngs+0x5c>)
 8005bce:	200a      	movs	r0, #10
 8005bd0:	f000 faba 	bl	8006148 <delay_us>
        HAL_GPIO_WritePin(RNG1_TRIG_GPIO_Port, RNG1_TRIG_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bda:	480d      	ldr	r0, [pc, #52]	; (8005c10 <ReadRngs+0x58>)
 8005bdc:	f7fc ffa6 	bl	8002b2c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(RNG2_TRIG_GPIO_Port, RNG2_TRIG_Pin, GPIO_PIN_SET);
 8005be0:	2201      	movs	r2, #1
 8005be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005be6:	480a      	ldr	r0, [pc, #40]	; (8005c10 <ReadRngs+0x58>)
 8005be8:	f7fc ffa0 	bl	8002b2c <HAL_GPIO_WritePin>
        delay_us(10, &htim11);
 8005bec:	490a      	ldr	r1, [pc, #40]	; (8005c18 <ReadRngs+0x60>)
 8005bee:	200a      	movs	r0, #10
 8005bf0:	f000 faaa 	bl	8006148 <delay_us>
        HAL_GPIO_WritePin(RNG2_TRIG_GPIO_Port, RNG2_TRIG_Pin, GPIO_PIN_RESET);
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005bfa:	4805      	ldr	r0, [pc, #20]	; (8005c10 <ReadRngs+0x58>)
 8005bfc:	f7fc ff96 	bl	8002b2c <HAL_GPIO_WritePin>

        osKernelUnlock();
 8005c00:	f002 f808 	bl	8007c14 <osKernelUnlock>

        osDelay(1000); // Measures at 10 Hz
 8005c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c08:	f002 f964 	bl	8007ed4 <osDelay>
        osKernelLock(); // Prevents switching while generating trigger pulse
 8005c0c:	e7d6      	b.n	8005bbc <ReadRngs+0x4>
 8005c0e:	bf00      	nop
 8005c10:	40020800 	.word	0x40020800
 8005c14:	200003fc 	.word	0x200003fc
 8005c18:	20000444 	.word	0x20000444
 8005c1c:	00000000 	.word	0x00000000

08005c20 <Rng1EchoCallback>:
    }

    osThreadTerminate(NULL);
}

void Rng1EchoCallback(){
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(RNG1_ECHO_GPIO_Port, RNG1_ECHO_Pin)){
 8005c26:	2104      	movs	r1, #4
 8005c28:	4833      	ldr	r0, [pc, #204]	; (8005cf8 <Rng1EchoCallback+0xd8>)
 8005c2a:	f7fc ff67 	bl	8002afc <HAL_GPIO_ReadPin>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <Rng1EchoCallback+0x24>
        // printf("Rng1 echo rising edge!\n");
        __HAL_TIM_SET_COUNTER(&htim10, 0);
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <Rng1EchoCallback+0xdc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24
        rng1_echo_started = true;
 8005c3c:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <Rng1EchoCallback+0xe0>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	701a      	strb	r2, [r3, #0]
        rng_reading.timestamp_ms = osKernelGetTickCount();
        rng_reading.rng = calc_rng;

        osMessageQueuePut(rng1ToLogHandle, &rng_reading, 0, 0);
    }
}
 8005c42:	e04c      	b.n	8005cde <Rng1EchoCallback+0xbe>
    } else if (rng1_echo_started){
 8005c44:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <Rng1EchoCallback+0xe0>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d048      	beq.n	8005cde <Rng1EchoCallback+0xbe>
        rng1_echo_started = false;
 8005c4c:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <Rng1EchoCallback+0xe0>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
        uint32_t echo_duration_us = __HAL_TIM_GET_COUNTER(&htim10);
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <Rng1EchoCallback+0xdc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	60fb      	str	r3, [r7, #12]
        float calc_rng = ((float)echo_duration_us / 1e6) * SPEED_SOUND_GROUND / 2;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c64:	ee17 0a90 	vmov	r0, s15
 8005c68:	f7fa fc76 	bl	8000558 <__aeabi_f2d>
 8005c6c:	a31e      	add	r3, pc, #120	; (adr r3, 8005ce8 <Rng1EchoCallback+0xc8>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f7fa fdf3 	bl	800085c <__aeabi_ddiv>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	a31c      	add	r3, pc, #112	; (adr r3, 8005cf0 <Rng1EchoCallback+0xd0>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fcc0 	bl	8000608 <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c98:	f7fa fde0 	bl	800085c <__aeabi_ddiv>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7fa ffa8 	bl	8000bf8 <__aeabi_d2f>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	60bb      	str	r3, [r7, #8]
        printf("echo duration (us): %i\n", echo_duration_us);
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	4815      	ldr	r0, [pc, #84]	; (8005d04 <Rng1EchoCallback+0xe4>)
 8005cb0:	f001 fee0 	bl	8007a74 <printf_>
        printf("Rng1: %.03f\n", calc_rng);
 8005cb4:	68b8      	ldr	r0, [r7, #8]
 8005cb6:	f7fa fc4f 	bl	8000558 <__aeabi_f2d>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4812      	ldr	r0, [pc, #72]	; (8005d08 <Rng1EchoCallback+0xe8>)
 8005cc0:	f001 fed8 	bl	8007a74 <printf_>
        rng_reading.timestamp_ms = osKernelGetTickCount();
 8005cc4:	f001 ffd8 	bl	8007c78 <osKernelGetTickCount>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	603b      	str	r3, [r7, #0]
        rng_reading.rng = calc_rng;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	607b      	str	r3, [r7, #4]
        osMessageQueuePut(rng1ToLogHandle, &rng_reading, 0, 0);
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <Rng1EchoCallback+0xec>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f002 f989 	bl	8007ff0 <osMessageQueuePut>
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	412e8480 	.word	0x412e8480
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	40757000 	.word	0x40757000
 8005cf8:	40020c00 	.word	0x40020c00
 8005cfc:	200003fc 	.word	0x200003fc
 8005d00:	2000055c 	.word	0x2000055c
 8005d04:	0800f5e4 	.word	0x0800f5e4
 8005d08:	0800f5fc 	.word	0x0800f5fc
 8005d0c:	20000220 	.word	0x20000220

08005d10 <Rng2EchoCallback>:

void Rng2EchoCallback(){
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(RNG2_ECHO_GPIO_Port, RNG2_ECHO_Pin)){
 8005d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d1a:	4833      	ldr	r0, [pc, #204]	; (8005de8 <Rng2EchoCallback+0xd8>)
 8005d1c:	f7fc feee 	bl	8002afc <HAL_GPIO_ReadPin>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <Rng2EchoCallback+0x26>
        __HAL_TIM_SET_COUNTER(&htim11, 0);
 8005d26:	4b31      	ldr	r3, [pc, #196]	; (8005dec <Rng2EchoCallback+0xdc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
        rng2_echo_started = true;
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <Rng2EchoCallback+0xe0>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]
        rng_reading.timestamp_ms = osKernelGetTickCount();
        rng_reading.rng = calc_rng;

        osMessageQueuePut(rng2ToLogHandle, &rng_reading, 0, 0);
    }
}
 8005d34:	e04c      	b.n	8005dd0 <Rng2EchoCallback+0xc0>
    } else if (rng2_echo_started){
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <Rng2EchoCallback+0xe0>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d048      	beq.n	8005dd0 <Rng2EchoCallback+0xc0>
        rng2_echo_started = false;
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	; (8005df0 <Rng2EchoCallback+0xe0>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
        uint32_t echo_duration_us = __HAL_TIM_GET_COUNTER(&htim11);
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <Rng2EchoCallback+0xdc>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	60fb      	str	r3, [r7, #12]
        float calc_rng = ((float)echo_duration_us / 1e6) * SPEED_SOUND_GROUND / 2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	ee17 0a90 	vmov	r0, s15
 8005d5a:	f7fa fbfd 	bl	8000558 <__aeabi_f2d>
 8005d5e:	a31e      	add	r3, pc, #120	; (adr r3, 8005dd8 <Rng2EchoCallback+0xc8>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fd7a 	bl	800085c <__aeabi_ddiv>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	a31b      	add	r3, pc, #108	; (adr r3, 8005de0 <Rng2EchoCallback+0xd0>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fc47 	bl	8000608 <__aeabi_dmul>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d8a:	f7fa fd67 	bl	800085c <__aeabi_ddiv>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fa ff2f 	bl	8000bf8 <__aeabi_d2f>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	60bb      	str	r3, [r7, #8]
        printf("echo duration (us): %i\n", echo_duration_us);
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	4814      	ldr	r0, [pc, #80]	; (8005df4 <Rng2EchoCallback+0xe4>)
 8005da2:	f001 fe67 	bl	8007a74 <printf_>
        printf("Rng2: %.03f\n", calc_rng);
 8005da6:	68b8      	ldr	r0, [r7, #8]
 8005da8:	f7fa fbd6 	bl	8000558 <__aeabi_f2d>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4811      	ldr	r0, [pc, #68]	; (8005df8 <Rng2EchoCallback+0xe8>)
 8005db2:	f001 fe5f 	bl	8007a74 <printf_>
        rng_reading.timestamp_ms = osKernelGetTickCount();
 8005db6:	f001 ff5f 	bl	8007c78 <osKernelGetTickCount>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	603b      	str	r3, [r7, #0]
        rng_reading.rng = calc_rng;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	607b      	str	r3, [r7, #4]
        osMessageQueuePut(rng2ToLogHandle, &rng_reading, 0, 0);
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <Rng2EchoCallback+0xec>)
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f002 f910 	bl	8007ff0 <osMessageQueuePut>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	412e8480 	.word	0x412e8480
 8005de0:	00000000 	.word	0x00000000
 8005de4:	40757000 	.word	0x40757000
 8005de8:	40020800 	.word	0x40020800
 8005dec:	20000444 	.word	0x20000444
 8005df0:	2000055d 	.word	0x2000055d
 8005df4:	0800f5e4 	.word	0x0800f5e4
 8005df8:	0800f60c 	.word	0x0800f60c
 8005dfc:	20000228 	.word	0x20000228

08005e00 <verify_imu_comms>:

#define IMU_PWR_TOGGLE_WAIT_MS 25

extern I2C_HandleTypeDef hi2c1;

void verify_imu_comms() {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef inertial_status = HAL_I2C_IsDeviceReady(&hi2c1,
 8005e06:	231e      	movs	r3, #30
 8005e08:	2201      	movs	r2, #1
 8005e0a:	21d6      	movs	r1, #214	; 0xd6
 8005e0c:	4816      	ldr	r0, [pc, #88]	; (8005e68 <verify_imu_comms+0x68>)
 8005e0e:	f7fd f81d 	bl	8002e4c <HAL_I2C_IsDeviceReady>
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
            INERTIAL_I2C_ADDR << 1, 1, IMU_I2C_TIMEOUT_MS);
    HAL_StatusTypeDef mag_status = HAL_I2C_IsDeviceReady(&hi2c1, MAG_I2C_ADDR,
 8005e16:	231e      	movs	r3, #30
 8005e18:	2201      	movs	r2, #1
 8005e1a:	211e      	movs	r1, #30
 8005e1c:	4812      	ldr	r0, [pc, #72]	; (8005e68 <verify_imu_comms+0x68>)
 8005e1e:	f7fd f815 	bl	8002e4c <HAL_I2C_IsDeviceReady>
 8005e22:	4603      	mov	r3, r0
 8005e24:	71bb      	strb	r3, [r7, #6]
            1, IMU_I2C_TIMEOUT_MS);
    if (inertial_status != HAL_OK || mag_status != HAL_OK) {
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <verify_imu_comms+0x32>
 8005e2c:	79bb      	ldrb	r3, [r7, #6]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <verify_imu_comms+0x5e>
        printf("IMU is not ready, power cycling...\n");
 8005e32:	480e      	ldr	r0, [pc, #56]	; (8005e6c <verify_imu_comms+0x6c>)
 8005e34:	f001 fe1e 	bl	8007a74 <printf_>
        HAL_GPIO_WritePin(IMU_PWR_GPIO_Port, IMU_PWR_Pin, GPIO_PIN_RESET);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	; 0x40
 8005e3c:	480c      	ldr	r0, [pc, #48]	; (8005e70 <verify_imu_comms+0x70>)
 8005e3e:	f7fc fe75 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_Delay(IMU_PWR_TOGGLE_WAIT_MS);
 8005e42:	2019      	movs	r0, #25
 8005e44:	f7fc fb3e 	bl	80024c4 <HAL_Delay>
        HAL_GPIO_WritePin(IMU_PWR_GPIO_Port, IMU_PWR_Pin, GPIO_PIN_SET);
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	4808      	ldr	r0, [pc, #32]	; (8005e70 <verify_imu_comms+0x70>)
 8005e4e:	f7fc fe6d 	bl	8002b2c <HAL_GPIO_WritePin>
        HAL_Delay(IMU_PWR_TOGGLE_WAIT_MS);
 8005e52:	2019      	movs	r0, #25
 8005e54:	f7fc fb36 	bl	80024c4 <HAL_Delay>
        printf("IMU power cycle complete!\n");
 8005e58:	4806      	ldr	r0, [pc, #24]	; (8005e74 <verify_imu_comms+0x74>)
 8005e5a:	f001 fe0b 	bl	8007a74 <printf_>
    }
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000023c 	.word	0x2000023c
 8005e6c:	0800f61c 	.word	0x0800f61c
 8005e70:	40020800 	.word	0x40020800
 8005e74:	0800f640 	.word	0x0800f640

08005e78 <ReadMag>:
        return true;
    }
    return false; // Failure to read
}

void ReadMag(void *argument){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
    verify_imu_comms(); // Should trigger the power to the test LED
 8005e80:	f7ff ffbe 	bl	8005e00 <verify_imu_comms>

    for(;;){
        osDelay(1000);
 8005e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e88:	f002 f824 	bl	8007ed4 <osDelay>
 8005e8c:	e7fa      	b.n	8005e84 <ReadMag+0xc>
	...

08005e90 <ReadPressureSensor>:
* @brief Reads from the HX710b-based pressure sensor
* @param argument: Not used
* @retval None
*/
void ReadPressureSensor(void *argument)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	// Sets the SCK pin low to start as this is what the sensor expects
	HAL_GPIO_WritePin(PRESSR_SCK_GPIO_Port, PRESSR_SCK_Pin, GPIO_PIN_RESET);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	482a      	ldr	r0, [pc, #168]	; (8005f48 <ReadPressureSensor+0xb8>)
 8005e9e:	f7fc fe45 	bl	8002b2c <HAL_GPIO_WritePin>

  /* Infinite loop 	*/
  for(;;)
  {
	/// Needs to wait until PRESSR_OUT is high before value can be read
	if (HAL_GPIO_ReadPin(PRESSR_OUT_GPIO_Port, PRESSR_OUT_Pin) == GPIO_PIN_SET){
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4828      	ldr	r0, [pc, #160]	; (8005f48 <ReadPressureSensor+0xb8>)
 8005ea6:	f7fc fe29 	bl	8002afc <HAL_GPIO_ReadPin>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d102      	bne.n	8005eb6 <ReadPressureSensor+0x26>
		// osThreadYield(); // Ensures nonblocking behaviour
	    //osDelay(1); // Waits until the next clock tick
		osThreadYield();
 8005eb0:	f001 fff0 	bl	8007e94 <osThreadYield>
 8005eb4:	e7f5      	b.n	8005ea2 <ReadPressureSensor+0x12>
	    continue;
	}

	osKernelLock(); // Prevents switching while reading sensor
 8005eb6:	f001 fe87 	bl	8007bc8 <osKernelLock>

	uint32_t raw_adc = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
#if PRESSR_USE_40HZ
	for(int i = 0; i < 27; i++)	{
#else
	for(int i = 0; i < 25; i++) {
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	e027      	b.n	8005f14 <ReadPressureSensor+0x84>
#endif
		// The line PRESSR_SCK must be set high and then a slight delay is added to allow the ADC
		// to shift out the next highest bit on PRESSR_OUT. Only the first 24 bits must be stored
		// as the total 25-27 SCK pulses are used to select the data to output.

		HAL_GPIO_WritePin(PRESSR_SCK_GPIO_Port, PRESSR_SCK_Pin, GPIO_PIN_SET);
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	481f      	ldr	r0, [pc, #124]	; (8005f48 <ReadPressureSensor+0xb8>)
 8005eca:	f7fc fe2f 	bl	8002b2c <HAL_GPIO_WritePin>
		delay_us(1, &htim9);
 8005ece:	491f      	ldr	r1, [pc, #124]	; (8005f4c <ReadPressureSensor+0xbc>)
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f000 f939 	bl	8006148 <delay_us>

		if (i < 24){
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	2b17      	cmp	r3, #23
 8005eda:	dc0f      	bgt.n	8005efc <ReadPressureSensor+0x6c>
			GPIO_PinState bit_val = HAL_GPIO_ReadPin(PRESSR_OUT_GPIO_Port, PRESSR_OUT_Pin);
 8005edc:	2102      	movs	r1, #2
 8005ede:	481a      	ldr	r0, [pc, #104]	; (8005f48 <ReadPressureSensor+0xb8>)
 8005ee0:	f7fc fe0c 	bl	8002afc <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	77fb      	strb	r3, [r7, #31]
			raw_adc |= (bit_val << (23-i));
 8005ee8:	7ffa      	ldrb	r2, [r7, #31]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	f1c3 0317 	rsb	r3, r3, #23
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
		}

		HAL_GPIO_WritePin(PRESSR_SCK_GPIO_Port, PRESSR_SCK_Pin, GPIO_PIN_RESET);
 8005efc:	2200      	movs	r2, #0
 8005efe:	2104      	movs	r1, #4
 8005f00:	4811      	ldr	r0, [pc, #68]	; (8005f48 <ReadPressureSensor+0xb8>)
 8005f02:	f7fc fe13 	bl	8002b2c <HAL_GPIO_WritePin>
		delay_us(1, &htim9);
 8005f06:	4911      	ldr	r1, [pc, #68]	; (8005f4c <ReadPressureSensor+0xbc>)
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f000 f91d 	bl	8006148 <delay_us>
	for(int i = 0; i < 25; i++) {
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	3301      	adds	r3, #1
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b18      	cmp	r3, #24
 8005f18:	ddd4      	ble.n	8005ec4 <ReadPressureSensor+0x34>
	}
	osKernelUnlock();
 8005f1a:	f001 fe7b 	bl	8007c14 <osKernelUnlock>

	sens_pressr_t pressr_reading;
	pressr_reading.timestamp_ms = osKernelGetTickCount();
 8005f1e:	f001 feab 	bl	8007c78 <osKernelGetTickCount>
 8005f22:	4603      	mov	r3, r0
 8005f24:	60fb      	str	r3, [r7, #12]
	pressr_reading.pressr_adc = raw_adc;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	617b      	str	r3, [r7, #20]
	// TODO: will need to compute the actual pressure using the curve fit from MATLAB
	pressr_reading.pressr = 0.0;
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]

	// printf("Pressure Sensor ADC Input: %ld\n", raw_adc);
	osMessageQueuePut(pressrToLogHandle, &pressr_reading, 0, PRESSR_QUEUE_PUT_TIMEOUT_MS);
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <ReadPressureSensor+0xc0>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	f107 010c 	add.w	r1, r7, #12
 8005f38:	2305      	movs	r3, #5
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f002 f858 	bl	8007ff0 <osMessageQueuePut>

#if PRESSR_USE_40HZ
	osDelay(25);
#else
    osDelay(100); // 10 Hz update rate
 8005f40:	2064      	movs	r0, #100	; 0x64
 8005f42:	f001 ffc7 	bl	8007ed4 <osDelay>
  {
 8005f46:	e7ac      	b.n	8005ea2 <ReadPressureSensor+0x12>
 8005f48:	40020400 	.word	0x40020400
 8005f4c:	200003b4 	.word	0x200003b4
 8005f50:	20000218 	.word	0x20000218

08005f54 <ParseRecvMsg>:
#define RECV_MSG_SIZE (4+sizeof(float)*9+2)

uint8_t msg_parse_buf[RECV_MSG_SIZE] = {0};
unsigned int pos_in_msg = 0;

void ParseRecvMsg(){
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	; 0x30
 8005f58:	af00      	add	r7, sp, #0
    // First validates the packet
    bool header_present = msg_parse_buf[0] == 'S' && msg_parse_buf[1] == 'C' && msg_parse_buf[2] == 'M' && msg_parse_buf[3];
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b53      	cmp	r3, #83	; 0x53
 8005f60:	d10d      	bne.n	8005f7e <ParseRecvMsg+0x2a>
 8005f62:	4b33      	ldr	r3, [pc, #204]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b43      	cmp	r3, #67	; 0x43
 8005f68:	d109      	bne.n	8005f7e <ParseRecvMsg+0x2a>
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	2b4d      	cmp	r3, #77	; 0x4d
 8005f70:	d105      	bne.n	8005f7e <ParseRecvMsg+0x2a>
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f74:	78db      	ldrb	r3, [r3, #3]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <ParseRecvMsg+0x2a>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <ParseRecvMsg+0x2c>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool terminator_present = msg_parse_buf[RECV_MSG_SIZE-2] == '\r' && msg_parse_buf[RECV_MSG_SIZE-1] == '\n';
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f96:	2b0d      	cmp	r3, #13
 8005f98:	d106      	bne.n	8005fa8 <ParseRecvMsg+0x54>
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <ParseRecvMsg+0xdc>)
 8005f9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005fa0:	2b0a      	cmp	r3, #10
 8005fa2:	d101      	bne.n	8005fa8 <ParseRecvMsg+0x54>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <ParseRecvMsg+0x56>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005fae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (!header_present || !terminator_present)
 8005fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fbe:	f083 0301 	eor.w	r3, r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d12f      	bne.n	8006028 <ParseRecvMsg+0xd4>
 8005fc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fcc:	f083 0301 	eor.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d128      	bne.n	8006028 <ParseRecvMsg+0xd4>
//    for(int i = 0; i < RECV_MSG_SIZE; i++){
//        printf("%02x ", msg_parse_buf[i]);
//    }
//    printf("\n");

    float* pkt_data = (float*)(msg_parse_buf+4);
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <ParseRecvMsg+0xe0>)
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28

    actuator_t act_cmd;
    act_cmd.timestamp_ms = osKernelGetSysTimerCount();
 8005fda:	f001 fe8f 	bl	8007cfc <osKernelGetSysTimerCount>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	603b      	str	r3, [r7, #0]
    act_cmd.left_thruster_power = pkt_data[0];
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	607b      	str	r3, [r7, #4]
    act_cmd.right_thruster_power = pkt_data[1];
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	60bb      	str	r3, [r7, #8]
    act_cmd.left_flap_ang = pkt_data[2];
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60fb      	str	r3, [r7, #12]
    act_cmd.left_aileron_ang = pkt_data[3];
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	613b      	str	r3, [r7, #16]
    act_cmd.right_flap_ang = pkt_data[4];
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	617b      	str	r3, [r7, #20]
    act_cmd.right_aileron_ang = pkt_data[5];
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	61bb      	str	r3, [r7, #24]
    act_cmd.left_elevator_ang = pkt_data[6];
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	61fb      	str	r3, [r7, #28]
    act_cmd.right_elevator_ang = pkt_data[7];
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	623b      	str	r3, [r7, #32]
    act_cmd.rudder_ang = pkt_data[8];
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24

    // printf("Received command: lthrust=%.03f, rthrust=%.03f, left_flap=%.03f, left_aileron=%.03f, right_flap=%.03f, right_aileron=%.03f, left_elev=%f, right_elev=%.03f, rudder=%.03f\n", act_cmd.left_thruster_power, act_cmd.right_thruster_power, act_cmd.left_flap_ang, act_cmd.left_aileron_ang, act_cmd.right_flap_ang, act_cmd.right_aileron_ang, act_cmd.left_elevator_ang, act_cmd.right_elevator_ang, act_cmd.rudder_ang);

    osMessageQueuePut(actCmdsHandle, &act_cmd, 0, 0);
 8006018:	4b07      	ldr	r3, [pc, #28]	; (8006038 <ParseRecvMsg+0xe4>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	4639      	mov	r1, r7
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	f001 ffe5 	bl	8007ff0 <osMessageQueuePut>
 8006026:	e000      	b.n	800602a <ParseRecvMsg+0xd6>
        return; // Packet is invalid
 8006028:	bf00      	nop
}
 800602a:	3730      	adds	r7, #48	; 0x30
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200005e0 	.word	0x200005e0
 8006034:	200005e4 	.word	0x200005e4
 8006038:	20000214 	.word	0x20000214

0800603c <RadioRxCpltCallback>:

bool handling_radio_rx_callback = false;

void RadioRxCpltCallback(){
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
    // printf("In radio receive callback!\n");

    for(int i = 0;i < RADIO_RECV_BUFFER_LEN; i++){
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e05a      	b.n	80060fe <RadioRxCpltCallback+0xc2>
        if (recv_data[i] == 'S' && pos_in_msg == 0){
 8006048:	4a33      	ldr	r2, [pc, #204]	; (8006118 <RadioRxCpltCallback+0xdc>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b53      	cmp	r3, #83	; 0x53
 8006052:	d10f      	bne.n	8006074 <RadioRxCpltCallback+0x38>
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <RadioRxCpltCallback+0xe0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <RadioRxCpltCallback+0x38>
            // Presumed start of message, start copying into message buffer if not already
            msg_parse_buf[pos_in_msg++] = recv_data[i];
 800605c:	4b2f      	ldr	r3, [pc, #188]	; (800611c <RadioRxCpltCallback+0xe0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	492e      	ldr	r1, [pc, #184]	; (800611c <RadioRxCpltCallback+0xe0>)
 8006064:	600a      	str	r2, [r1, #0]
 8006066:	492c      	ldr	r1, [pc, #176]	; (8006118 <RadioRxCpltCallback+0xdc>)
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	440a      	add	r2, r1
 800606c:	7811      	ldrb	r1, [r2, #0]
 800606e:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <RadioRxCpltCallback+0xe4>)
 8006070:	54d1      	strb	r1, [r2, r3]
 8006072:	e041      	b.n	80060f8 <RadioRxCpltCallback+0xbc>
            // printf("Found start of message at idx %i\n", i);
        } else if (recv_data[i] == '\n' && pos_in_msg > 0) {
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <RadioRxCpltCallback+0xdc>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b0a      	cmp	r3, #10
 800607e:	d11c      	bne.n	80060ba <RadioRxCpltCallback+0x7e>
 8006080:	4b26      	ldr	r3, [pc, #152]	; (800611c <RadioRxCpltCallback+0xe0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d018      	beq.n	80060ba <RadioRxCpltCallback+0x7e>
            if (pos_in_msg == RECV_MSG_SIZE-1){
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <RadioRxCpltCallback+0xe0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b29      	cmp	r3, #41	; 0x29
 800608e:	d110      	bne.n	80060b2 <RadioRxCpltCallback+0x76>
                // Proper size message detected
                msg_parse_buf[pos_in_msg++] = recv_data[i];
 8006090:	4b22      	ldr	r3, [pc, #136]	; (800611c <RadioRxCpltCallback+0xe0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	4921      	ldr	r1, [pc, #132]	; (800611c <RadioRxCpltCallback+0xe0>)
 8006098:	600a      	str	r2, [r1, #0]
 800609a:	491f      	ldr	r1, [pc, #124]	; (8006118 <RadioRxCpltCallback+0xdc>)
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	440a      	add	r2, r1
 80060a0:	7811      	ldrb	r1, [r2, #0]
 80060a2:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <RadioRxCpltCallback+0xe4>)
 80060a4:	54d1      	strb	r1, [r2, r3]
                // printf("Found end of message at idx %i\n", i);

                ParseRecvMsg();
 80060a6:	f7ff ff55 	bl	8005f54 <ParseRecvMsg>
                pos_in_msg = 0;
 80060aa:	4b1c      	ldr	r3, [pc, #112]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
            if (pos_in_msg == RECV_MSG_SIZE-1){
 80060b0:	e022      	b.n	80060f8 <RadioRxCpltCallback+0xbc>
            } else{
                // Early end of message detected, throw out data
                pos_in_msg = 0;
 80060b2:	4b1a      	ldr	r3, [pc, #104]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
            if (pos_in_msg == RECV_MSG_SIZE-1){
 80060b8:	e01e      	b.n	80060f8 <RadioRxCpltCallback+0xbc>
                // printf("Early end of message detected at idx %i, throwing out data\n", i);
            }
        } else if (pos_in_msg > 0){
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <RadioRxCpltCallback+0xbc>
            // Only copy characters into buffer if the message has started to be copied
            // into the buffer already (given by pos_in_msg being greater than 0)
            if (pos_in_msg > 0 && pos_in_msg < RECV_MSG_SIZE){
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <RadioRxCpltCallback+0xae>
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b29      	cmp	r3, #41	; 0x29
 80060d0:	d80b      	bhi.n	80060ea <RadioRxCpltCallback+0xae>
                msg_parse_buf[pos_in_msg++] = recv_data[i];
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	4910      	ldr	r1, [pc, #64]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060da:	600a      	str	r2, [r1, #0]
 80060dc:	490e      	ldr	r1, [pc, #56]	; (8006118 <RadioRxCpltCallback+0xdc>)
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	440a      	add	r2, r1
 80060e2:	7811      	ldrb	r1, [r2, #0]
 80060e4:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <RadioRxCpltCallback+0xe4>)
 80060e6:	54d1      	strb	r1, [r2, r3]
 80060e8:	e006      	b.n	80060f8 <RadioRxCpltCallback+0xbc>
            } else if (pos_in_msg == RECV_MSG_SIZE){
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b2a      	cmp	r3, #42	; 0x2a
 80060f0:	d102      	bne.n	80060f8 <RadioRxCpltCallback+0xbc>
                // Reached the end of the expected message and it has not seemed to
                // terminate so clear the buffer and only read the next message
                pos_in_msg = 0;
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <RadioRxCpltCallback+0xe0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
    for(int i = 0;i < RADIO_RECV_BUFFER_LEN; i++){
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3301      	adds	r3, #1
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b7f      	cmp	r3, #127	; 0x7f
 8006102:	dda1      	ble.n	8006048 <RadioRxCpltCallback+0xc>

        }
    }

    // Resets the receive buffer
    memset(recv_data, 0, RADIO_RECV_BUFFER_LEN);
 8006104:	2280      	movs	r2, #128	; 0x80
 8006106:	2100      	movs	r1, #0
 8006108:	4803      	ldr	r0, [pc, #12]	; (8006118 <RadioRxCpltCallback+0xdc>)
 800610a:	f005 fd60 	bl	800bbce <memset>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000560 	.word	0x20000560
 800611c:	2000060c 	.word	0x2000060c
 8006120:	200005e0 	.word	0x200005e0

08006124 <RadioManager>:
/**
 * @brief Facilitates communication with the ground segment via the telemetry radio
 * @param argument: Not used
 * @retval None
 */
void RadioManager(void *argument){
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    // Baud rate is 57600


    for(;;)   {
        HAL_UART_Receive_IT(&huart1, recv_data, RADIO_RECV_BUFFER_LEN); // RECV_MSG_SIZE);
 800612c:	2280      	movs	r2, #128	; 0x80
 800612e:	4904      	ldr	r1, [pc, #16]	; (8006140 <RadioManager+0x1c>)
 8006130:	4804      	ldr	r0, [pc, #16]	; (8006144 <RadioManager+0x20>)
 8006132:	f7fe fd46 	bl	8004bc2 <HAL_UART_Receive_IT>
//            printf("%02x ", test_buf[i]);
//        printf("\n");

        // printf("Radio mngr thread runs silently!\n");

        osDelay(10);
 8006136:	200a      	movs	r0, #10
 8006138:	f001 fecc 	bl	8007ed4 <osDelay>
        HAL_UART_Receive_IT(&huart1, recv_data, RADIO_RECV_BUFFER_LEN); // RECV_MSG_SIZE);
 800613c:	e7f6      	b.n	800612c <RadioManager+0x8>
 800613e:	bf00      	nop
 8006140:	20000560 	.word	0x20000560
 8006144:	2000048c 	.word	0x2000048c

08006148 <delay_us>:

#include "tim.h"
#include "stm32f4xx_hal.h"
#include "time_util.h"

void delay_us(uint16_t us, TIM_HandleTypeDef* tim){
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(tim, 0);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2200      	movs	r2, #0
 800615a:	625a      	str	r2, [r3, #36]	; 0x24
    while(__HAL_TIM_GET_COUNTER(tim) < us);
 800615c:	bf00      	nop
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3f9      	bcc.n	800615e <delay_us+0x16>
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_UART_RxCpltCallback>:

#include "main.h"

#include "usart.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a04      	ldr	r2, [pc, #16]	; (8006194 <HAL_UART_RxCpltCallback+0x1c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d101      	bne.n	800618c <HAL_UART_RxCpltCallback+0x14>
        RadioRxCpltCallback();
 8006188:	f7ff ff58 	bl	800603c <RadioRxCpltCallback>
    }
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	2000048c 	.word	0x2000048c

08006198 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == RNG1_ECHO_Pin){
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d102      	bne.n	80061c2 <HAL_GPIO_EXTI_Callback+0x16>
        Rng1EchoCallback();
 80061bc:	f7ff fd30 	bl	8005c20 <Rng1EchoCallback>
    }
    else if (GPIO_Pin == RNG2_ECHO_Pin){
        Rng2EchoCallback();
    }
}
 80061c0:	e005      	b.n	80061ce <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == RNG2_ECHO_Pin){
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d101      	bne.n	80061ce <HAL_GPIO_EXTI_Callback+0x22>
        Rng2EchoCallback();
 80061ca:	f7ff fda1 	bl	8005d10 <Rng2EchoCallback>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <_out_char+0x1e>
    _putchar(character);
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb f98f 	bl	800152e <_putchar>
  }
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e002      	b.n	800622e <_strnlen_s+0x16>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3301      	adds	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <_strnlen_s+0x28>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	1e5a      	subs	r2, r3, #1
 800623a:	603a      	str	r2, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f3      	bne.n	8006228 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1ad3      	subs	r3, r2, r3
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	4603      	mov	r3, r0
 800625a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b2f      	cmp	r3, #47	; 0x2f
 8006260:	d904      	bls.n	800626c <_is_digit+0x1a>
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b39      	cmp	r3, #57	; 0x39
 8006266:	d801      	bhi.n	800626c <_is_digit+0x1a>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <_is_digit+0x1c>
 800626c:	2300      	movs	r3, #0
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	b2db      	uxtb	r3, r3
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800628c:	e00e      	b.n	80062ac <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4618      	mov	r0, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6011      	str	r1, [r2, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	4403      	add	r3, r0
 80062a8:	3b30      	subs	r3, #48	; 0x30
 80062aa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ffcd 	bl	8006252 <_is_digit>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e7      	bne.n	800628e <_atoi+0xe>
  }
  return i;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d125      	bne.n	8006330 <_out_rev+0x68>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d120      	bne.n	8006330 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e00a      	b.n	800630a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	1c53      	adds	r3, r2, #1
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	68fc      	ldr	r4, [r7, #12]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	2020      	movs	r0, #32
 8006302:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3301      	adds	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	429a      	cmp	r2, r3
 8006310:	d3f0      	bcc.n	80062f4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8006312:	e00d      	b.n	8006330 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	3b01      	subs	r3, #1
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	4413      	add	r3, r2
 8006320:	7818      	ldrb	r0, [r3, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	1c53      	adds	r3, r2, #1
 8006326:	607b      	str	r3, [r7, #4]
 8006328:	68fc      	ldr	r4, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	47a0      	blx	r4
  while (len) {
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ee      	bne.n	8006314 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8006340:	e007      	b.n	8006352 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	1c53      	adds	r3, r2, #1
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	68fc      	ldr	r4, [r7, #12]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	2020      	movs	r0, #32
 8006350:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	429a      	cmp	r2, r3
 800635c:	d8f1      	bhi.n	8006342 <_out_rev+0x7a>
    }
  }

  return idx;
 800635e:	687b      	ldr	r3, [r7, #4]
}
 8006360:	4618      	mov	r0, r3
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	bd90      	pop	{r4, r7, pc}

08006368 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af04      	add	r7, sp, #16
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d136      	bne.n	80063ee <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d018      	beq.n	80063b8 <_ntoa_format+0x50>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d013      	beq.n	80063b8 <_ntoa_format+0x50>
 8006390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <_ntoa_format+0x3a>
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <_ntoa_format+0x50>
      width--;
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	3b01      	subs	r3, #1
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80063a8:	e006      	b.n	80063b8 <_ntoa_format+0x50>
      buf[len++] = '0';
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	61fa      	str	r2, [r7, #28]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4413      	add	r3, r2
 80063b4:	2230      	movs	r2, #48	; 0x30
 80063b6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	429a      	cmp	r2, r3
 80063be:	d20a      	bcs.n	80063d6 <_ntoa_format+0x6e>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b1f      	cmp	r3, #31
 80063c4:	d9f1      	bls.n	80063aa <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80063c6:	e006      	b.n	80063d6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	61fa      	str	r2, [r7, #28]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4413      	add	r3, r2
 80063d2:	2230      	movs	r2, #48	; 0x30
 80063d4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <_ntoa_format+0x86>
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d202      	bcs.n	80063ee <_ntoa_format+0x86>
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b1f      	cmp	r3, #31
 80063ec:	d9ec      	bls.n	80063c8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d058      	beq.n	80064aa <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d116      	bne.n	8006430 <_ntoa_format+0xc8>
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <_ntoa_format+0xc8>
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	429a      	cmp	r2, r3
 800640e:	d003      	beq.n	8006418 <_ntoa_format+0xb0>
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d10b      	bne.n	8006430 <_ntoa_format+0xc8>
      len--;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3b01      	subs	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <_ntoa_format+0xc8>
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2b10      	cmp	r3, #16
 8006428:	d102      	bne.n	8006430 <_ntoa_format+0xc8>
        len--;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3b01      	subs	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	2b10      	cmp	r3, #16
 8006434:	d10f      	bne.n	8006456 <_ntoa_format+0xee>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <_ntoa_format+0xee>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b1f      	cmp	r3, #31
 8006444:	d807      	bhi.n	8006456 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	61fa      	str	r2, [r7, #28]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4413      	add	r3, r2
 8006450:	2278      	movs	r2, #120	; 0x78
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	e01f      	b.n	8006496 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	2b10      	cmp	r3, #16
 800645a:	d10f      	bne.n	800647c <_ntoa_format+0x114>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <_ntoa_format+0x114>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b1f      	cmp	r3, #31
 800646a:	d807      	bhi.n	800647c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4413      	add	r3, r2
 8006476:	2258      	movs	r2, #88	; 0x58
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e00c      	b.n	8006496 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	2b02      	cmp	r3, #2
 8006480:	d109      	bne.n	8006496 <_ntoa_format+0x12e>
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b1f      	cmp	r3, #31
 8006486:	d806      	bhi.n	8006496 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	61fa      	str	r2, [r7, #28]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4413      	add	r3, r2
 8006492:	2262      	movs	r2, #98	; 0x62
 8006494:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b1f      	cmp	r3, #31
 800649a:	d806      	bhi.n	80064aa <_ntoa_format+0x142>
      buf[len++] = '0';
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	61fa      	str	r2, [r7, #28]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4413      	add	r3, r2
 80064a6:	2230      	movs	r2, #48	; 0x30
 80064a8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b1f      	cmp	r3, #31
 80064ae:	d824      	bhi.n	80064fa <_ntoa_format+0x192>
    if (negative) {
 80064b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <_ntoa_format+0x160>
      buf[len++] = '-';
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	222d      	movs	r2, #45	; 0x2d
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e018      	b.n	80064fa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4413      	add	r3, r2
 80064dc:	222b      	movs	r2, #43	; 0x2b
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e00b      	b.n	80064fa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <_ntoa_format+0x192>
      buf[len++] = ' ';
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	61fa      	str	r2, [r7, #28]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4413      	add	r3, r2
 80064f6:	2220      	movs	r2, #32
 80064f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fed9 	bl	80062c8 <_out_rev>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b096      	sub	sp, #88	; 0x58
 8006524:	af08      	add	r7, sp, #32
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8006538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653a:	f023 0310 	bic.w	r3, r3, #16
 800653e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <_ntoa_long+0x30>
 800654a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d032      	beq.n	80065b6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8006550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006554:	fbb3 f2f2 	udiv	r2, r3, r2
 8006558:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800655a:	fb01 f202 	mul.w	r2, r1, r2
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006568:	2b09      	cmp	r3, #9
 800656a:	d804      	bhi.n	8006576 <_ntoa_long+0x56>
 800656c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006570:	3330      	adds	r3, #48	; 0x30
 8006572:	b2da      	uxtb	r2, r3
 8006574:	e00d      	b.n	8006592 <_ntoa_long+0x72>
 8006576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <_ntoa_long+0x64>
 8006580:	2241      	movs	r2, #65	; 0x41
 8006582:	e000      	b.n	8006586 <_ntoa_long+0x66>
 8006584:	2261      	movs	r2, #97	; 0x61
 8006586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800658a:	4413      	add	r3, r2
 800658c:	b2db      	uxtb	r3, r3
 800658e:	3b0a      	subs	r3, #10
 8006590:	b2da      	uxtb	r2, r3
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	1c59      	adds	r1, r3, #1
 8006596:	6379      	str	r1, [r7, #52]	; 0x34
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	443b      	add	r3, r7
 800659c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80065a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80065aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <_ntoa_long+0x96>
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	2b1f      	cmp	r3, #31
 80065b4:	d9cc      	bls.n	8006550 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80065b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b8:	9306      	str	r3, [sp, #24]
 80065ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065bc:	9305      	str	r3, [sp, #20]
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c4:	9303      	str	r3, [sp, #12]
 80065c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fec3 	bl	8006368 <_ntoa_format>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3738      	adds	r7, #56	; 0x38
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b096      	sub	sp, #88	; 0x58
 80065f0:	af08      	add	r7, sp, #32
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80065fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006602:	4313      	orrs	r3, r2
 8006604:	d103      	bne.n	800660e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8006606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800660e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <_ntoa_long_long+0x34>
 8006618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800661c:	4313      	orrs	r3, r2
 800661e:	d037      	beq.n	8006690 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8006620:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006628:	f7fa fb36 	bl	8000c98 <__aeabi_uldivmod>
 800662c:	4613      	mov	r3, r2
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006636:	2b09      	cmp	r3, #9
 8006638:	d804      	bhi.n	8006644 <_ntoa_long_long+0x58>
 800663a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800663e:	3330      	adds	r3, #48	; 0x30
 8006640:	b2da      	uxtb	r2, r3
 8006642:	e00d      	b.n	8006660 <_ntoa_long_long+0x74>
 8006644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <_ntoa_long_long+0x66>
 800664e:	2241      	movs	r2, #65	; 0x41
 8006650:	e000      	b.n	8006654 <_ntoa_long_long+0x68>
 8006652:	2261      	movs	r2, #97	; 0x61
 8006654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006658:	4413      	add	r3, r2
 800665a:	b2db      	uxtb	r3, r3
 800665c:	3b0a      	subs	r3, #10
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	6379      	str	r1, [r7, #52]	; 0x34
 8006666:	3338      	adds	r3, #56	; 0x38
 8006668:	443b      	add	r3, r7
 800666a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800666e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006672:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006676:	f7fa fb0f 	bl	8000c98 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006686:	4313      	orrs	r3, r2
 8006688:	d002      	beq.n	8006690 <_ntoa_long_long+0xa4>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b1f      	cmp	r3, #31
 800668e:	d9c7      	bls.n	8006620 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006694:	9206      	str	r2, [sp, #24]
 8006696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006698:	9205      	str	r2, [sp, #20]
 800669a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800669c:	9204      	str	r2, [sp, #16]
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff fe56 	bl	8006368 <_ntoa_format>
 80066bc:	4603      	mov	r3, r0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3738      	adds	r7, #56	; 0x38
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b09d      	sub	sp, #116	; 0x74
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	6178      	str	r0, [r7, #20]
 80066d0:	6139      	str	r1, [r7, #16]
 80066d2:	60fa      	str	r2, [r7, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
 80066d6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80066ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f2:	f7fa f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10f      	bne.n	800671c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80066fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	2303      	movs	r3, #3
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	4ba7      	ldr	r3, [pc, #668]	; (80069a8 <_ftoa+0x2e0>)
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	6939      	ldr	r1, [r7, #16]
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff fdd8 	bl	80062c8 <_out_rev>
 8006718:	4603      	mov	r3, r0
 800671a:	e222      	b.n	8006b62 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800671c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006720:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006728:	f7fa f9e0 	bl	8000aec <__aeabi_dcmplt>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00f      	beq.n	8006752 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8006732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	2304      	movs	r3, #4
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	4b9b      	ldr	r3, [pc, #620]	; (80069ac <_ftoa+0x2e4>)
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	6939      	ldr	r1, [r7, #16]
 8006748:	6978      	ldr	r0, [r7, #20]
 800674a:	f7ff fdbd 	bl	80062c8 <_out_rev>
 800674e:	4603      	mov	r3, r0
 8006750:	e207      	b.n	8006b62 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8006752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006756:	4b96      	ldr	r3, [pc, #600]	; (80069b0 <_ftoa+0x2e8>)
 8006758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800675c:	f7fa f9e4 	bl	8000b28 <__aeabi_dcmpgt>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01d      	beq.n	80067a2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <_ftoa+0xac>
 8006770:	4b90      	ldr	r3, [pc, #576]	; (80069b4 <_ftoa+0x2ec>)
 8006772:	e000      	b.n	8006776 <_ftoa+0xae>
 8006774:	4b90      	ldr	r3, [pc, #576]	; (80069b8 <_ftoa+0x2f0>)
 8006776:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006778:	f002 0204 	and.w	r2, r2, #4
 800677c:	2a00      	cmp	r2, #0
 800677e:	d001      	beq.n	8006784 <_ftoa+0xbc>
 8006780:	2204      	movs	r2, #4
 8006782:	e000      	b.n	8006786 <_ftoa+0xbe>
 8006784:	2203      	movs	r2, #3
 8006786:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800678c:	9102      	str	r1, [sp, #8]
 800678e:	9201      	str	r2, [sp, #4]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	6939      	ldr	r1, [r7, #16]
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	f7ff fd95 	bl	80062c8 <_out_rev>
 800679e:	4603      	mov	r3, r0
 80067a0:	e1df      	b.n	8006b62 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80067a2:	a37d      	add	r3, pc, #500	; (adr r3, 8006998 <_ftoa+0x2d0>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ac:	f7fa f9bc 	bl	8000b28 <__aeabi_dcmpgt>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <_ftoa+0x102>
 80067b6:	a37a      	add	r3, pc, #488	; (adr r3, 80069a0 <_ftoa+0x2d8>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067c0:	f7fa f994 	bl	8000aec <__aeabi_dcmplt>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00f      	beq.n	80067ea <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80067ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067cc:	9302      	str	r3, [sp, #8]
 80067ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	ed97 0b00 	vldr	d0, [r7]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	6939      	ldr	r1, [r7, #16]
 80067e0:	6978      	ldr	r0, [r7, #20]
 80067e2:	f000 f9c9 	bl	8006b78 <_etoa>
 80067e6:	4603      	mov	r3, r0
 80067e8:	e1bb      	b.n	8006b62 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067fc:	f7fa f976 	bl	8000aec <__aeabi_dcmplt>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <_ftoa+0x15c>
    negative = true;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	f04f 0000 	mov.w	r0, #0
 8006814:	f04f 0100 	mov.w	r1, #0
 8006818:	f7f9 fd3e 	bl	8000298 <__aeabi_dsub>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8006824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800682e:	2306      	movs	r3, #6
 8006830:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8006832:	e00a      	b.n	800684a <_ftoa+0x182>
    buf[len++] = '0';
 8006834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	65fa      	str	r2, [r7, #92]	; 0x5c
 800683a:	3360      	adds	r3, #96	; 0x60
 800683c:	443b      	add	r3, r7
 800683e:	2230      	movs	r2, #48	; 0x30
 8006840:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8006844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006846:	3b01      	subs	r3, #1
 8006848:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800684a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800684c:	2b1f      	cmp	r3, #31
 800684e:	d802      	bhi.n	8006856 <_ftoa+0x18e>
 8006850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006852:	2b09      	cmp	r3, #9
 8006854:	d8ee      	bhi.n	8006834 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8006856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685a:	f7fa f985 	bl	8000b68 <__aeabi_d2iz>
 800685e:	4603      	mov	r3, r0
 8006860:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8006862:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006864:	f7f9 fe66 	bl	8000534 <__aeabi_i2d>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006870:	f7f9 fd12 	bl	8000298 <__aeabi_dsub>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	4a4f      	ldr	r2, [pc, #316]	; (80069bc <_ftoa+0x2f4>)
 800687e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f7f9 febe 	bl	8000608 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8006894:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006898:	f7fa f98e 	bl	8000bb8 <__aeabi_d2uiz>
 800689c:	4603      	mov	r3, r0
 800689e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80068a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068a2:	f7f9 fe37 	bl	8000514 <__aeabi_ui2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068ae:	f7f9 fcf3 	bl	8000298 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <_ftoa+0x2f8>)
 80068c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80068c4:	f7fa f930 	bl	8000b28 <__aeabi_dcmpgt>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <_ftoa+0x234>
    ++frac;
 80068ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d0:	3301      	adds	r3, #1
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80068d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068d6:	f7f9 fe1d 	bl	8000514 <__aeabi_ui2d>
 80068da:	4a38      	ldr	r2, [pc, #224]	; (80069bc <_ftoa+0x2f4>)
 80068dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7fa f915 	bl	8000b14 <__aeabi_dcmpge>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01a      	beq.n	8006926 <_ftoa+0x25e>
      frac = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80068f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f6:	3301      	adds	r3, #1
 80068f8:	657b      	str	r3, [r7, #84]	; 0x54
 80068fa:	e014      	b.n	8006926 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <_ftoa+0x2f8>)
 8006902:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006906:	f7fa f8f1 	bl	8000aec <__aeabi_dcmplt>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8006910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <_ftoa+0x258>
 8006916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8006920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006922:	3301      	adds	r3, #1
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8006926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006928:	2b00      	cmp	r3, #0
 800692a:	d14b      	bne.n	80069c4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800692c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800692e:	f7f9 fe01 	bl	8000534 <__aeabi_i2d>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800693a:	f7f9 fcad 	bl	8000298 <__aeabi_dsub>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8006946:	2301      	movs	r3, #1
 8006948:	461c      	mov	r4, r3
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	4b1c      	ldr	r3, [pc, #112]	; (80069c0 <_ftoa+0x2f8>)
 8006950:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006954:	f7fa f8ca 	bl	8000aec <__aeabi_dcmplt>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <_ftoa+0x29a>
 800695e:	2300      	movs	r3, #0
 8006960:	461c      	mov	r4, r3
 8006962:	b2e3      	uxtb	r3, r4
 8006964:	f083 0301 	eor.w	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <_ftoa+0x2ba>
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <_ftoa+0x2f8>)
 8006974:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006978:	f7fa f8d6 	bl	8000b28 <__aeabi_dcmpgt>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d064      	beq.n	8006a4c <_ftoa+0x384>
 8006982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8081 	beq.w	8006a90 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800698e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006990:	3301      	adds	r3, #1
 8006992:	657b      	str	r3, [r7, #84]	; 0x54
 8006994:	e07c      	b.n	8006a90 <_ftoa+0x3c8>
 8006996:	bf00      	nop
 8006998:	00000000 	.word	0x00000000
 800699c:	41cdcd65 	.word	0x41cdcd65
 80069a0:	00000000 	.word	0x00000000
 80069a4:	c1cdcd65 	.word	0xc1cdcd65
 80069a8:	0800f65c 	.word	0x0800f65c
 80069ac:	0800f660 	.word	0x0800f660
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	0800f668 	.word	0x0800f668
 80069b8:	0800f670 	.word	0x0800f670
 80069bc:	0800f8b8 	.word	0x0800f8b8
 80069c0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80069c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80069c8:	e01f      	b.n	8006a0a <_ftoa+0x342>
      --count;
 80069ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069cc:	3b01      	subs	r3, #1
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80069d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069d2:	4b66      	ldr	r3, [pc, #408]	; (8006b6c <_ftoa+0x4a4>)
 80069d4:	fba3 2301 	umull	r2, r3, r3, r1
 80069d8:	08da      	lsrs	r2, r3, #3
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	1aca      	subs	r2, r1, r3
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	65f9      	str	r1, [r7, #92]	; 0x5c
 80069ec:	3230      	adds	r2, #48	; 0x30
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	3360      	adds	r3, #96	; 0x60
 80069f2:	443b      	add	r3, r7
 80069f4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80069f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fa:	4a5c      	ldr	r2, [pc, #368]	; (8006b6c <_ftoa+0x4a4>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	08db      	lsrs	r3, r3, #3
 8006a02:	653b      	str	r3, [r7, #80]	; 0x50
 8006a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0c:	2b1f      	cmp	r3, #31
 8006a0e:	d9dc      	bls.n	80069ca <_ftoa+0x302>
 8006a10:	e009      	b.n	8006a26 <_ftoa+0x35e>
        break;
 8006a12:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006a14:	e007      	b.n	8006a26 <_ftoa+0x35e>
      buf[len++] = '0';
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a1c:	3360      	adds	r3, #96	; 0x60
 8006a1e:	443b      	add	r3, r7
 8006a20:	2230      	movs	r2, #48	; 0x30
 8006a22:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a28:	2b1f      	cmp	r3, #31
 8006a2a:	d804      	bhi.n	8006a36 <_ftoa+0x36e>
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2e:	1e5a      	subs	r2, r3, #1
 8006a30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ef      	bne.n	8006a16 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a38:	2b1f      	cmp	r3, #31
 8006a3a:	d829      	bhi.n	8006a90 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8006a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a42:	3360      	adds	r3, #96	; 0x60
 8006a44:	443b      	add	r3, r7
 8006a46:	222e      	movs	r2, #46	; 0x2e
 8006a48:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006a4c:	e020      	b.n	8006a90 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8006a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a50:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <_ftoa+0x4a8>)
 8006a52:	fb83 1302 	smull	r1, r3, r3, r2
 8006a56:	1099      	asrs	r1, r3, #2
 8006a58:	17d3      	asrs	r3, r2, #31
 8006a5a:	1ac9      	subs	r1, r1, r3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	1ad1      	subs	r1, r2, r3
 8006a66:	b2ca      	uxtb	r2, r1
 8006a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8006a6e:	3230      	adds	r2, #48	; 0x30
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	3360      	adds	r3, #96	; 0x60
 8006a74:	443b      	add	r3, r7
 8006a76:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7c:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <_ftoa+0x4a8>)
 8006a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8006a82:	1092      	asrs	r2, r2, #2
 8006a84:	17db      	asrs	r3, r3, #31
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	657b      	str	r3, [r7, #84]	; 0x54
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a92:	2b1f      	cmp	r3, #31
 8006a94:	d9db      	bls.n	8006a4e <_ftoa+0x386>
 8006a96:	e000      	b.n	8006a9a <_ftoa+0x3d2>
      break;
 8006a98:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8006a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d123      	bne.n	8006aec <_ftoa+0x424>
 8006aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01e      	beq.n	8006aec <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d014      	beq.n	8006ade <_ftoa+0x416>
 8006ab4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <_ftoa+0x3fe>
 8006abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <_ftoa+0x416>
      width--;
 8006ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006acc:	e007      	b.n	8006ade <_ftoa+0x416>
      buf[len++] = '0';
 8006ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006ad4:	3360      	adds	r3, #96	; 0x60
 8006ad6:	443b      	add	r3, r7
 8006ad8:	2230      	movs	r2, #48	; 0x30
 8006ada:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006ade:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d202      	bcs.n	8006aec <_ftoa+0x424>
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	2b1f      	cmp	r3, #31
 8006aea:	d9f0      	bls.n	8006ace <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aee:	2b1f      	cmp	r3, #31
 8006af0:	d827      	bhi.n	8006b42 <_ftoa+0x47a>
    if (negative) {
 8006af2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <_ftoa+0x444>
      buf[len++] = '-';
 8006afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006b00:	3360      	adds	r3, #96	; 0x60
 8006b02:	443b      	add	r3, r7
 8006b04:	222d      	movs	r2, #45	; 0x2d
 8006b06:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006b0a:	e01a      	b.n	8006b42 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006b1c:	3360      	adds	r3, #96	; 0x60
 8006b1e:	443b      	add	r3, r7
 8006b20:	222b      	movs	r2, #43	; 0x2b
 8006b22:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006b26:	e00c      	b.n	8006b42 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8006b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <_ftoa+0x47a>
      buf[len++] = ' ';
 8006b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006b38:	3360      	adds	r3, #96	; 0x60
 8006b3a:	443b      	add	r3, r7
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	f107 0318 	add.w	r3, r7, #24
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6939      	ldr	r1, [r7, #16]
 8006b5a:	6978      	ldr	r0, [r7, #20]
 8006b5c:	f7ff fbb4 	bl	80062c8 <_out_rev>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3764      	adds	r7, #100	; 0x64
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd90      	pop	{r4, r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	cccccccd 	.word	0xcccccccd
 8006b70:	66666667 	.word	0x66666667
 8006b74:	00000000 	.word	0x00000000

08006b78 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b09f      	sub	sp, #124	; 0x7c
 8006b7e:	af06      	add	r7, sp, #24
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24
 8006b82:	6239      	str	r1, [r7, #32]
 8006b84:	61fa      	str	r2, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8006b8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b94:	f7f9 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d014      	beq.n	8006bc8 <_etoa+0x50>
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba2:	4bc1      	ldr	r3, [pc, #772]	; (8006ea8 <_etoa+0x330>)
 8006ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ba8:	f7f9 ffbe 	bl	8000b28 <__aeabi_dcmpgt>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <_etoa+0x50>
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bbe:	f7f9 ff95 	bl	8000aec <__aeabi_dcmplt>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	ed97 0b04 	vldr	d0, [r7, #16]
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	6a39      	ldr	r1, [r7, #32]
 8006be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be6:	f7ff fd6f 	bl	80066c8 <_ftoa>
 8006bea:	4603      	mov	r3, r0
 8006bec:	e23f      	b.n	800706e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	461e      	mov	r6, r3
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bfe:	f7f9 ff75 	bl	8000aec <__aeabi_dcmplt>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <_etoa+0x94>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	461e      	mov	r6, r3
 8006c0c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8006c10:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <_etoa+0xb4>
    value = -value;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	ed97 7b00 	vldr	d7, [r7]
 8006c28:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8006c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006c38:	2306      	movs	r3, #6
 8006c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8006c3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8006c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	0d0a      	lsrs	r2, r1, #20
 8006c54:	2300      	movs	r3, #0
 8006c56:	4613      	mov	r3, r2
 8006c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8006c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c66:	4690      	mov	r8, r2
 8006c68:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8006c6c:	4644      	mov	r4, r8
 8006c6e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8006c72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c76:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8006c7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006c7c:	f7f9 fc5a 	bl	8000534 <__aeabi_i2d>
 8006c80:	a37d      	add	r3, pc, #500	; (adr r3, 8006e78 <_etoa+0x300>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fcbf 	bl	8000608 <__aeabi_dmul>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	a37b      	add	r3, pc, #492	; (adr r3, 8006e80 <_etoa+0x308>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fb00 	bl	800029c <__adddf3>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	4b7f      	ldr	r3, [pc, #508]	; (8006eac <_etoa+0x334>)
 8006cae:	f7f9 faf3 	bl	8000298 <__aeabi_dsub>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	a373      	add	r3, pc, #460	; (adr r3, 8006e88 <_etoa+0x310>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 fae6 	bl	800029c <__adddf3>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f7f9 ff46 	bl	8000b68 <__aeabi_d2iz>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8006ce0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006ce2:	f7f9 fc27 	bl	8000534 <__aeabi_i2d>
 8006ce6:	a36a      	add	r3, pc, #424	; (adr r3, 8006e90 <_etoa+0x318>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fc8c 	bl	8000608 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	4b6c      	ldr	r3, [pc, #432]	; (8006eb0 <_etoa+0x338>)
 8006cfe:	f7f9 facd 	bl	800029c <__adddf3>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7f9 ff2d 	bl	8000b68 <__aeabi_d2iz>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8006d12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006d14:	f7f9 fc0e 	bl	8000534 <__aeabi_i2d>
 8006d18:	a35f      	add	r3, pc, #380	; (adr r3, 8006e98 <_etoa+0x320>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fc73 	bl	8000608 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	461d      	mov	r5, r3
 8006d2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006d2c:	f7f9 fc02 	bl	8000534 <__aeabi_i2d>
 8006d30:	a35b      	add	r3, pc, #364	; (adr r3, 8006ea0 <_etoa+0x328>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fc67 	bl	8000608 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 faa9 	bl	8000298 <__aeabi_dsub>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8006d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d56:	f7f9 fc57 	bl	8000608 <__aeabi_dmul>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8006d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d64:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006d68:	17da      	asrs	r2, r3, #31
 8006d6a:	469a      	mov	sl, r3
 8006d6c:	4693      	mov	fp, r2
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	f04f 0300 	mov.w	r3, #0
 8006d76:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8006d80:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8006d84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	f7f9 fa86 	bl	800029c <__adddf3>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4690      	mov	r8, r2
 8006d96:	4699      	mov	r9, r3
 8006d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d9c:	f04f 0000 	mov.w	r0, #0
 8006da0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006da4:	f7f9 fa78 	bl	8000298 <__aeabi_dsub>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4692      	mov	sl, r2
 8006dae:	469b      	mov	fp, r3
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <_etoa+0x33c>)
 8006db6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006dba:	f7f9 fd4f 	bl	800085c <__aeabi_ddiv>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <_etoa+0x340>)
 8006dcc:	f7f9 fa66 	bl	800029c <__adddf3>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006dd8:	f7f9 fd40 	bl	800085c <__aeabi_ddiv>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	4b34      	ldr	r3, [pc, #208]	; (8006ebc <_etoa+0x344>)
 8006dea:	f7f9 fa57 	bl	800029c <__adddf3>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006df6:	f7f9 fd31 	bl	800085c <__aeabi_ddiv>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4650      	mov	r0, sl
 8006e00:	4659      	mov	r1, fp
 8006e02:	f7f9 fa4b 	bl	800029c <__adddf3>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fd25 	bl	800085c <__aeabi_ddiv>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <_etoa+0x348>)
 8006e20:	f7f9 fa3c 	bl	800029c <__adddf3>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f7f9 fbec 	bl	8000608 <__aeabi_dmul>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8006e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e40:	f7f9 fe54 	bl	8000aec <__aeabi_dcmplt>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00d      	beq.n	8006e66 <_etoa+0x2ee>
    expval--;
 8006e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8006e50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <_etoa+0x340>)
 8006e5a:	f7f9 fcff 	bl	800085c <__aeabi_ddiv>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	2b63      	cmp	r3, #99	; 0x63
 8006e6a:	dc2b      	bgt.n	8006ec4 <_etoa+0x34c>
 8006e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006e72:	db27      	blt.n	8006ec4 <_etoa+0x34c>
 8006e74:	2304      	movs	r3, #4
 8006e76:	e026      	b.n	8006ec6 <_etoa+0x34e>
 8006e78:	509f79fb 	.word	0x509f79fb
 8006e7c:	3fd34413 	.word	0x3fd34413
 8006e80:	8b60c8b3 	.word	0x8b60c8b3
 8006e84:	3fc68a28 	.word	0x3fc68a28
 8006e88:	636f4361 	.word	0x636f4361
 8006e8c:	3fd287a7 	.word	0x3fd287a7
 8006e90:	0979a371 	.word	0x0979a371
 8006e94:	400a934f 	.word	0x400a934f
 8006e98:	bbb55516 	.word	0xbbb55516
 8006e9c:	40026bb1 	.word	0x40026bb1
 8006ea0:	fefa39ef 	.word	0xfefa39ef
 8006ea4:	3fe62e42 	.word	0x3fe62e42
 8006ea8:	7fefffff 	.word	0x7fefffff
 8006eac:	3ff80000 	.word	0x3ff80000
 8006eb0:	3fe00000 	.word	0x3fe00000
 8006eb4:	402c0000 	.word	0x402c0000
 8006eb8:	40240000 	.word	0x40240000
 8006ebc:	40180000 	.word	0x40180000
 8006ec0:	3ff00000 	.word	0x3ff00000
 8006ec4:	2305      	movs	r3, #5
 8006ec6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8006ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03d      	beq.n	8006f50 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8006ed4:	a368      	add	r3, pc, #416	; (adr r3, 8007078 <_etoa+0x500>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ede:	f7f9 fe19 	bl	8000b14 <__aeabi_dcmpge>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d024      	beq.n	8006f32 <_etoa+0x3ba>
 8006ee8:	a365      	add	r3, pc, #404	; (adr r3, 8007080 <_etoa+0x508>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ef2:	f7f9 fdfb 	bl	8000aec <__aeabi_dcmplt>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8006efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f02:	429a      	cmp	r2, r3
 8006f04:	da07      	bge.n	8006f16 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8006f06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f14:	e002      	b.n	8006f1c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8006f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f30:	e00e      	b.n	8006f50 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8006f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <_etoa+0x3d8>
 8006f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <_etoa+0x3d8>
        --prec;
 8006f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8006f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f54:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8006f56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d904      	bls.n	8006f6a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8006f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	657b      	str	r3, [r7, #84]	; 0x54
 8006f68:	e001      	b.n	8006f6e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8006f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <_etoa+0x40c>
 8006f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8006f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <_etoa+0x426>
    value /= conv.F;
 8006f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f92:	f7f9 fc63 	bl	800085c <__aeabi_ddiv>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8006fa2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <_etoa+0x440>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e003      	b.n	8006fc0 <_etoa+0x448>
 8006fb8:	ed97 7b04 	vldr	d7, [r7, #16]
 8006fbc:	ed87 7b02 	vstr	d7, [r7, #8]
 8006fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	ed97 0b02 	vldr	d0, [r7, #8]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	6a39      	ldr	r1, [r7, #32]
 8006fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe0:	f7ff fb72 	bl	80066c8 <_ftoa>
 8006fe4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8006fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d03f      	beq.n	800706c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8006fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <_etoa+0x484>
 8006ff8:	2045      	movs	r0, #69	; 0x45
 8006ffa:	e000      	b.n	8006ffe <_etoa+0x486>
 8006ffc:	2065      	movs	r0, #101	; 0x65
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	1c53      	adds	r3, r2, #1
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	6a39      	ldr	r1, [r7, #32]
 800700a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800700c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfb8      	it	lt
 8007012:	425b      	neglt	r3, r3
 8007014:	4618      	mov	r0, r3
 8007016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007018:	0fdb      	lsrs	r3, r3, #31
 800701a:	b2db      	uxtb	r3, r3
 800701c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800701e:	3a01      	subs	r2, #1
 8007020:	2105      	movs	r1, #5
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	9204      	str	r2, [sp, #16]
 8007026:	2200      	movs	r2, #0
 8007028:	9203      	str	r2, [sp, #12]
 800702a:	220a      	movs	r2, #10
 800702c:	9202      	str	r2, [sp, #8]
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	9000      	str	r0, [sp, #0]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	6a39      	ldr	r1, [r7, #32]
 8007038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800703a:	f7ff fa71 	bl	8006520 <_ntoa_long>
 800703e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8007040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00f      	beq.n	800706c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800704c:	e007      	b.n	800705e <_etoa+0x4e6>
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	1c53      	adds	r3, r2, #1
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	6a39      	ldr	r1, [r7, #32]
 800705a:	2020      	movs	r0, #32
 800705c:	47a0      	blx	r4
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007068:	429a      	cmp	r2, r3
 800706a:	d8f0      	bhi.n	800704e <_etoa+0x4d6>
    }
  }
  return idx;
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3764      	adds	r7, #100	; 0x64
 8007072:	46bd      	mov	sp, r7
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007078:	eb1c432d 	.word	0xeb1c432d
 800707c:	3f1a36e2 	.word	0x3f1a36e2
 8007080:	00000000 	.word	0x00000000
 8007084:	412e8480 	.word	0x412e8480

08007088 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	b0a3      	sub	sp, #140	; 0x8c
 800708e:	af0a      	add	r7, sp, #40	; 0x28
 8007090:	6178      	str	r0, [r7, #20]
 8007092:	6139      	str	r1, [r7, #16]
 8007094:	60fa      	str	r2, [r7, #12]
 8007096:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f040 84cf 	bne.w	8007a42 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80070a4:	4ba8      	ldr	r3, [pc, #672]	; (8007348 <_vsnprintf+0x2c0>)
 80070a6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80070a8:	f000 bccb 	b.w	8007a42 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b25      	cmp	r3, #37	; 0x25
 80070b2:	d00d      	beq.n	80070d0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	7818      	ldrb	r0, [r3, #0]
 80070b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ba:	1c53      	adds	r3, r2, #1
 80070bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070be:	697c      	ldr	r4, [r7, #20]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6939      	ldr	r1, [r7, #16]
 80070c4:	47a0      	blx	r4
      format++;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
      continue;
 80070cc:	f000 bcb9 	b.w	8007a42 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	3b20      	subs	r3, #32
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d857      	bhi.n	8007194 <_vsnprintf+0x10c>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <_vsnprintf+0x64>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	0800716d 	.word	0x0800716d
 80070f0:	08007195 	.word	0x08007195
 80070f4:	08007195 	.word	0x08007195
 80070f8:	08007181 	.word	0x08007181
 80070fc:	08007195 	.word	0x08007195
 8007100:	08007195 	.word	0x08007195
 8007104:	08007195 	.word	0x08007195
 8007108:	08007195 	.word	0x08007195
 800710c:	08007195 	.word	0x08007195
 8007110:	08007195 	.word	0x08007195
 8007114:	08007195 	.word	0x08007195
 8007118:	08007159 	.word	0x08007159
 800711c:	08007195 	.word	0x08007195
 8007120:	08007145 	.word	0x08007145
 8007124:	08007195 	.word	0x08007195
 8007128:	08007195 	.word	0x08007195
 800712c:	08007131 	.word	0x08007131
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8007130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3301      	adds	r3, #1
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	2301      	movs	r3, #1
 8007140:	653b      	str	r3, [r7, #80]	; 0x50
 8007142:	e02a      	b.n	800719a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8007144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3301      	adds	r3, #1
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	2301      	movs	r3, #1
 8007154:	653b      	str	r3, [r7, #80]	; 0x50
 8007156:	e020      	b.n	800719a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8007158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715a:	f043 0304 	orr.w	r3, r3, #4
 800715e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	3301      	adds	r3, #1
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	2301      	movs	r3, #1
 8007168:	653b      	str	r3, [r7, #80]	; 0x50
 800716a:	e016      	b.n	800719a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800716c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716e:	f043 0308 	orr.w	r3, r3, #8
 8007172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	3301      	adds	r3, #1
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	2301      	movs	r3, #1
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
 800717e:	e00c      	b.n	800719a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8007180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007182:	f043 0310 	orr.w	r3, r3, #16
 8007186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3301      	adds	r3, #1
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	2301      	movs	r3, #1
 8007190:	653b      	str	r3, [r7, #80]	; 0x50
 8007192:	e002      	b.n	800719a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8007194:	2300      	movs	r3, #0
 8007196:	653b      	str	r3, [r7, #80]	; 0x50
 8007198:	bf00      	nop
      }
    } while (n);
 800719a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719c:	2b00      	cmp	r3, #0
 800719e:	d19c      	bne.n	80070da <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff f852 	bl	8006252 <_is_digit>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80071b4:	f107 0308 	add.w	r3, r7, #8
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff f861 	bl	8006280 <_atoi>
 80071be:	65b8      	str	r0, [r7, #88]	; 0x58
 80071c0:	e01a      	b.n	80071f8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b2a      	cmp	r3, #42	; 0x2a
 80071c8:	d116      	bne.n	80071f8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80071ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da07      	bge.n	80071ee <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80071de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e0:	f043 0302 	orr.w	r3, r3, #2
 80071e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	425b      	negs	r3, r3
 80071ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ec:	e001      	b.n	80071f2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3301      	adds	r3, #1
 80071f6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b2e      	cmp	r3, #46	; 0x2e
 8007202:	d127      	bne.n	8007254 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8007204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800720a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3301      	adds	r3, #1
 8007210:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff f81b 	bl	8006252 <_is_digit>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8007222:	f107 0308 	add.w	r3, r7, #8
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff f82a 	bl	8006280 <_atoi>
 800722c:	6578      	str	r0, [r7, #84]	; 0x54
 800722e:	e011      	b.n	8007254 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b2a      	cmp	r3, #42	; 0x2a
 8007236:	d10d      	bne.n	8007254 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8007238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800724c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	3301      	adds	r3, #1
 8007252:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	3b68      	subs	r3, #104	; 0x68
 800725a:	2b12      	cmp	r3, #18
 800725c:	d866      	bhi.n	800732c <_vsnprintf+0x2a4>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <_vsnprintf+0x1dc>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	080072d7 	.word	0x080072d7
 8007268:	0800732d 	.word	0x0800732d
 800726c:	0800730d 	.word	0x0800730d
 8007270:	0800732d 	.word	0x0800732d
 8007274:	080072b1 	.word	0x080072b1
 8007278:	0800732d 	.word	0x0800732d
 800727c:	0800732d 	.word	0x0800732d
 8007280:	0800732d 	.word	0x0800732d
 8007284:	0800732d 	.word	0x0800732d
 8007288:	0800732d 	.word	0x0800732d
 800728c:	0800732d 	.word	0x0800732d
 8007290:	0800732d 	.word	0x0800732d
 8007294:	080072fd 	.word	0x080072fd
 8007298:	0800732d 	.word	0x0800732d
 800729c:	0800732d 	.word	0x0800732d
 80072a0:	0800732d 	.word	0x0800732d
 80072a4:	0800732d 	.word	0x0800732d
 80072a8:	0800732d 	.word	0x0800732d
 80072ac:	0800731d 	.word	0x0800731d
      case 'l' :
        flags |= FLAGS_LONG;
 80072b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b6c      	cmp	r3, #108	; 0x6c
 80072c4:	d134      	bne.n	8007330 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80072c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072cc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80072d4:	e02c      	b.n	8007330 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80072d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b68      	cmp	r3, #104	; 0x68
 80072ea:	d123      	bne.n	8007334 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80072ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80072fa:	e01b      	b.n	8007334 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80072fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007302:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3301      	adds	r3, #1
 8007308:	60bb      	str	r3, [r7, #8]
        break;
 800730a:	e014      	b.n	8007336 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800730c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007312:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3301      	adds	r3, #1
 8007318:	60bb      	str	r3, [r7, #8]
        break;
 800731a:	e00c      	b.n	8007336 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800731c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007322:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3301      	adds	r3, #1
 8007328:	60bb      	str	r3, [r7, #8]
        break;
 800732a:	e004      	b.n	8007336 <_vsnprintf+0x2ae>
      default :
        break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <_vsnprintf+0x2ae>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <_vsnprintf+0x2ae>
        break;
 8007334:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b67      	cmp	r3, #103	; 0x67
 800733c:	f300 80b8 	bgt.w	80074b0 <_vsnprintf+0x428>
 8007340:	2b25      	cmp	r3, #37	; 0x25
 8007342:	da27      	bge.n	8007394 <_vsnprintf+0x30c>
 8007344:	e370      	b.n	8007a28 <_vsnprintf+0x9a0>
 8007346:	bf00      	nop
 8007348:	080061d7 	.word	0x080061d7
 800734c:	3b69      	subs	r3, #105	; 0x69
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	f249 0241 	movw	r2, #36929	; 0x9041
 8007358:	401a      	ands	r2, r3
 800735a:	2a00      	cmp	r2, #0
 800735c:	bf14      	ite	ne
 800735e:	2201      	movne	r2, #1
 8007360:	2200      	moveq	r2, #0
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	2a00      	cmp	r2, #0
 8007366:	f040 80aa 	bne.w	80074be <_vsnprintf+0x436>
 800736a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800736e:	2a00      	cmp	r2, #0
 8007370:	bf14      	ite	ne
 8007372:	2201      	movne	r2, #1
 8007374:	2200      	moveq	r2, #0
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	2a00      	cmp	r2, #0
 800737a:	f040 82fb 	bne.w	8007974 <_vsnprintf+0x8ec>
 800737e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf14      	ite	ne
 8007386:	2301      	movne	r3, #1
 8007388:	2300      	moveq	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 828d 	bne.w	80078ac <_vsnprintf+0x824>
 8007392:	e349      	b.n	8007a28 <_vsnprintf+0x9a0>
 8007394:	3b25      	subs	r3, #37	; 0x25
 8007396:	2b42      	cmp	r3, #66	; 0x42
 8007398:	f200 8346 	bhi.w	8007a28 <_vsnprintf+0x9a0>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <_vsnprintf+0x31c>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	08007a11 	.word	0x08007a11
 80073a8:	08007a29 	.word	0x08007a29
 80073ac:	08007a29 	.word	0x08007a29
 80073b0:	08007a29 	.word	0x08007a29
 80073b4:	08007a29 	.word	0x08007a29
 80073b8:	08007a29 	.word	0x08007a29
 80073bc:	08007a29 	.word	0x08007a29
 80073c0:	08007a29 	.word	0x08007a29
 80073c4:	08007a29 	.word	0x08007a29
 80073c8:	08007a29 	.word	0x08007a29
 80073cc:	08007a29 	.word	0x08007a29
 80073d0:	08007a29 	.word	0x08007a29
 80073d4:	08007a29 	.word	0x08007a29
 80073d8:	08007a29 	.word	0x08007a29
 80073dc:	08007a29 	.word	0x08007a29
 80073e0:	08007a29 	.word	0x08007a29
 80073e4:	08007a29 	.word	0x08007a29
 80073e8:	08007a29 	.word	0x08007a29
 80073ec:	08007a29 	.word	0x08007a29
 80073f0:	08007a29 	.word	0x08007a29
 80073f4:	08007a29 	.word	0x08007a29
 80073f8:	08007a29 	.word	0x08007a29
 80073fc:	08007a29 	.word	0x08007a29
 8007400:	08007a29 	.word	0x08007a29
 8007404:	08007a29 	.word	0x08007a29
 8007408:	08007a29 	.word	0x08007a29
 800740c:	08007a29 	.word	0x08007a29
 8007410:	08007a29 	.word	0x08007a29
 8007414:	08007a29 	.word	0x08007a29
 8007418:	08007a29 	.word	0x08007a29
 800741c:	08007a29 	.word	0x08007a29
 8007420:	08007a29 	.word	0x08007a29
 8007424:	080077c5 	.word	0x080077c5
 8007428:	08007775 	.word	0x08007775
 800742c:	080077c5 	.word	0x080077c5
 8007430:	08007a29 	.word	0x08007a29
 8007434:	08007a29 	.word	0x08007a29
 8007438:	08007a29 	.word	0x08007a29
 800743c:	08007a29 	.word	0x08007a29
 8007440:	08007a29 	.word	0x08007a29
 8007444:	08007a29 	.word	0x08007a29
 8007448:	08007a29 	.word	0x08007a29
 800744c:	08007a29 	.word	0x08007a29
 8007450:	08007a29 	.word	0x08007a29
 8007454:	08007a29 	.word	0x08007a29
 8007458:	08007a29 	.word	0x08007a29
 800745c:	08007a29 	.word	0x08007a29
 8007460:	08007a29 	.word	0x08007a29
 8007464:	08007a29 	.word	0x08007a29
 8007468:	08007a29 	.word	0x08007a29
 800746c:	08007a29 	.word	0x08007a29
 8007470:	080074bf 	.word	0x080074bf
 8007474:	08007a29 	.word	0x08007a29
 8007478:	08007a29 	.word	0x08007a29
 800747c:	08007a29 	.word	0x08007a29
 8007480:	08007a29 	.word	0x08007a29
 8007484:	08007a29 	.word	0x08007a29
 8007488:	08007a29 	.word	0x08007a29
 800748c:	08007a29 	.word	0x08007a29
 8007490:	08007a29 	.word	0x08007a29
 8007494:	08007a29 	.word	0x08007a29
 8007498:	080074bf 	.word	0x080074bf
 800749c:	08007835 	.word	0x08007835
 80074a0:	080074bf 	.word	0x080074bf
 80074a4:	080077c5 	.word	0x080077c5
 80074a8:	08007775 	.word	0x08007775
 80074ac:	080077c5 	.word	0x080077c5
 80074b0:	2b78      	cmp	r3, #120	; 0x78
 80074b2:	f300 82b9 	bgt.w	8007a28 <_vsnprintf+0x9a0>
 80074b6:	2b69      	cmp	r3, #105	; 0x69
 80074b8:	f6bf af48 	bge.w	800734c <_vsnprintf+0x2c4>
 80074bc:	e2b4      	b.n	8007a28 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b78      	cmp	r3, #120	; 0x78
 80074c4:	d003      	beq.n	80074ce <_vsnprintf+0x446>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b58      	cmp	r3, #88	; 0x58
 80074cc:	d102      	bne.n	80074d4 <_vsnprintf+0x44c>
          base = 16U;
 80074ce:	2310      	movs	r3, #16
 80074d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074d2:	e013      	b.n	80074fc <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b6f      	cmp	r3, #111	; 0x6f
 80074da:	d102      	bne.n	80074e2 <_vsnprintf+0x45a>
          base =  8U;
 80074dc:	2308      	movs	r3, #8
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e0:	e00c      	b.n	80074fc <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b62      	cmp	r3, #98	; 0x62
 80074e8:	d102      	bne.n	80074f0 <_vsnprintf+0x468>
          base =  2U;
 80074ea:	2302      	movs	r3, #2
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ee:	e005      	b.n	80074fc <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80074f0:	230a      	movs	r3, #10
 80074f2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80074f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b58      	cmp	r3, #88	; 0x58
 8007502:	d103      	bne.n	800750c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8007504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007506:	f043 0320 	orr.w	r3, r3, #32
 800750a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b69      	cmp	r3, #105	; 0x69
 8007512:	d007      	beq.n	8007524 <_vsnprintf+0x49c>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b64      	cmp	r3, #100	; 0x64
 800751a:	d003      	beq.n	8007524 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800751c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751e:	f023 030c 	bic.w	r3, r3, #12
 8007522:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8007524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 800752e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b69      	cmp	r3, #105	; 0x69
 800753c:	d004      	beq.n	8007548 <_vsnprintf+0x4c0>
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	f040 8098 	bne.w	8007678 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8007548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754e:	2b00      	cmp	r3, #0
 8007550:	d031      	beq.n	80075b6 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8007552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007556:	3307      	adds	r3, #7
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	f103 0208 	add.w	r2, r3, #8
 8007560:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800756c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da06      	bge.n	8007582 <_vsnprintf+0x4fa>
 8007574:	2100      	movs	r1, #0
 8007576:	f1d2 0800 	rsbs	r8, r2, #0
 800757a:	eb61 0903 	sbc.w	r9, r1, r3
 800757e:	4642      	mov	r2, r8
 8007580:	464b      	mov	r3, r9
 8007582:	69f9      	ldr	r1, [r7, #28]
 8007584:	0fc9      	lsrs	r1, r1, #31
 8007586:	b2c9      	uxtb	r1, r1
 8007588:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800758a:	2400      	movs	r4, #0
 800758c:	4682      	mov	sl, r0
 800758e:	46a3      	mov	fp, r4
 8007590:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007592:	9008      	str	r0, [sp, #32]
 8007594:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007596:	9007      	str	r0, [sp, #28]
 8007598:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800759a:	9006      	str	r0, [sp, #24]
 800759c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80075a0:	9102      	str	r1, [sp, #8]
 80075a2:	e9cd 2300 	strd	r2, r3, [sp]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075aa:	6939      	ldr	r1, [r7, #16]
 80075ac:	6978      	ldr	r0, [r7, #20]
 80075ae:	f7ff f81d 	bl	80065ec <_ntoa_long_long>
 80075b2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80075b4:	e0da      	b.n	800776c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80075b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80075c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075c4:	1d1a      	adds	r2, r3, #4
 80075c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfb8      	it	lt
 80075d4:	425b      	neglt	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	0fdb      	lsrs	r3, r3, #31
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075e0:	9205      	str	r2, [sp, #20]
 80075e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e4:	9204      	str	r2, [sp, #16]
 80075e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9100      	str	r1, [sp, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075f6:	6939      	ldr	r1, [r7, #16]
 80075f8:	6978      	ldr	r0, [r7, #20]
 80075fa:	f7fe ff91 	bl	8006520 <_ntoa_long>
 80075fe:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007600:	e0b4      	b.n	800776c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8007602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <_vsnprintf+0x594>
 800760c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e012      	b.n	8007642 <_vsnprintf+0x5ba>
 800761c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <_vsnprintf+0x5ae>
 8007626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	b21b      	sxth	r3, r3
 8007634:	e005      	b.n	8007642 <_vsnprintf+0x5ba>
 8007636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800763a:	1d1a      	adds	r2, r3, #4
 800763c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfb8      	it	lt
 800764a:	425b      	neglt	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	0fdb      	lsrs	r3, r3, #31
 8007652:	b2db      	uxtb	r3, r3
 8007654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007656:	9205      	str	r2, [sp, #20]
 8007658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800765a:	9204      	str	r2, [sp, #16]
 800765c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800765e:	9203      	str	r2, [sp, #12]
 8007660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007662:	9202      	str	r2, [sp, #8]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	9100      	str	r1, [sp, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800766c:	6939      	ldr	r1, [r7, #16]
 800766e:	6978      	ldr	r0, [r7, #20]
 8007670:	f7fe ff56 	bl	8006520 <_ntoa_long>
 8007674:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007676:	e079      	b.n	800776c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8007678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800767e:	2b00      	cmp	r3, #0
 8007680:	d022      	beq.n	80076c8 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8007682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007686:	3307      	adds	r3, #7
 8007688:	f023 0307 	bic.w	r3, r3, #7
 800768c:	f103 0208 	add.w	r2, r3, #8
 8007690:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800769a:	2000      	movs	r0, #0
 800769c:	460d      	mov	r5, r1
 800769e:	4606      	mov	r6, r0
 80076a0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80076a2:	9108      	str	r1, [sp, #32]
 80076a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076a6:	9107      	str	r1, [sp, #28]
 80076a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076aa:	9106      	str	r1, [sp, #24]
 80076ac:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80076b0:	2100      	movs	r1, #0
 80076b2:	9102      	str	r1, [sp, #8]
 80076b4:	e9cd 2300 	strd	r2, r3, [sp]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076bc:	6939      	ldr	r1, [r7, #16]
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f7fe ff94 	bl	80065ec <_ntoa_long_long>
 80076c4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80076c6:	e051      	b.n	800776c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80076c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d018      	beq.n	8007704 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80076d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d6:	1d1a      	adds	r2, r3, #4
 80076d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076e0:	9205      	str	r2, [sp, #20]
 80076e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076e4:	9204      	str	r2, [sp, #16]
 80076e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076e8:	9203      	str	r2, [sp, #12]
 80076ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ec:	9202      	str	r2, [sp, #8]
 80076ee:	2200      	movs	r2, #0
 80076f0:	9201      	str	r2, [sp, #4]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076f8:	6939      	ldr	r1, [r7, #16]
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f7fe ff10 	bl	8006520 <_ntoa_long>
 8007700:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007702:	e033      	b.n	800776c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8007704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <_vsnprintf+0x696>
 800770e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	e012      	b.n	8007744 <_vsnprintf+0x6bc>
 800771e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <_vsnprintf+0x6b0>
 8007728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	e005      	b.n	8007744 <_vsnprintf+0x6bc>
 8007738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800773c:	1d1a      	adds	r2, r3, #4
 800773e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8007746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007754:	9302      	str	r3, [sp, #8]
 8007756:	2300      	movs	r3, #0
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007762:	6939      	ldr	r1, [r7, #16]
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f7fe fedb 	bl	8006520 <_ntoa_long>
 800776a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
        break;
 8007772:	e166      	b.n	8007a42 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b46      	cmp	r3, #70	; 0x46
 800777a:	d103      	bne.n	8007784 <_vsnprintf+0x6fc>
 800777c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777e:	f043 0320 	orr.w	r3, r3, #32
 8007782:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8007784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	f103 0208 	add.w	r2, r3, #8
 8007792:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007796:	ed93 7b00 	vldr	d7, [r3]
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	9302      	str	r3, [sp, #8]
 800779e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	eeb0 0a47 	vmov.f32	s0, s14
 80077aa:	eef0 0a67 	vmov.f32	s1, s15
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b2:	6939      	ldr	r1, [r7, #16]
 80077b4:	6978      	ldr	r0, [r7, #20]
 80077b6:	f7fe ff87 	bl	80066c8 <_ftoa>
 80077ba:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3301      	adds	r3, #1
 80077c0:	60bb      	str	r3, [r7, #8]
        break;
 80077c2:	e13e      	b.n	8007a42 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b67      	cmp	r3, #103	; 0x67
 80077ca:	d003      	beq.n	80077d4 <_vsnprintf+0x74c>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b47      	cmp	r3, #71	; 0x47
 80077d2:	d103      	bne.n	80077dc <_vsnprintf+0x754>
 80077d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077da:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b45      	cmp	r3, #69	; 0x45
 80077e2:	d003      	beq.n	80077ec <_vsnprintf+0x764>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b47      	cmp	r3, #71	; 0x47
 80077ea:	d103      	bne.n	80077f4 <_vsnprintf+0x76c>
 80077ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ee:	f043 0320 	orr.w	r3, r3, #32
 80077f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80077f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077f8:	3307      	adds	r3, #7
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	f103 0208 	add.w	r2, r3, #8
 8007802:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007806:	ed93 7b00 	vldr	d7, [r3]
 800780a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800780c:	9302      	str	r3, [sp, #8]
 800780e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	eeb0 0a47 	vmov.f32	s0, s14
 800781a:	eef0 0a67 	vmov.f32	s1, s15
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007822:	6939      	ldr	r1, [r7, #16]
 8007824:	6978      	ldr	r0, [r7, #20]
 8007826:	f7ff f9a7 	bl	8006b78 <_etoa>
 800782a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3301      	adds	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
        break;
 8007832:	e106      	b.n	8007a42 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8007834:	2301      	movs	r3, #1
 8007836:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8007838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10e      	bne.n	8007860 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8007842:	e007      	b.n	8007854 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8007844:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007846:	1c53      	adds	r3, r2, #1
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784a:	697c      	ldr	r4, [r7, #20]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6939      	ldr	r1, [r7, #16]
 8007850:	2020      	movs	r0, #32
 8007852:	47a0      	blx	r4
          while (l++ < width) {
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	647a      	str	r2, [r7, #68]	; 0x44
 800785a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800785c:	429a      	cmp	r2, r3
 800785e:	d8f1      	bhi.n	8007844 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8007860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007864:	1d1a      	adds	r2, r3, #4
 8007866:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	b2d8      	uxtb	r0, r3
 800786e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007870:	1c53      	adds	r3, r2, #1
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007874:	697c      	ldr	r4, [r7, #20]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6939      	ldr	r1, [r7, #16]
 800787a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800787c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <_vsnprintf+0x81c>
          while (l++ < width) {
 8007886:	e007      	b.n	8007898 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8007888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800788a:	1c53      	adds	r3, r2, #1
 800788c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800788e:	697c      	ldr	r4, [r7, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6939      	ldr	r1, [r7, #16]
 8007894:	2020      	movs	r0, #32
 8007896:	47a0      	blx	r4
          while (l++ < width) {
 8007898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	647a      	str	r2, [r7, #68]	; 0x44
 800789e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d8f1      	bhi.n	8007888 <_vsnprintf+0x800>
          }
        }
        format++;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60bb      	str	r3, [r7, #8]
        break;
 80078aa:	e0ca      	b.n	8007a42 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80078ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078b0:	1d1a      	adds	r2, r3, #4
 80078b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80078ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <_vsnprintf+0x83c>
 80078c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c2:	e001      	b.n	80078c8 <_vsnprintf+0x840>
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078c8:	4619      	mov	r1, r3
 80078ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80078cc:	f7fe fca4 	bl	8006218 <_strnlen_s>
 80078d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80078d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80078dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bf28      	it	cs
 80078e4:	4613      	movcs	r3, r2
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80078e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11a      	bne.n	8007928 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80078f2:	e007      	b.n	8007904 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80078f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078f6:	1c53      	adds	r3, r2, #1
 80078f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078fa:	697c      	ldr	r4, [r7, #20]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6939      	ldr	r1, [r7, #16]
 8007900:	2020      	movs	r0, #32
 8007902:	47a0      	blx	r4
          while (l++ < width) {
 8007904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800790a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800790c:	429a      	cmp	r2, r3
 800790e:	d8f1      	bhi.n	80078f4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007910:	e00a      	b.n	8007928 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8007912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	643a      	str	r2, [r7, #64]	; 0x40
 8007918:	7818      	ldrb	r0, [r3, #0]
 800791a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800791c:	1c53      	adds	r3, r2, #1
 800791e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007920:	697c      	ldr	r4, [r7, #20]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6939      	ldr	r1, [r7, #16]
 8007926:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <_vsnprintf+0x8bc>
 8007930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0eb      	beq.n	8007912 <_vsnprintf+0x88a>
 800793a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	657a      	str	r2, [r7, #84]	; 0x54
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8007944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <_vsnprintf+0x8e4>
          while (l++ < width) {
 800794e:	e007      	b.n	8007960 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8007950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007952:	1c53      	adds	r3, r2, #1
 8007954:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007956:	697c      	ldr	r4, [r7, #20]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6939      	ldr	r1, [r7, #16]
 800795c:	2020      	movs	r0, #32
 800795e:	47a0      	blx	r4
          while (l++ < width) {
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007968:	429a      	cmp	r2, r3
 800796a:	d8f1      	bhi.n	8007950 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	3301      	adds	r3, #1
 8007970:	60bb      	str	r3, [r7, #8]
        break;
 8007972:	e066      	b.n	8007a42 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8007974:	2308      	movs	r3, #8
 8007976:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8007978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8007980:	2300      	movs	r3, #0
 8007982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8007986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800798a:	2b00      	cmp	r3, #0
 800798c:	d023      	beq.n	80079d6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800798e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	603a      	str	r2, [r7, #0]
 80079a0:	607b      	str	r3, [r7, #4]
 80079a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a8:	9307      	str	r3, [sp, #28]
 80079aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	f04f 0210 	mov.w	r2, #16
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9302      	str	r3, [sp, #8]
 80079be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80079c2:	e9cd 3400 	strd	r3, r4, [sp]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ca:	6939      	ldr	r1, [r7, #16]
 80079cc:	6978      	ldr	r0, [r7, #20]
 80079ce:	f7fe fe0d 	bl	80065ec <_ntoa_long_long>
 80079d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80079d4:	e018      	b.n	8007a08 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80079d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e6:	9305      	str	r3, [sp, #20]
 80079e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	2310      	movs	r3, #16
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	2300      	movs	r3, #0
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	9200      	str	r2, [sp, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079fe:	6939      	ldr	r1, [r7, #16]
 8007a00:	6978      	ldr	r0, [r7, #20]
 8007a02:	f7fe fd8d 	bl	8006520 <_ntoa_long>
 8007a06:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60bb      	str	r3, [r7, #8]
        break;
 8007a0e:	e018      	b.n	8007a42 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8007a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a12:	1c53      	adds	r3, r2, #1
 8007a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a16:	697c      	ldr	r4, [r7, #20]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6939      	ldr	r1, [r7, #16]
 8007a1c:	2025      	movs	r0, #37	; 0x25
 8007a1e:	47a0      	blx	r4
        format++;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60bb      	str	r3, [r7, #8]
        break;
 8007a26:	e00c      	b.n	8007a42 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	7818      	ldrb	r0, [r3, #0]
 8007a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a2e:	1c53      	adds	r3, r2, #1
 8007a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a32:	697c      	ldr	r4, [r7, #20]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6939      	ldr	r1, [r7, #16]
 8007a38:	47a0      	blx	r4
        format++;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	60bb      	str	r3, [r7, #8]
        break;
 8007a40:	bf00      	nop
  while (*format)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f47f ab30 	bne.w	80070ac <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8007a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d302      	bcc.n	8007a5a <_vsnprintf+0x9d2>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	e000      	b.n	8007a5c <_vsnprintf+0x9d4>
 8007a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a5c:	697c      	ldr	r4, [r7, #20]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6939      	ldr	r1, [r7, #16]
 8007a62:	2000      	movs	r0, #0
 8007a64:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8007a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3764      	adds	r7, #100	; 0x64
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	bf00      	nop

08007a74 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8007a74:	b40f      	push	{r0, r1, r2, r3}
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8007a7c:	f107 031c 	add.w	r3, r7, #28
 8007a80:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8007a82:	1d39      	adds	r1, r7, #4
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a8e:	4806      	ldr	r0, [pc, #24]	; (8007aa8 <printf_+0x34>)
 8007a90:	f7ff fafa 	bl	8007088 <_vsnprintf>
 8007a94:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aa2:	b004      	add	sp, #16
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	080061f3 	.word	0x080061f3

08007aac <__NVIC_SetPriority>:
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db0a      	blt.n	8007ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	490c      	ldr	r1, [pc, #48]	; (8007af8 <__NVIC_SetPriority+0x4c>)
 8007ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aca:	0112      	lsls	r2, r2, #4
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	440b      	add	r3, r1
 8007ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ad4:	e00a      	b.n	8007aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4908      	ldr	r1, [pc, #32]	; (8007afc <__NVIC_SetPriority+0x50>)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	3b04      	subs	r3, #4
 8007ae4:	0112      	lsls	r2, r2, #4
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	440b      	add	r3, r1
 8007aea:	761a      	strb	r2, [r3, #24]
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	e000e100 	.word	0xe000e100
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <SysTick_Handler+0x1c>)
 8007b06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b08:	f002 f874 	bl	8009bf4 <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d001      	beq.n	8007b16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b12:	f002 fe59 	bl	800a7c8 <xPortSysTickHandler>
  }
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	e000e010 	.word	0xe000e010

08007b20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b24:	2100      	movs	r1, #0
 8007b26:	f06f 0004 	mvn.w	r0, #4
 8007b2a:	f7ff ffbf 	bl	8007aac <__NVIC_SetPriority>
#endif
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3a:	f3ef 8305 	mrs	r3, IPSR
 8007b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b46:	f06f 0305 	mvn.w	r3, #5
 8007b4a:	607b      	str	r3, [r7, #4]
 8007b4c:	e00c      	b.n	8007b68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <osKernelInitialize+0x44>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <osKernelInitialize+0x44>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	e002      	b.n	8007b68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b68:	687b      	ldr	r3, [r7, #4]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000610 	.word	0x20000610

08007b7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b82:	f3ef 8305 	mrs	r3, IPSR
 8007b86:	603b      	str	r3, [r7, #0]
  return(result);
 8007b88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b8e:	f06f 0305 	mvn.w	r3, #5
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e010      	b.n	8007bb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <osKernelStart+0x48>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d109      	bne.n	8007bb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b9e:	f7ff ffbf 	bl	8007b20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <osKernelStart+0x48>)
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ba8:	f001 fbb6 	bl	8009318 <vTaskStartScheduler>
      stat = osOK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	607b      	str	r3, [r7, #4]
 8007bb0:	e002      	b.n	8007bb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb8:	687b      	ldr	r3, [r7, #4]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000610 	.word	0x20000610

08007bc8 <osKernelLock>:

int32_t osKernelLock (void) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bce:	f3ef 8305 	mrs	r3, IPSR
 8007bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd4:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 8007bda:	f06f 0305 	mvn.w	r3, #5
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e013      	b.n	8007c0a <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007be2:	f002 f807 	bl	8009bf4 <xTaskGetSchedulerState>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <osKernelLock+0x2a>
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d003      	beq.n	8007bf8 <osKernelLock+0x30>
 8007bf0:	e007      	b.n	8007c02 <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	607b      	str	r3, [r7, #4]
        break;
 8007bf6:	e008      	b.n	8007c0a <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8007bf8:	f001 fbfe 	bl	80093f8 <vTaskSuspendAll>
        lock = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	607b      	str	r3, [r7, #4]
        break;
 8007c00:	e003      	b.n	8007c0a <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c06:	607b      	str	r3, [r7, #4]
        break;
 8007c08:	bf00      	nop
    }
  }

  return (lock);
 8007c0a:	687b      	ldr	r3, [r7, #4]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c1a:	f3ef 8305 	mrs	r3, IPSR
 8007c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c20:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 8007c26:	f06f 0305 	mvn.w	r3, #5
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	e01f      	b.n	8007c6e <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007c2e:	f001 ffe1 	bl	8009bf4 <xTaskGetSchedulerState>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <osKernelUnlock+0x2a>
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d010      	beq.n	8007c5e <osKernelUnlock+0x4a>
 8007c3c:	e012      	b.n	8007c64 <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 8007c42:	f001 fbe7 	bl	8009414 <xTaskResumeAll>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d00f      	beq.n	8007c6c <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8007c4c:	f001 ffd2 	bl	8009bf4 <xTaskGetSchedulerState>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c5a:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 8007c5c:	e006      	b.n	8007c6c <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
        break;
 8007c62:	e004      	b.n	8007c6e <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c68:	607b      	str	r3, [r7, #4]
        break;
 8007c6a:	e000      	b.n	8007c6e <osKernelUnlock+0x5a>
        break;
 8007c6c:	bf00      	nop
    }
  }

  return (lock);
 8007c6e:	687b      	ldr	r3, [r7, #4]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7e:	f3ef 8305 	mrs	r3, IPSR
 8007c82:	603b      	str	r3, [r7, #0]
  return(result);
 8007c84:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007c8a:	f001 fc71 	bl	8009570 <xTaskGetTickCountFromISR>
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	e002      	b.n	8007c98 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007c92:	f001 fc5d 	bl	8009550 <xTaskGetTickCount>
 8007c96:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007c98:	687b      	ldr	r3, [r7, #4]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <OS_Tick_GetCount+0x20>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <OS_Tick_GetCount+0x20>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	1ad3      	subs	r3, r2, r3
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	e000e010 	.word	0xe000e010

08007cc8 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <OS_Tick_GetOverflow+0x18>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	f003 0301 	and.w	r3, r3, #1
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	e000e010 	.word	0xe000e010

08007ce4 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <OS_Tick_GetInterval+0x14>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	3301      	adds	r3, #1
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	e000e010 	.word	0xe000e010

08007cfc <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d02:	f3ef 8310 	mrs	r3, PRIMASK
 8007d06:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d08:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d12:	607b      	str	r3, [r7, #4]
  return(result);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <osKernelGetSysTimerCount+0x22>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <osKernelGetSysTimerCount+0x24>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d22:	b672      	cpsid	i
}
 8007d24:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8007d26:	f001 fc13 	bl	8009550 <xTaskGetTickCount>
 8007d2a:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8007d2c:	f7ff ffba 	bl	8007ca4 <OS_Tick_GetCount>
 8007d30:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8007d32:	f7ff ffc9 	bl	8007cc8 <OS_Tick_GetOverflow>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8007d3c:	f7ff ffb2 	bl	8007ca4 <OS_Tick_GetCount>
 8007d40:	6138      	str	r0, [r7, #16]
    ticks++;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	3301      	adds	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8007d48:	f7ff ffcc 	bl	8007ce4 <OS_Tick_GetInterval>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d60:	b662      	cpsie	i
}
 8007d62:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8007d64:	693b      	ldr	r3, [r7, #16]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b08e      	sub	sp, #56	; 0x38
 8007d72:	af04      	add	r7, sp, #16
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	617b      	str	r3, [r7, #20]
  return(result);
 8007d84:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d17e      	bne.n	8007e88 <osThreadNew+0x11a>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d07b      	beq.n	8007e88 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d94:	2318      	movs	r3, #24
 8007d96:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007da0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d045      	beq.n	8007e34 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <osThreadNew+0x48>
        name = attr->name;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <osThreadNew+0x6e>
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b38      	cmp	r3, #56	; 0x38
 8007dce:	d805      	bhi.n	8007ddc <osThreadNew+0x6e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <osThreadNew+0x72>
        return (NULL);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e054      	b.n	8007e8a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	089b      	lsrs	r3, r3, #2
 8007dee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <osThreadNew+0xa8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2ba7      	cmp	r3, #167	; 0xa7
 8007dfe:	d90a      	bls.n	8007e16 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <osThreadNew+0xa8>
        mem = 1;
 8007e10:	2301      	movs	r3, #1
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e010      	b.n	8007e38 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <osThreadNew+0xca>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <osThreadNew+0xca>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <osThreadNew+0xca>
          mem = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	e001      	b.n	8007e38 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d110      	bne.n	8007e60 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e46:	9202      	str	r2, [sp, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f001 f873 	bl	8008f40 <xTaskCreateStatic>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e013      	b.n	8007e88 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f107 0310 	add.w	r3, r7, #16
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f001 f8be 	bl	8008ffa <xTaskCreate>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <osThreadNew+0x11a>
            hTask = NULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e88:	693b      	ldr	r3, [r7, #16]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9a:	f3ef 8305 	mrs	r3, IPSR
 8007e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osThreadYield+0x1a>
    stat = osErrorISR;
 8007ea6:	f06f 0305 	mvn.w	r3, #5
 8007eaa:	607b      	str	r3, [r7, #4]
 8007eac:	e009      	b.n	8007ec2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <osThreadYield+0x3c>)
 8007eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8007ec2:	687b      	ldr	r3, [r7, #4]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	e000ed04 	.word	0xe000ed04

08007ed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007edc:	f3ef 8305 	mrs	r3, IPSR
 8007ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <osDelay+0x1c>
    stat = osErrorISR;
 8007ee8:	f06f 0305 	mvn.w	r3, #5
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e007      	b.n	8007f00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 f9d8 	bl	80092b0 <vTaskDelay>
    }
  }

  return (stat);
 8007f00:	68fb      	ldr	r3, [r7, #12]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b08a      	sub	sp, #40	; 0x28
 8007f0e:	af02      	add	r7, sp, #8
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1a:	f3ef 8305 	mrs	r3, IPSR
 8007f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8007f20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d15f      	bne.n	8007fe6 <osMessageQueueNew+0xdc>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05c      	beq.n	8007fe6 <osMessageQueueNew+0xdc>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d059      	beq.n	8007fe6 <osMessageQueueNew+0xdc>
    mem = -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d029      	beq.n	8007f92 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d012      	beq.n	8007f6c <osMessageQueueNew+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	2b4f      	cmp	r3, #79	; 0x4f
 8007f4c:	d90e      	bls.n	8007f6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695a      	ldr	r2, [r3, #20]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	fb01 f303 	mul.w	r3, r1, r3
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d302      	bcc.n	8007f6c <osMessageQueueNew+0x62>
        mem = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	e014      	b.n	8007f96 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d110      	bne.n	8007f96 <osMessageQueueNew+0x8c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d108      	bne.n	8007f96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <osMessageQueueNew+0x8c>
          mem = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	e001      	b.n	8007f96 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10b      	bne.n	8007fb4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	9100      	str	r1, [sp, #0]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fa4e 	bl	800844c <xQueueGenericCreateStatic>
 8007fb0:	61f8      	str	r0, [r7, #28]
 8007fb2:	e008      	b.n	8007fc6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fabc 	bl	800853c <xQueueGenericCreate>
 8007fc4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <osMessageQueueNew+0xd0>
        name = attr->name;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e001      	b.n	8007fde <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	69f8      	ldr	r0, [r7, #28]
 8007fe2:	f000 ff4f 	bl	8008e84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007fe6:	69fb      	ldr	r3, [r7, #28]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008008:	f3ef 8305 	mrs	r3, IPSR
 800800c:	617b      	str	r3, [r7, #20]
  return(result);
 800800e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008010:	2b00      	cmp	r3, #0
 8008012:	d028      	beq.n	8008066 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <osMessageQueuePut+0x36>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <osMessageQueuePut+0x36>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008026:	f06f 0303 	mvn.w	r3, #3
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	e038      	b.n	80080a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008032:	f107 0210 	add.w	r2, r7, #16
 8008036:	2300      	movs	r3, #0
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	69b8      	ldr	r0, [r7, #24]
 800803c:	f000 fbda 	bl	80087f4 <xQueueGenericSendFromISR>
 8008040:	4603      	mov	r3, r0
 8008042:	2b01      	cmp	r3, #1
 8008044:	d003      	beq.n	800804e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008046:	f06f 0302 	mvn.w	r3, #2
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e028      	b.n	80080a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d025      	beq.n	80080a0 <osMessageQueuePut+0xb0>
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <osMessageQueuePut+0xbc>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	e01c      	b.n	80080a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <osMessageQueuePut+0x82>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008072:	f06f 0303 	mvn.w	r3, #3
 8008076:	61fb      	str	r3, [r7, #28]
 8008078:	e012      	b.n	80080a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800807a:	2300      	movs	r3, #0
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	69b8      	ldr	r0, [r7, #24]
 8008082:	f000 fab9 	bl	80085f8 <xQueueGenericSend>
 8008086:	4603      	mov	r3, r0
 8008088:	2b01      	cmp	r3, #1
 800808a:	d009      	beq.n	80080a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008092:	f06f 0301 	mvn.w	r3, #1
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	e002      	b.n	80080a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800809a:	f06f 0302 	mvn.w	r3, #2
 800809e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80080a0:	69fb      	ldr	r3, [r7, #28]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c6:	f3ef 8305 	mrs	r3, IPSR
 80080ca:	617b      	str	r3, [r7, #20]
  return(result);
 80080cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d028      	beq.n	8008124 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <osMessageQueueGet+0x34>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <osMessageQueueGet+0x34>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80080e4:	f06f 0303 	mvn.w	r3, #3
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e037      	b.n	800815c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80080f0:	f107 0310 	add.w	r3, r7, #16
 80080f4:	461a      	mov	r2, r3
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	69b8      	ldr	r0, [r7, #24]
 80080fa:	f000 fcf7 	bl	8008aec <xQueueReceiveFromISR>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b01      	cmp	r3, #1
 8008102:	d003      	beq.n	800810c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008104:	f06f 0302 	mvn.w	r3, #2
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	e027      	b.n	800815c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d024      	beq.n	800815c <osMessageQueueGet+0xac>
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <osMessageQueueGet+0xb8>)
 8008114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	e01b      	b.n	800815c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <osMessageQueueGet+0x80>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008130:	f06f 0303 	mvn.w	r3, #3
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e011      	b.n	800815c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	69b8      	ldr	r0, [r7, #24]
 800813e:	f000 fbf5 	bl	800892c <xQueueReceive>
 8008142:	4603      	mov	r3, r0
 8008144:	2b01      	cmp	r3, #1
 8008146:	d009      	beq.n	800815c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800814e:	f06f 0301 	mvn.w	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e002      	b.n	800815c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008156:	f06f 0302 	mvn.w	r3, #2
 800815a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800815c:	69fb      	ldr	r3, [r7, #28]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <osMessageQueueGetCount+0x18>
    count = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e00e      	b.n	80081a2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008184:	f3ef 8305 	mrs	r3, IPSR
 8008188:	60fb      	str	r3, [r7, #12]
  return(result);
 800818a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008190:	6938      	ldr	r0, [r7, #16]
 8008192:	f000 fd49 	bl	8008c28 <uxQueueMessagesWaitingFromISR>
 8008196:	6178      	str	r0, [r7, #20]
 8008198:	e003      	b.n	80081a2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800819a:	6938      	ldr	r0, [r7, #16]
 800819c:	f000 fd26 	bl	8008bec <uxQueueMessagesWaiting>
 80081a0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80081a2:	697b      	ldr	r3, [r7, #20]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a07      	ldr	r2, [pc, #28]	; (80081d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80081bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4a06      	ldr	r2, [pc, #24]	; (80081dc <vApplicationGetIdleTaskMemory+0x30>)
 80081c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	601a      	str	r2, [r3, #0]
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20000614 	.word	0x20000614
 80081dc:	200006bc 	.word	0x200006bc

080081e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a07      	ldr	r2, [pc, #28]	; (800820c <vApplicationGetTimerTaskMemory+0x2c>)
 80081f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4a06      	ldr	r2, [pc, #24]	; (8008210 <vApplicationGetTimerTaskMemory+0x30>)
 80081f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081fe:	601a      	str	r2, [r3, #0]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	200008bc 	.word	0x200008bc
 8008210:	20000964 	.word	0x20000964

08008214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800822c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f103 0208 	add.w	r2, r3, #8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 0208 	add.w	r2, r3, #8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082cc:	d103      	bne.n	80082d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e00c      	b.n	80082f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3308      	adds	r3, #8
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e002      	b.n	80082e4 <vListInsert+0x2e>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d2f6      	bcs.n	80082de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6892      	ldr	r2, [r2, #8]
 800833e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6852      	ldr	r2, [r2, #4]
 8008348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d103      	bne.n	800835c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	1e5a      	subs	r2, r3, #1
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083a6:	f002 f97d 	bl	800a6a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	441a      	add	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d6:	3b01      	subs	r3, #1
 80083d8:	68f9      	ldr	r1, [r7, #12]
 80083da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	22ff      	movs	r2, #255	; 0xff
 80083ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	22ff      	movs	r2, #255	; 0xff
 80083f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d114      	bne.n	8008426 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3310      	adds	r3, #16
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fa31 	bl	8009870 <xTaskRemoveFromEventList>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d012      	beq.n	800843a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <xQueueGenericReset+0xcc>)
 8008416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	e009      	b.n	800843a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3310      	adds	r3, #16
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff fef2 	bl	8008214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff feed 	bl	8008214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800843a:	f002 f963 	bl	800a704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800843e:	2301      	movs	r3, #1
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	; 0x38
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <xQueueGenericCreateStatic+0x52>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <xQueueGenericCreateStatic+0x56>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <xQueueGenericCreateStatic+0x58>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <xQueueGenericCreateStatic+0x7e>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <xQueueGenericCreateStatic+0x82>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueGenericCreateStatic+0x84>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61fb      	str	r3, [r7, #28]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084ea:	2350      	movs	r3, #80	; 0x50
 80084ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b50      	cmp	r3, #80	; 0x50
 80084f2:	d00a      	beq.n	800850a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800850a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800851e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	4613      	mov	r3, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f83f 	bl	80085b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008534:	4618      	mov	r0, r3
 8008536:	3730      	adds	r7, #48	; 0x30
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	; 0x28
 8008540:	af02      	add	r7, sp, #8
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	613b      	str	r3, [r7, #16]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3350      	adds	r3, #80	; 0x50
 8008574:	4618      	mov	r0, r3
 8008576:	f002 f9b7 	bl	800a8e8 <pvPortMalloc>
 800857a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	3350      	adds	r3, #80	; 0x50
 800858a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008594:	79fa      	ldrb	r2, [r7, #7]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4613      	mov	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f805 	bl	80085b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085a6:	69bb      	ldr	r3, [r7, #24]
	}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e002      	b.n	80085d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085de:	2101      	movs	r1, #1
 80085e0:	69b8      	ldr	r0, [r7, #24]
 80085e2:	f7ff fecb 	bl	800837c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08e      	sub	sp, #56	; 0x38
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008606:	2300      	movs	r3, #0
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <xQueueGenericSend+0x32>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008626:	bf00      	nop
 8008628:	e7fe      	b.n	8008628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <xQueueGenericSend+0x40>
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <xQueueGenericSend+0x44>
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <xQueueGenericSend+0x46>
 800863c:	2300      	movs	r3, #0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <xQueueGenericSend+0x60>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d103      	bne.n	8008666 <xQueueGenericSend+0x6e>
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <xQueueGenericSend+0x72>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <xQueueGenericSend+0x74>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericSend+0x8e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	623b      	str	r3, [r7, #32]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008686:	f001 fab5 	bl	8009bf4 <xTaskGetSchedulerState>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <xQueueGenericSend+0x9e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <xQueueGenericSend+0xa2>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <xQueueGenericSend+0xa4>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	61fb      	str	r3, [r7, #28]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086b6:	f001 fff5 	bl	800a6a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <xQueueGenericSend+0xd4>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d129      	bne.n	8008720 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d2:	f000 fac7 	bl	8008c64 <prvCopyDataToQueue>
 80086d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d010      	beq.n	8008702 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 f8c3 	bl	8009870 <xTaskRemoveFromEventList>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d013      	beq.n	8008718 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086f0:	4b3f      	ldr	r3, [pc, #252]	; (80087f0 <xQueueGenericSend+0x1f8>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	e00a      	b.n	8008718 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008708:	4b39      	ldr	r3, [pc, #228]	; (80087f0 <xQueueGenericSend+0x1f8>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008718:	f001 fff4 	bl	800a704 <vPortExitCritical>
				return pdPASS;
 800871c:	2301      	movs	r3, #1
 800871e:	e063      	b.n	80087e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008726:	f001 ffed 	bl	800a704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800872a:	2300      	movs	r3, #0
 800872c:	e05c      	b.n	80087e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	d106      	bne.n	8008742 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008734:	f107 0314 	add.w	r3, r7, #20
 8008738:	4618      	mov	r0, r3
 800873a:	f001 f8fd 	bl	8009938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008742:	f001 ffdf 	bl	800a704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008746:	f000 fe57 	bl	80093f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800874a:	f001 ffab 	bl	800a6a4 <vPortEnterCritical>
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008754:	b25b      	sxtb	r3, r3
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875a:	d103      	bne.n	8008764 <xQueueGenericSend+0x16c>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876a:	b25b      	sxtb	r3, r3
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008770:	d103      	bne.n	800877a <xQueueGenericSend+0x182>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800877a:	f001 ffc3 	bl	800a704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800877e:	1d3a      	adds	r2, r7, #4
 8008780:	f107 0314 	add.w	r3, r7, #20
 8008784:	4611      	mov	r1, r2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 f8ec 	bl	8009964 <xTaskCheckForTimeOut>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d124      	bne.n	80087dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008794:	f000 fb5e 	bl	8008e54 <prvIsQueueFull>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d018      	beq.n	80087d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	3310      	adds	r3, #16
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 f812 	bl	80097d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ae:	f000 fae9 	bl	8008d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087b2:	f000 fe2f 	bl	8009414 <xTaskResumeAll>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f47f af7c 	bne.w	80086b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <xQueueGenericSend+0x1f8>)
 80087c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	e772      	b.n	80086b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d2:	f000 fad7 	bl	8008d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087d6:	f000 fe1d 	bl	8009414 <xTaskResumeAll>
 80087da:	e76c      	b.n	80086b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087de:	f000 fad1 	bl	8008d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087e2:	f000 fe17 	bl	8009414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3738      	adds	r7, #56	; 0x38
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b090      	sub	sp, #64	; 0x40
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <xQueueGenericSendFromISR+0x3c>
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <xQueueGenericSendFromISR+0x40>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <xQueueGenericSendFromISR+0x42>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d103      	bne.n	800885e <xQueueGenericSendFromISR+0x6a>
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <xQueueGenericSendFromISR+0x6e>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <xQueueGenericSendFromISR+0x70>
 8008862:	2300      	movs	r3, #0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800887e:	f001 fff3 	bl	800a868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008882:	f3ef 8211 	mrs	r2, BASEPRI
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61fa      	str	r2, [r7, #28]
 8008898:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800889a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <xQueueGenericSendFromISR+0xbc>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d12f      	bne.n	8008910 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088c6:	f000 f9cd 	bl	8008c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80088ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d2:	d112      	bne.n	80088fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d016      	beq.n	800890a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	3324      	adds	r3, #36	; 0x24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 ffc5 	bl	8009870 <xTaskRemoveFromEventList>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00e      	beq.n	800890a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e007      	b.n	800890a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088fe:	3301      	adds	r3, #1
 8008900:	b2db      	uxtb	r3, r3
 8008902:	b25a      	sxtb	r2, r3
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800890a:	2301      	movs	r3, #1
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800890e:	e001      	b.n	8008914 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008910:	2300      	movs	r3, #0
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800891e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008922:	4618      	mov	r0, r3
 8008924:	3740      	adds	r7, #64	; 0x40
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	; 0x30
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008938:	2300      	movs	r3, #0
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <xQueueReceive+0x30>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	623b      	str	r3, [r7, #32]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <xQueueReceive+0x3e>
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <xQueueReceive+0x42>
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <xQueueReceive+0x44>
 800896e:	2300      	movs	r3, #0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <xQueueReceive+0x5e>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	61fb      	str	r3, [r7, #28]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800898a:	f001 f933 	bl	8009bf4 <xTaskGetSchedulerState>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <xQueueReceive+0x6e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <xQueueReceive+0x72>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueReceive+0x74>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueReceive+0x8e>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	61bb      	str	r3, [r7, #24]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ba:	f001 fe73 	bl	800a6a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01f      	beq.n	8008a0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ce:	f000 f9b3 	bl	8008d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00f      	beq.n	8008a02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	3310      	adds	r3, #16
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 ff42 	bl	8009870 <xTaskRemoveFromEventList>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089f2:	4b3d      	ldr	r3, [pc, #244]	; (8008ae8 <xQueueReceive+0x1bc>)
 80089f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a02:	f001 fe7f 	bl	800a704 <vPortExitCritical>
				return pdPASS;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e069      	b.n	8008ade <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a10:	f001 fe78 	bl	800a704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a14:	2300      	movs	r3, #0
 8008a16:	e062      	b.n	8008ade <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a1e:	f107 0310 	add.w	r3, r7, #16
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 ff88 	bl	8009938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a2c:	f001 fe6a 	bl	800a704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a30:	f000 fce2 	bl	80093f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a34:	f001 fe36 	bl	800a6a4 <vPortEnterCritical>
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a44:	d103      	bne.n	8008a4e <xQueueReceive+0x122>
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a54:	b25b      	sxtb	r3, r3
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a5a:	d103      	bne.n	8008a64 <xQueueReceive+0x138>
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a64:	f001 fe4e 	bl	800a704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a68:	1d3a      	adds	r2, r7, #4
 8008a6a:	f107 0310 	add.w	r3, r7, #16
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 ff77 	bl	8009964 <xTaskCheckForTimeOut>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d123      	bne.n	8008ac4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a7e:	f000 f9d3 	bl	8008e28 <prvIsQueueEmpty>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d017      	beq.n	8008ab8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	3324      	adds	r3, #36	; 0x24
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fe9d 	bl	80097d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a98:	f000 f974 	bl	8008d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a9c:	f000 fcba 	bl	8009414 <xTaskResumeAll>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d189      	bne.n	80089ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008aa6:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <xQueueReceive+0x1bc>)
 8008aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	e780      	b.n	80089ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aba:	f000 f963 	bl	8008d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008abe:	f000 fca9 	bl	8009414 <xTaskResumeAll>
 8008ac2:	e77a      	b.n	80089ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac6:	f000 f95d 	bl	8008d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aca:	f000 fca3 	bl	8009414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad0:	f000 f9aa 	bl	8008e28 <prvIsQueueEmpty>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f43f af6f 	beq.w	80089ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008adc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3730      	adds	r7, #48	; 0x30
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08e      	sub	sp, #56	; 0x38
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	623b      	str	r3, [r7, #32]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <xQueueReceiveFromISR+0x3a>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <xQueueReceiveFromISR+0x3e>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <xQueueReceiveFromISR+0x40>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61fb      	str	r3, [r7, #28]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b46:	f001 fe8f 	bl	800a868 <vPortValidateInterruptPriority>
	__asm volatile
 8008b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	61ba      	str	r2, [r7, #24]
 8008b60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d02f      	beq.n	8008bd2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b80:	f000 f8da 	bl	8008d38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	1e5a      	subs	r2, r3, #1
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b94:	d112      	bne.n	8008bbc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d016      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fe64 	bl	8009870 <xTaskRemoveFromEventList>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00e      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	e007      	b.n	8008bcc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	b25a      	sxtb	r2, r3
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd0:	e001      	b.n	8008bd6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f383 8811 	msr	BASEPRI, r3
}
 8008be0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3738      	adds	r7, #56	; 0x38
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	60bb      	str	r3, [r7, #8]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008c10:	f001 fd48 	bl	800a6a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008c1a:	f001 fd73 	bl	800a704 <vPortExitCritical>

	return uxReturn;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	60fb      	str	r3, [r7, #12]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008c56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c58:	4618      	mov	r0, r3
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10d      	bne.n	8008c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d14d      	bne.n	8008d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 ffce 	bl	8009c30 <xTaskPriorityDisinherit>
 8008c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	609a      	str	r2, [r3, #8]
 8008c9c:	e043      	b.n	8008d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d119      	bne.n	8008cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6858      	ldr	r0, [r3, #4]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	461a      	mov	r2, r3
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	f003 f862 	bl	800bd78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d32b      	bcc.n	8008d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	e026      	b.n	8008d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	68d8      	ldr	r0, [r3, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	f003 f848 	bl	800bd78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	425b      	negs	r3, r3
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d207      	bcs.n	8008d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	441a      	add	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d105      	bne.n	8008d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d2e:	697b      	ldr	r3, [r7, #20]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d018      	beq.n	8008d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	441a      	add	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d303      	bcc.n	8008d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68d9      	ldr	r1, [r3, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	461a      	mov	r2, r3
 8008d76:	6838      	ldr	r0, [r7, #0]
 8008d78:	f002 fffe 	bl	800bd78 <memcpy>
	}
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d8c:	f001 fc8a 	bl	800a6a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d98:	e011      	b.n	8008dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d012      	beq.n	8008dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3324      	adds	r3, #36	; 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fd62 	bl	8009870 <xTaskRemoveFromEventList>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008db2:	f000 fe39 	bl	8009a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dce9      	bgt.n	8008d9a <prvUnlockQueue+0x16>
 8008dc6:	e000      	b.n	8008dca <prvUnlockQueue+0x46>
					break;
 8008dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	22ff      	movs	r2, #255	; 0xff
 8008dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dd2:	f001 fc97 	bl	800a704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dd6:	f001 fc65 	bl	800a6a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de2:	e011      	b.n	8008e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3310      	adds	r3, #16
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fd3d 	bl	8009870 <xTaskRemoveFromEventList>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dfc:	f000 fe14 	bl	8009a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dce9      	bgt.n	8008de4 <prvUnlockQueue+0x60>
 8008e10:	e000      	b.n	8008e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	22ff      	movs	r2, #255	; 0xff
 8008e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e1c:	f001 fc72 	bl	800a704 <vPortExitCritical>
}
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e30:	f001 fc38 	bl	800a6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e001      	b.n	8008e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e46:	f001 fc5d 	bl	800a704 <vPortExitCritical>

	return xReturn;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e5c:	f001 fc22 	bl	800a6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d102      	bne.n	8008e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e001      	b.n	8008e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e76:	f001 fc45 	bl	800a704 <vPortExitCritical>

	return xReturn;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e014      	b.n	8008ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e94:	4a0f      	ldr	r2, [pc, #60]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ea0:	490c      	ldr	r1, [pc, #48]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eb6:	e006      	b.n	8008ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d9e7      	bls.n	8008e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000d64 	.word	0x20000d64

08008ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ee8:	f001 fbdc 	bl	800a6a4 <vPortEnterCritical>
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef2:	b25b      	sxtb	r3, r3
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d103      	bne.n	8008f02 <vQueueWaitForMessageRestricted+0x2a>
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f0e:	d103      	bne.n	8008f18 <vQueueWaitForMessageRestricted+0x40>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f18:	f001 fbf4 	bl	800a704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3324      	adds	r3, #36	; 0x24
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fc73 	bl	8009818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f7ff ff26 	bl	8008d84 <prvUnlockQueue>
	}
 8008f38:	bf00      	nop
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	; 0x38
 8008f44:	af04      	add	r7, sp, #16
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	61fb      	str	r3, [r7, #28]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f86:	23a8      	movs	r3, #168	; 0xa8
 8008f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2ba8      	cmp	r3, #168	; 0xa8
 8008f8e:	d00a      	beq.n	8008fa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	61bb      	str	r3, [r7, #24]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01e      	beq.n	8008fec <xTaskCreateStatic+0xac>
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01b      	beq.n	8008fec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	9302      	str	r3, [sp, #8]
 8008fce:	f107 0314 	add.w	r3, r7, #20
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f850 	bl	8009084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fe6:	f000 f8f3 	bl	80091d0 <prvAddNewTaskToReadyList>
 8008fea:	e001      	b.n	8008ff0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ff0:	697b      	ldr	r3, [r7, #20]
	}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3728      	adds	r7, #40	; 0x28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b08c      	sub	sp, #48	; 0x30
 8008ffe:	af04      	add	r7, sp, #16
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4618      	mov	r0, r3
 8009010:	f001 fc6a 	bl	800a8e8 <pvPortMalloc>
 8009014:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800901c:	20a8      	movs	r0, #168	; 0xa8
 800901e:	f001 fc63 	bl	800a8e8 <pvPortMalloc>
 8009022:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
 8009030:	e005      	b.n	800903e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009032:	6978      	ldr	r0, [r7, #20]
 8009034:	f001 fd24 	bl	800aa80 <vPortFree>
 8009038:	e001      	b.n	800903e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d017      	beq.n	8009074 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800904c:	88fa      	ldrh	r2, [r7, #6]
 800904e:	2300      	movs	r3, #0
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	9302      	str	r3, [sp, #8]
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f80e 	bl	8009084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009068:	69f8      	ldr	r0, [r7, #28]
 800906a:	f000 f8b1 	bl	80091d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800906e:	2301      	movs	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e002      	b.n	800907a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009078:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800907a:	69bb      	ldr	r3, [r7, #24]
	}
 800907c:	4618      	mov	r0, r3
 800907e:	3720      	adds	r7, #32
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	461a      	mov	r2, r3
 800909c:	21a5      	movs	r1, #165	; 0xa5
 800909e:	f002 fd96 	bl	800bbce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090ac:	3b01      	subs	r3, #1
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	617b      	str	r3, [r7, #20]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d01f      	beq.n	8009122 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	e012      	b.n	800910e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	7819      	ldrb	r1, [r3, #0]
 80090f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	3334      	adds	r3, #52	; 0x34
 80090f8:	460a      	mov	r2, r1
 80090fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	4413      	add	r3, r2
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	3301      	adds	r3, #1
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	2b0f      	cmp	r3, #15
 8009112:	d9e9      	bls.n	80090e8 <prvInitialiseNewTask+0x64>
 8009114:	e000      	b.n	8009118 <prvInitialiseNewTask+0x94>
			{
				break;
 8009116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009120:	e003      	b.n	800912a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	2b37      	cmp	r3, #55	; 0x37
 800912e:	d901      	bls.n	8009134 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009130:	2337      	movs	r3, #55	; 0x37
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800913e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	2200      	movs	r2, #0
 8009144:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	3304      	adds	r3, #4
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff f882 	bl	8008254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	3318      	adds	r3, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff f87d 	bl	8008254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	2200      	movs	r2, #0
 800917c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	3354      	adds	r3, #84	; 0x54
 8009184:	224c      	movs	r2, #76	; 0x4c
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f002 fd20 	bl	800bbce <memset>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <prvInitialiseNewTask+0x140>)
 8009192:	659a      	str	r2, [r3, #88]	; 0x58
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	4a0c      	ldr	r2, [pc, #48]	; (80091c8 <prvInitialiseNewTask+0x144>)
 8009198:	65da      	str	r2, [r3, #92]	; 0x5c
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	4a0b      	ldr	r2, [pc, #44]	; (80091cc <prvInitialiseNewTask+0x148>)
 800919e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	69b8      	ldr	r0, [r7, #24]
 80091a6:	f001 f953 	bl	800a450 <pxPortInitialiseStack>
 80091aa:	4602      	mov	r2, r0
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091bc:	bf00      	nop
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20006088 	.word	0x20006088
 80091c8:	200060f0 	.word	0x200060f0
 80091cc:	20006158 	.word	0x20006158

080091d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091d8:	f001 fa64 	bl	800a6a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091dc:	4b2d      	ldr	r3, [pc, #180]	; (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091e6:	4b2c      	ldr	r3, [pc, #176]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091ee:	4a2a      	ldr	r2, [pc, #168]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091f4:	4b27      	ldr	r3, [pc, #156]	; (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d110      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091fc:	f000 fc38 	bl	8009a70 <prvInitialiseTaskLists>
 8009200:	e00d      	b.n	800921e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009202:	4b26      	ldr	r3, [pc, #152]	; (800929c <prvAddNewTaskToReadyList+0xcc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800920a:	4b23      	ldr	r3, [pc, #140]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	429a      	cmp	r2, r3
 8009216:	d802      	bhi.n	800921e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800921e:	4b20      	ldr	r3, [pc, #128]	; (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 8009226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009228:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009234:	4b1b      	ldr	r3, [pc, #108]	; (80092a4 <prvAddNewTaskToReadyList+0xd4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d903      	bls.n	8009244 <prvAddNewTaskToReadyList+0x74>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <prvAddNewTaskToReadyList+0xd4>)
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4a15      	ldr	r2, [pc, #84]	; (80092a8 <prvAddNewTaskToReadyList+0xd8>)
 8009252:	441a      	add	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f7ff f807 	bl	800826e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009260:	f001 fa50 	bl	800a704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <prvAddNewTaskToReadyList+0xcc>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	429a      	cmp	r2, r3
 8009278:	d207      	bcs.n	800928a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <prvAddNewTaskToReadyList+0xdc>)
 800927c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20001278 	.word	0x20001278
 8009298:	20000da4 	.word	0x20000da4
 800929c:	20001284 	.word	0x20001284
 80092a0:	20001294 	.word	0x20001294
 80092a4:	20001280 	.word	0x20001280
 80092a8:	20000da8 	.word	0x20000da8
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d017      	beq.n	80092f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <vTaskDelay+0x60>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <vTaskDelay+0x30>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60bb      	str	r3, [r7, #8]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092e0:	f000 f88a 	bl	80093f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fd10 	bl	8009d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ec:	f000 f892 	bl	8009414 <xTaskResumeAll>
 80092f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d107      	bne.n	8009308 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <vTaskDelay+0x64>)
 80092fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	200012a0 	.word	0x200012a0
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08a      	sub	sp, #40	; 0x28
 800931c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009326:	463a      	mov	r2, r7
 8009328:	1d39      	adds	r1, r7, #4
 800932a:	f107 0308 	add.w	r3, r7, #8
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe ff3c 	bl	80081ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	9202      	str	r2, [sp, #8]
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	2300      	movs	r3, #0
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	2300      	movs	r3, #0
 8009344:	460a      	mov	r2, r1
 8009346:	4924      	ldr	r1, [pc, #144]	; (80093d8 <vTaskStartScheduler+0xc0>)
 8009348:	4824      	ldr	r0, [pc, #144]	; (80093dc <vTaskStartScheduler+0xc4>)
 800934a:	f7ff fdf9 	bl	8008f40 <xTaskCreateStatic>
 800934e:	4603      	mov	r3, r0
 8009350:	4a23      	ldr	r2, [pc, #140]	; (80093e0 <vTaskStartScheduler+0xc8>)
 8009352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009354:	4b22      	ldr	r3, [pc, #136]	; (80093e0 <vTaskStartScheduler+0xc8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e001      	b.n	8009366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d102      	bne.n	8009372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800936c:	f000 fd22 	bl	8009db4 <xTimerCreateTimerTask>
 8009370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d11b      	bne.n	80093b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	613b      	str	r3, [r7, #16]
}
 800938a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800938c:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <vTaskStartScheduler+0xcc>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3354      	adds	r3, #84	; 0x54
 8009392:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <vTaskStartScheduler+0xd0>)
 8009394:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <vTaskStartScheduler+0xd4>)
 8009398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800939c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800939e:	4b14      	ldr	r3, [pc, #80]	; (80093f0 <vTaskStartScheduler+0xd8>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <vTaskStartScheduler+0xdc>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093aa:	f001 f8d9 	bl	800a560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093ae:	e00e      	b.n	80093ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b6:	d10a      	bne.n	80093ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60fb      	str	r3, [r7, #12]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <vTaskStartScheduler+0xb4>
}
 80093ce:	bf00      	nop
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	0800f674 	.word	0x0800f674
 80093dc:	08009a41 	.word	0x08009a41
 80093e0:	2000129c 	.word	0x2000129c
 80093e4:	20000da4 	.word	0x20000da4
 80093e8:	20000068 	.word	0x20000068
 80093ec:	20001298 	.word	0x20001298
 80093f0:	20001284 	.word	0x20001284
 80093f4:	2000127c 	.word	0x2000127c

080093f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <vTaskSuspendAll+0x18>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	4a03      	ldr	r2, [pc, #12]	; (8009410 <vTaskSuspendAll+0x18>)
 8009404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009406:	bf00      	nop
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	200012a0 	.word	0x200012a0

08009414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800941e:	2300      	movs	r3, #0
 8009420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009422:	4b42      	ldr	r3, [pc, #264]	; (800952c <xTaskResumeAll+0x118>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <xTaskResumeAll+0x2c>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	603b      	str	r3, [r7, #0]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009440:	f001 f930 	bl	800a6a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009444:	4b39      	ldr	r3, [pc, #228]	; (800952c <xTaskResumeAll+0x118>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	4a38      	ldr	r2, [pc, #224]	; (800952c <xTaskResumeAll+0x118>)
 800944c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944e:	4b37      	ldr	r3, [pc, #220]	; (800952c <xTaskResumeAll+0x118>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d162      	bne.n	800951c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009456:	4b36      	ldr	r3, [pc, #216]	; (8009530 <xTaskResumeAll+0x11c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d05e      	beq.n	800951c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800945e:	e02f      	b.n	80094c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009460:	4b34      	ldr	r3, [pc, #208]	; (8009534 <xTaskResumeAll+0x120>)
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3318      	adds	r3, #24
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe ff5b 	bl	8008328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3304      	adds	r3, #4
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe ff56 	bl	8008328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <xTaskResumeAll+0x124>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d903      	bls.n	8009490 <xTaskResumeAll+0x7c>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <xTaskResumeAll+0x124>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4a27      	ldr	r2, [pc, #156]	; (800953c <xTaskResumeAll+0x128>)
 800949e:	441a      	add	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fe fee1 	bl	800826e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4b23      	ldr	r3, [pc, #140]	; (8009540 <xTaskResumeAll+0x12c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80094ba:	4b22      	ldr	r3, [pc, #136]	; (8009544 <xTaskResumeAll+0x130>)
 80094bc:	2201      	movs	r2, #1
 80094be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c0:	4b1c      	ldr	r3, [pc, #112]	; (8009534 <xTaskResumeAll+0x120>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1cb      	bne.n	8009460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094ce:	f000 fb71 	bl	8009bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <xTaskResumeAll+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094de:	f000 f859 	bl	8009594 <xTaskIncrementTick>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80094e8:	4b16      	ldr	r3, [pc, #88]	; (8009544 <xTaskResumeAll+0x130>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f1      	bne.n	80094de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80094fa:	4b13      	ldr	r3, [pc, #76]	; (8009548 <xTaskResumeAll+0x134>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009500:	4b10      	ldr	r3, [pc, #64]	; (8009544 <xTaskResumeAll+0x130>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <xTaskResumeAll+0x138>)
 800950e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800951c:	f001 f8f2 	bl	800a704 <vPortExitCritical>

	return xAlreadyYielded;
 8009520:	68bb      	ldr	r3, [r7, #8]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200012a0 	.word	0x200012a0
 8009530:	20001278 	.word	0x20001278
 8009534:	20001238 	.word	0x20001238
 8009538:	20001280 	.word	0x20001280
 800953c:	20000da8 	.word	0x20000da8
 8009540:	20000da4 	.word	0x20000da4
 8009544:	2000128c 	.word	0x2000128c
 8009548:	20001288 	.word	0x20001288
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <xTaskGetTickCount+0x1c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800955c:	687b      	ldr	r3, [r7, #4]
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	2000127c 	.word	0x2000127c

08009570 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009576:	f001 f977 	bl	800a868 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800957a:	2300      	movs	r3, #0
 800957c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <xTaskGetTickCountFromISR+0x20>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009584:	683b      	ldr	r3, [r7, #0]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2000127c 	.word	0x2000127c

08009594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959e:	4b4f      	ldr	r3, [pc, #316]	; (80096dc <xTaskIncrementTick+0x148>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 808f 	bne.w	80096c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095a8:	4b4d      	ldr	r3, [pc, #308]	; (80096e0 <xTaskIncrementTick+0x14c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3301      	adds	r3, #1
 80095ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095b0:	4a4b      	ldr	r2, [pc, #300]	; (80096e0 <xTaskIncrementTick+0x14c>)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d120      	bne.n	80095fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095bc:	4b49      	ldr	r3, [pc, #292]	; (80096e4 <xTaskIncrementTick+0x150>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <xTaskIncrementTick+0x48>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xTaskIncrementTick+0x46>
 80095dc:	4b41      	ldr	r3, [pc, #260]	; (80096e4 <xTaskIncrementTick+0x150>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	4b41      	ldr	r3, [pc, #260]	; (80096e8 <xTaskIncrementTick+0x154>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a3f      	ldr	r2, [pc, #252]	; (80096e4 <xTaskIncrementTick+0x150>)
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	4a3f      	ldr	r2, [pc, #252]	; (80096e8 <xTaskIncrementTick+0x154>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	4b3e      	ldr	r3, [pc, #248]	; (80096ec <xTaskIncrementTick+0x158>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	4a3d      	ldr	r2, [pc, #244]	; (80096ec <xTaskIncrementTick+0x158>)
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	f000 fadb 	bl	8009bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095fe:	4b3c      	ldr	r3, [pc, #240]	; (80096f0 <xTaskIncrementTick+0x15c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d349      	bcc.n	800969c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009608:	4b36      	ldr	r3, [pc, #216]	; (80096e4 <xTaskIncrementTick+0x150>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d104      	bne.n	800961c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <xTaskIncrementTick+0x15c>)
 8009614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009618:	601a      	str	r2, [r3, #0]
					break;
 800961a:	e03f      	b.n	800969c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961c:	4b31      	ldr	r3, [pc, #196]	; (80096e4 <xTaskIncrementTick+0x150>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	429a      	cmp	r2, r3
 8009632:	d203      	bcs.n	800963c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009634:	4a2e      	ldr	r2, [pc, #184]	; (80096f0 <xTaskIncrementTick+0x15c>)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800963a:	e02f      	b.n	800969c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	3304      	adds	r3, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fe71 	bl	8008328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	3318      	adds	r3, #24
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe fe68 	bl	8008328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4b25      	ldr	r3, [pc, #148]	; (80096f4 <xTaskIncrementTick+0x160>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <xTaskIncrementTick+0xd8>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a22      	ldr	r2, [pc, #136]	; (80096f4 <xTaskIncrementTick+0x160>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a1f      	ldr	r2, [pc, #124]	; (80096f8 <xTaskIncrementTick+0x164>)
 800967a:	441a      	add	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fdf3 	bl	800826e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <xTaskIncrementTick+0x168>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	429a      	cmp	r2, r3
 8009694:	d3b8      	bcc.n	8009608 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009696:	2301      	movs	r3, #1
 8009698:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800969a:	e7b5      	b.n	8009608 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800969c:	4b17      	ldr	r3, [pc, #92]	; (80096fc <xTaskIncrementTick+0x168>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a2:	4915      	ldr	r1, [pc, #84]	; (80096f8 <xTaskIncrementTick+0x164>)
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d901      	bls.n	80096b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096b8:	4b11      	ldr	r3, [pc, #68]	; (8009700 <xTaskIncrementTick+0x16c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d007      	beq.n	80096d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096c0:	2301      	movs	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	e004      	b.n	80096d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096c6:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <xTaskIncrementTick+0x170>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <xTaskIncrementTick+0x170>)
 80096ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096d0:	697b      	ldr	r3, [r7, #20]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	200012a0 	.word	0x200012a0
 80096e0:	2000127c 	.word	0x2000127c
 80096e4:	20001230 	.word	0x20001230
 80096e8:	20001234 	.word	0x20001234
 80096ec:	20001290 	.word	0x20001290
 80096f0:	20001298 	.word	0x20001298
 80096f4:	20001280 	.word	0x20001280
 80096f8:	20000da8 	.word	0x20000da8
 80096fc:	20000da4 	.word	0x20000da4
 8009700:	2000128c 	.word	0x2000128c
 8009704:	20001288 	.word	0x20001288

08009708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800970e:	4b2a      	ldr	r3, [pc, #168]	; (80097b8 <vTaskSwitchContext+0xb0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <vTaskSwitchContext+0xb4>)
 8009718:	2201      	movs	r2, #1
 800971a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800971c:	e046      	b.n	80097ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800971e:	4b27      	ldr	r3, [pc, #156]	; (80097bc <vTaskSwitchContext+0xb4>)
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009724:	4b26      	ldr	r3, [pc, #152]	; (80097c0 <vTaskSwitchContext+0xb8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e010      	b.n	800974e <vTaskSwitchContext+0x46>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <vTaskSwitchContext+0x40>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	607b      	str	r3, [r7, #4]
}
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <vTaskSwitchContext+0x3e>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3b01      	subs	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	491d      	ldr	r1, [pc, #116]	; (80097c4 <vTaskSwitchContext+0xbc>)
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	440b      	add	r3, r1
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0e4      	beq.n	800972c <vTaskSwitchContext+0x24>
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a15      	ldr	r2, [pc, #84]	; (80097c4 <vTaskSwitchContext+0xbc>)
 800976e:	4413      	add	r3, r2
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	605a      	str	r2, [r3, #4]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	3308      	adds	r3, #8
 8009784:	429a      	cmp	r2, r3
 8009786:	d104      	bne.n	8009792 <vTaskSwitchContext+0x8a>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	4a0b      	ldr	r2, [pc, #44]	; (80097c8 <vTaskSwitchContext+0xc0>)
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <vTaskSwitchContext+0xb8>)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097a2:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <vTaskSwitchContext+0xc0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3354      	adds	r3, #84	; 0x54
 80097a8:	4a08      	ldr	r2, [pc, #32]	; (80097cc <vTaskSwitchContext+0xc4>)
 80097aa:	6013      	str	r3, [r2, #0]
}
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	200012a0 	.word	0x200012a0
 80097bc:	2000128c 	.word	0x2000128c
 80097c0:	20001280 	.word	0x20001280
 80097c4:	20000da8 	.word	0x20000da8
 80097c8:	20000da4 	.word	0x20000da4
 80097cc:	20000068 	.word	0x20000068

080097d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <vTaskPlaceOnEventList+0x44>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3318      	adds	r3, #24
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7fe fd59 	bl	80082b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009804:	2101      	movs	r1, #1
 8009806:	6838      	ldr	r0, [r7, #0]
 8009808:	f000 fa80 	bl	8009d0c <prvAddCurrentTaskToDelayedList>
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000da4 	.word	0x20000da4

08009818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	617b      	str	r3, [r7, #20]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <vTaskPlaceOnEventListRestricted+0x54>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3318      	adds	r3, #24
 8009846:	4619      	mov	r1, r3
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7fe fd10 	bl	800826e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009858:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	68b8      	ldr	r0, [r7, #8]
 800985e:	f000 fa55 	bl	8009d0c <prvAddCurrentTaskToDelayedList>
	}
 8009862:	bf00      	nop
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000da4 	.word	0x20000da4

08009870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60fb      	str	r3, [r7, #12]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	3318      	adds	r3, #24
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fd41 	bl	8008328 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a6:	4b1e      	ldr	r3, [pc, #120]	; (8009920 <xTaskRemoveFromEventList+0xb0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d11d      	bne.n	80098ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fd38 	bl	8008328 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	4b19      	ldr	r3, [pc, #100]	; (8009924 <xTaskRemoveFromEventList+0xb4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d903      	bls.n	80098cc <xTaskRemoveFromEventList+0x5c>
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4a16      	ldr	r2, [pc, #88]	; (8009924 <xTaskRemoveFromEventList+0xb4>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4a13      	ldr	r2, [pc, #76]	; (8009928 <xTaskRemoveFromEventList+0xb8>)
 80098da:	441a      	add	r2, r3
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	3304      	adds	r3, #4
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f7fe fcc3 	bl	800826e <vListInsertEnd>
 80098e8:	e005      	b.n	80098f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3318      	adds	r3, #24
 80098ee:	4619      	mov	r1, r3
 80098f0:	480e      	ldr	r0, [pc, #56]	; (800992c <xTaskRemoveFromEventList+0xbc>)
 80098f2:	f7fe fcbc 	bl	800826e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <xTaskRemoveFromEventList+0xc0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	429a      	cmp	r2, r3
 8009902:	d905      	bls.n	8009910 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <xTaskRemoveFromEventList+0xc4>)
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e001      	b.n	8009914 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009910:	2300      	movs	r3, #0
 8009912:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009914:	697b      	ldr	r3, [r7, #20]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200012a0 	.word	0x200012a0
 8009924:	20001280 	.word	0x20001280
 8009928:	20000da8 	.word	0x20000da8
 800992c:	20001238 	.word	0x20001238
 8009930:	20000da4 	.word	0x20000da4
 8009934:	2000128c 	.word	0x2000128c

08009938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009940:	4b06      	ldr	r3, [pc, #24]	; (800995c <vTaskInternalSetTimeOutState+0x24>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <vTaskInternalSetTimeOutState+0x28>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	605a      	str	r2, [r3, #4]
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20001290 	.word	0x20001290
 8009960:	2000127c 	.word	0x2000127c

08009964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	613b      	str	r3, [r7, #16]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099a6:	f000 fe7d 	bl	800a6a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <xTaskCheckForTimeOut+0xbc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c2:	d102      	bne.n	80099ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]
 80099c8:	e023      	b.n	8009a12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4b15      	ldr	r3, [pc, #84]	; (8009a24 <xTaskCheckForTimeOut+0xc0>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d007      	beq.n	80099e6 <xTaskCheckForTimeOut+0x82>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d302      	bcc.n	80099e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e015      	b.n	8009a12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d20b      	bcs.n	8009a08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff9b 	bl	8009938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	e004      	b.n	8009a12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a12:	f000 fe77 	bl	800a704 <vPortExitCritical>

	return xReturn;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	2000127c 	.word	0x2000127c
 8009a24:	20001290 	.word	0x20001290

08009a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <vTaskMissedYield+0x14>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	2000128c 	.word	0x2000128c

08009a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a48:	f000 f852 	bl	8009af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <prvIdleTask+0x28>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d9f9      	bls.n	8009a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <prvIdleTask+0x2c>)
 8009a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a64:	e7f0      	b.n	8009a48 <prvIdleTask+0x8>
 8009a66:	bf00      	nop
 8009a68:	20000da8 	.word	0x20000da8
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	e00c      	b.n	8009a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <prvInitialiseTaskLists+0x60>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fbc2 	bl	8008214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3301      	adds	r3, #1
 8009a94:	607b      	str	r3, [r7, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b37      	cmp	r3, #55	; 0x37
 8009a9a:	d9ef      	bls.n	8009a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a9c:	480d      	ldr	r0, [pc, #52]	; (8009ad4 <prvInitialiseTaskLists+0x64>)
 8009a9e:	f7fe fbb9 	bl	8008214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aa2:	480d      	ldr	r0, [pc, #52]	; (8009ad8 <prvInitialiseTaskLists+0x68>)
 8009aa4:	f7fe fbb6 	bl	8008214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aa8:	480c      	ldr	r0, [pc, #48]	; (8009adc <prvInitialiseTaskLists+0x6c>)
 8009aaa:	f7fe fbb3 	bl	8008214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009aae:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <prvInitialiseTaskLists+0x70>)
 8009ab0:	f7fe fbb0 	bl	8008214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ab4:	480b      	ldr	r0, [pc, #44]	; (8009ae4 <prvInitialiseTaskLists+0x74>)
 8009ab6:	f7fe fbad 	bl	8008214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <prvInitialiseTaskLists+0x78>)
 8009abc:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <prvInitialiseTaskLists+0x64>)
 8009abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <prvInitialiseTaskLists+0x7c>)
 8009ac2:	4a05      	ldr	r2, [pc, #20]	; (8009ad8 <prvInitialiseTaskLists+0x68>)
 8009ac4:	601a      	str	r2, [r3, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000da8 	.word	0x20000da8
 8009ad4:	20001208 	.word	0x20001208
 8009ad8:	2000121c 	.word	0x2000121c
 8009adc:	20001238 	.word	0x20001238
 8009ae0:	2000124c 	.word	0x2000124c
 8009ae4:	20001264 	.word	0x20001264
 8009ae8:	20001230 	.word	0x20001230
 8009aec:	20001234 	.word	0x20001234

08009af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009af6:	e019      	b.n	8009b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009af8:	f000 fdd4 	bl	800a6a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <prvCheckTasksWaitingTermination+0x50>)
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fc0d 	bl	8008328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <prvCheckTasksWaitingTermination+0x54>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	4a0b      	ldr	r2, [pc, #44]	; (8009b44 <prvCheckTasksWaitingTermination+0x54>)
 8009b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <prvCheckTasksWaitingTermination+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <prvCheckTasksWaitingTermination+0x58>)
 8009b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b22:	f000 fdef 	bl	800a704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f810 	bl	8009b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <prvCheckTasksWaitingTermination+0x58>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e1      	bne.n	8009af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	2000124c 	.word	0x2000124c
 8009b44:	20001278 	.word	0x20001278
 8009b48:	20001260 	.word	0x20001260

08009b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3354      	adds	r3, #84	; 0x54
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f002 f855 	bl	800bc08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 ff87 	bl	800aa80 <vPortFree>
				vPortFree( pxTCB );
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 ff84 	bl	800aa80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b78:	e018      	b.n	8009bac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d103      	bne.n	8009b8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 ff7b 	bl	800aa80 <vPortFree>
	}
 8009b8a:	e00f      	b.n	8009bac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d00a      	beq.n	8009bac <prvDeleteTCB+0x60>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60fb      	str	r3, [r7, #12]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <prvDeleteTCB+0x5e>
	}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bba:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <prvResetNextTaskUnblockTime+0x38>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d104      	bne.n	8009bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bcc:	e008      	b.n	8009be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <prvResetNextTaskUnblockTime+0x38>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	4a04      	ldr	r2, [pc, #16]	; (8009bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bde:	6013      	str	r3, [r2, #0]
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20001230 	.word	0x20001230
 8009bf0:	20001298 	.word	0x20001298

08009bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <xTaskGetSchedulerState+0x34>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c02:	2301      	movs	r3, #1
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	e008      	b.n	8009c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c08:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <xTaskGetSchedulerState+0x38>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c10:	2302      	movs	r3, #2
 8009c12:	607b      	str	r3, [r7, #4]
 8009c14:	e001      	b.n	8009c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c16:	2300      	movs	r3, #0
 8009c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c1a:	687b      	ldr	r3, [r7, #4]
	}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	20001284 	.word	0x20001284
 8009c2c:	200012a0 	.word	0x200012a0

08009c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d056      	beq.n	8009cf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c46:	4b2e      	ldr	r3, [pc, #184]	; (8009d00 <xTaskPriorityDisinherit+0xd0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d00a      	beq.n	8009c66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60fb      	str	r3, [r7, #12]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	60bb      	str	r3, [r7, #8]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c88:	1e5a      	subs	r2, r3, #1
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d02c      	beq.n	8009cf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d128      	bne.n	8009cf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fb3e 	bl	8008328 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc4:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <xTaskPriorityDisinherit+0xd4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d903      	bls.n	8009cd4 <xTaskPriorityDisinherit+0xa4>
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	4a0c      	ldr	r2, [pc, #48]	; (8009d04 <xTaskPriorityDisinherit+0xd4>)
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4a09      	ldr	r2, [pc, #36]	; (8009d08 <xTaskPriorityDisinherit+0xd8>)
 8009ce2:	441a      	add	r2, r3
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f7fe fabf 	bl	800826e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cf4:	697b      	ldr	r3, [r7, #20]
	}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000da4 	.word	0x20000da4
 8009d04:	20001280 	.word	0x20001280
 8009d08:	20000da8 	.word	0x20000da8

08009d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d16:	4b21      	ldr	r3, [pc, #132]	; (8009d9c <prvAddCurrentTaskToDelayedList+0x90>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d1c:	4b20      	ldr	r3, [pc, #128]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fb00 	bl	8008328 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d2e:	d10a      	bne.n	8009d46 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4819      	ldr	r0, [pc, #100]	; (8009da4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d40:	f7fe fa95 	bl	800826e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d44:	e026      	b.n	8009d94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d4e:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d209      	bcs.n	8009d72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	f7fe faa3 	bl	80082b6 <vListInsert>
}
 8009d70:	e010      	b.n	8009d94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d72:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f7fe fa99 	bl	80082b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d84:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d202      	bcs.n	8009d94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d8e:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6013      	str	r3, [r2, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	2000127c 	.word	0x2000127c
 8009da0:	20000da4 	.word	0x20000da4
 8009da4:	20001264 	.word	0x20001264
 8009da8:	20001234 	.word	0x20001234
 8009dac:	20001230 	.word	0x20001230
 8009db0:	20001298 	.word	0x20001298

08009db4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dbe:	f000 fb07 	bl	800a3d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <xTimerCreateTimerTask+0x80>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d021      	beq.n	8009e0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009dd2:	1d3a      	adds	r2, r7, #4
 8009dd4:	f107 0108 	add.w	r1, r7, #8
 8009dd8:	f107 030c 	add.w	r3, r7, #12
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe f9ff 	bl	80081e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	9202      	str	r2, [sp, #8]
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	2302      	movs	r3, #2
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	2300      	movs	r3, #0
 8009df2:	460a      	mov	r2, r1
 8009df4:	4910      	ldr	r1, [pc, #64]	; (8009e38 <xTimerCreateTimerTask+0x84>)
 8009df6:	4811      	ldr	r0, [pc, #68]	; (8009e3c <xTimerCreateTimerTask+0x88>)
 8009df8:	f7ff f8a2 	bl	8008f40 <xTaskCreateStatic>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	4a10      	ldr	r2, [pc, #64]	; (8009e40 <xTimerCreateTimerTask+0x8c>)
 8009e00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e02:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <xTimerCreateTimerTask+0x8c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	613b      	str	r3, [r7, #16]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e2a:	697b      	ldr	r3, [r7, #20]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	200012d4 	.word	0x200012d4
 8009e38:	0800f67c 	.word	0x0800f67c
 8009e3c:	08009f79 	.word	0x08009f79
 8009e40:	200012d8 	.word	0x200012d8

08009e44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08a      	sub	sp, #40	; 0x28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e72:	4b1a      	ldr	r3, [pc, #104]	; (8009edc <xTimerGenericCommand+0x98>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d02a      	beq.n	8009ed0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	dc18      	bgt.n	8009ebe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e8c:	f7ff feb2 	bl	8009bf4 <xTaskGetSchedulerState>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d109      	bne.n	8009eaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <xTimerGenericCommand+0x98>)
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	f107 0110 	add.w	r1, r7, #16
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea2:	f7fe fba9 	bl	80085f8 <xQueueGenericSend>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ea8:	e012      	b.n	8009ed0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <xTimerGenericCommand+0x98>)
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f107 0110 	add.w	r1, r7, #16
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f7fe fb9f 	bl	80085f8 <xQueueGenericSend>
 8009eba:	6278      	str	r0, [r7, #36]	; 0x24
 8009ebc:	e008      	b.n	8009ed0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ebe:	4b07      	ldr	r3, [pc, #28]	; (8009edc <xTimerGenericCommand+0x98>)
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f107 0110 	add.w	r1, r7, #16
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	f7fe fc93 	bl	80087f4 <xQueueGenericSendFromISR>
 8009ece:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3728      	adds	r7, #40	; 0x28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200012d4 	.word	0x200012d4

08009ee0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eea:	4b22      	ldr	r3, [pc, #136]	; (8009f74 <prvProcessExpiredTimer+0x94>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe fa15 	bl	8008328 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d022      	beq.n	8009f52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	18d1      	adds	r1, r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f000 f8d1 	bl	800a0c0 <prvInsertTimerInActiveList>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01f      	beq.n	8009f64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f24:	2300      	movs	r3, #0
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6978      	ldr	r0, [r7, #20]
 8009f30:	f7ff ff88 	bl	8009e44 <xTimerGenericCommand>
 8009f34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d113      	bne.n	8009f64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	60fb      	str	r3, [r7, #12]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f58:	f023 0301 	bic.w	r3, r3, #1
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	6978      	ldr	r0, [r7, #20]
 8009f6a:	4798      	blx	r3
}
 8009f6c:	bf00      	nop
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	200012cc 	.word	0x200012cc

08009f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 f857 	bl	800a038 <prvGetNextExpireTime>
 8009f8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f803 	bl	8009f9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f96:	f000 f8d5 	bl	800a144 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f9a:	e7f1      	b.n	8009f80 <prvTimerTask+0x8>

08009f9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fa6:	f7ff fa27 	bl	80093f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f866 	bl	800a080 <prvSampleTimeNow>
 8009fb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d130      	bne.n	800a01e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <prvProcessTimerOrBlockTask+0x3c>
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d806      	bhi.n	8009fd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fca:	f7ff fa23 	bl	8009414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff85 	bl	8009ee0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fd6:	e024      	b.n	800a022 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d008      	beq.n	8009ff0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <prvProcessTimerOrBlockTask+0x90>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <prvProcessTimerOrBlockTask+0x50>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <prvProcessTimerOrBlockTask+0x52>
 8009fec:	2300      	movs	r3, #0
 8009fee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <prvProcessTimerOrBlockTask+0x94>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	f7fe ff6b 	bl	8008ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a002:	f7ff fa07 	bl	8009414 <xTaskResumeAll>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <prvProcessTimerOrBlockTask+0x98>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
}
 800a01c:	e001      	b.n	800a022 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a01e:	f7ff f9f9 	bl	8009414 <xTaskResumeAll>
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200012d0 	.word	0x200012d0
 800a030:	200012d4 	.word	0x200012d4
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a040:	4b0e      	ldr	r3, [pc, #56]	; (800a07c <prvGetNextExpireTime+0x44>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <prvGetNextExpireTime+0x16>
 800a04a:	2201      	movs	r2, #1
 800a04c:	e000      	b.n	800a050 <prvGetNextExpireTime+0x18>
 800a04e:	2200      	movs	r2, #0
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <prvGetNextExpireTime+0x44>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e001      	b.n	800a06c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a06c:	68fb      	ldr	r3, [r7, #12]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	200012cc 	.word	0x200012cc

0800a080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a088:	f7ff fa62 	bl	8009550 <xTaskGetTickCount>
 800a08c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a08e:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <prvSampleTimeNow+0x3c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	429a      	cmp	r2, r3
 800a096:	d205      	bcs.n	800a0a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a098:	f000 f936 	bl	800a308 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0aa:	4a04      	ldr	r2, [pc, #16]	; (800a0bc <prvSampleTimeNow+0x3c>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200012dc 	.word	0x200012dc

0800a0c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d812      	bhi.n	800a10c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d302      	bcc.n	800a0fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e01b      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <prvInsertTimerInActiveList+0x7c>)
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3304      	adds	r3, #4
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7fe f8d6 	bl	80082b6 <vListInsert>
 800a10a:	e012      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d206      	bcs.n	800a122 <prvInsertTimerInActiveList+0x62>
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d302      	bcc.n	800a122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e007      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a122:	4b07      	ldr	r3, [pc, #28]	; (800a140 <prvInsertTimerInActiveList+0x80>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7fe f8c2 	bl	80082b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a132:	697b      	ldr	r3, [r7, #20]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	200012d0 	.word	0x200012d0
 800a140:	200012cc 	.word	0x200012cc

0800a144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	; 0x38
 800a148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a14a:	e0ca      	b.n	800a2e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da18      	bge.n	800a184 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a152:	1d3b      	adds	r3, r7, #4
 800a154:	3304      	adds	r3, #4
 800a156:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	61fb      	str	r3, [r7, #28]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a17a:	6850      	ldr	r0, [r2, #4]
 800a17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a17e:	6892      	ldr	r2, [r2, #8]
 800a180:	4611      	mov	r1, r2
 800a182:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f2c0 80ab 	blt.w	800a2e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe f8c3 	bl	8008328 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff ff6b 	bl	800a080 <prvSampleTimeNow>
 800a1aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b09      	cmp	r3, #9
 800a1b0:	f200 8096 	bhi.w	800a2e0 <prvProcessReceivedCommands+0x19c>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <prvProcessReceivedCommands+0x78>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a1e5 	.word	0x0800a1e5
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1e5 	.word	0x0800a1e5
 800a1c8:	0800a259 	.word	0x0800a259
 800a1cc:	0800a26d 	.word	0x0800a26d
 800a1d0:	0800a2b7 	.word	0x0800a2b7
 800a1d4:	0800a1e5 	.word	0x0800a1e5
 800a1d8:	0800a1e5 	.word	0x0800a1e5
 800a1dc:	0800a259 	.word	0x0800a259
 800a1e0:	0800a26d 	.word	0x0800a26d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ea:	f043 0301 	orr.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	18d1      	adds	r1, r2, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a204:	f7ff ff5c 	bl	800a0c0 <prvInsertTimerInActiveList>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d069      	beq.n	800a2e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a214:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d05e      	beq.n	800a2e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	441a      	add	r2, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2300      	movs	r3, #0
 800a232:	2100      	movs	r1, #0
 800a234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a236:	f7ff fe05 	bl	8009e44 <xTimerGenericCommand>
 800a23a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d14f      	bne.n	800a2e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	61bb      	str	r3, [r7, #24]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a26a:	e03a      	b.n	800a2e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	617b      	str	r3, [r7, #20]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	699a      	ldr	r2, [r3, #24]
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	18d1      	adds	r1, r2, r3
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b0:	f7ff ff06 	bl	800a0c0 <prvInsertTimerInActiveList>
					break;
 800a2b4:	e015      	b.n	800a2e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c6:	f000 fbdb 	bl	800aa80 <vPortFree>
 800a2ca:	e00a      	b.n	800a2e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d2:	f023 0301 	bic.w	r3, r3, #1
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2de:	e000      	b.n	800a2e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a2e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2e2:	4b08      	ldr	r3, [pc, #32]	; (800a304 <prvProcessReceivedCommands+0x1c0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	1d39      	adds	r1, r7, #4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fb1e 	bl	800892c <xQueueReceive>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f47f af2a 	bne.w	800a14c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	3730      	adds	r7, #48	; 0x30
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200012d4 	.word	0x200012d4

0800a308 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a30e:	e048      	b.n	800a3a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a310:	4b2d      	ldr	r3, [pc, #180]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31a:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fffd 	bl	8008328 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d02e      	beq.n	800a3a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4413      	add	r3, r2
 800a34c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	429a      	cmp	r2, r3
 800a354:	d90e      	bls.n	800a374 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a362:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3304      	adds	r3, #4
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f7fd ffa2 	bl	80082b6 <vListInsert>
 800a372:	e016      	b.n	800a3a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a374:	2300      	movs	r3, #0
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2300      	movs	r3, #0
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	2100      	movs	r1, #0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fd60 	bl	8009e44 <xTimerGenericCommand>
 800a384:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	603b      	str	r3, [r7, #0]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1b1      	bne.n	800a310 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <prvSwitchTimerLists+0xc4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a04      	ldr	r2, [pc, #16]	; (800a3c8 <prvSwitchTimerLists+0xc0>)
 800a3b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3ba:	4a04      	ldr	r2, [pc, #16]	; (800a3cc <prvSwitchTimerLists+0xc4>)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6013      	str	r3, [r2, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	200012cc 	.word	0x200012cc
 800a3cc:	200012d0 	.word	0x200012d0

0800a3d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3d6:	f000 f965 	bl	800a6a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3da:	4b15      	ldr	r3, [pc, #84]	; (800a430 <prvCheckForValidListAndQueue+0x60>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d120      	bne.n	800a424 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3e2:	4814      	ldr	r0, [pc, #80]	; (800a434 <prvCheckForValidListAndQueue+0x64>)
 800a3e4:	f7fd ff16 	bl	8008214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3e8:	4813      	ldr	r0, [pc, #76]	; (800a438 <prvCheckForValidListAndQueue+0x68>)
 800a3ea:	f7fd ff13 	bl	8008214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <prvCheckForValidListAndQueue+0x6c>)
 800a3f0:	4a10      	ldr	r2, [pc, #64]	; (800a434 <prvCheckForValidListAndQueue+0x64>)
 800a3f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3f4:	4b12      	ldr	r3, [pc, #72]	; (800a440 <prvCheckForValidListAndQueue+0x70>)
 800a3f6:	4a10      	ldr	r2, [pc, #64]	; (800a438 <prvCheckForValidListAndQueue+0x68>)
 800a3f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4b11      	ldr	r3, [pc, #68]	; (800a444 <prvCheckForValidListAndQueue+0x74>)
 800a400:	4a11      	ldr	r2, [pc, #68]	; (800a448 <prvCheckForValidListAndQueue+0x78>)
 800a402:	2110      	movs	r1, #16
 800a404:	200a      	movs	r0, #10
 800a406:	f7fe f821 	bl	800844c <xQueueGenericCreateStatic>
 800a40a:	4603      	mov	r3, r0
 800a40c:	4a08      	ldr	r2, [pc, #32]	; (800a430 <prvCheckForValidListAndQueue+0x60>)
 800a40e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <prvCheckForValidListAndQueue+0x60>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <prvCheckForValidListAndQueue+0x60>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	490b      	ldr	r1, [pc, #44]	; (800a44c <prvCheckForValidListAndQueue+0x7c>)
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fd30 	bl	8008e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a424:	f000 f96e 	bl	800a704 <vPortExitCritical>
}
 800a428:	bf00      	nop
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	200012d4 	.word	0x200012d4
 800a434:	200012a4 	.word	0x200012a4
 800a438:	200012b8 	.word	0x200012b8
 800a43c:	200012cc 	.word	0x200012cc
 800a440:	200012d0 	.word	0x200012d0
 800a444:	20001380 	.word	0x20001380
 800a448:	200012e0 	.word	0x200012e0
 800a44c:	0800f684 	.word	0x0800f684

0800a450 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3b04      	subs	r3, #4
 800a460:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3b04      	subs	r3, #4
 800a46e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f023 0201 	bic.w	r2, r3, #1
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3b04      	subs	r3, #4
 800a47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a480:	4a0c      	ldr	r2, [pc, #48]	; (800a4b4 <pxPortInitialiseStack+0x64>)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3b14      	subs	r3, #20
 800a48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3b04      	subs	r3, #4
 800a496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f06f 0202 	mvn.w	r2, #2
 800a49e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3b20      	subs	r3, #32
 800a4a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	0800a4b9 	.word	0x0800a4b9

0800a4b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4c2:	4b12      	ldr	r3, [pc, #72]	; (800a50c <prvTaskExitError+0x54>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ca:	d00a      	beq.n	800a4e2 <prvTaskExitError+0x2a>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60fb      	str	r3, [r7, #12]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <prvTaskExitError+0x28>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	60bb      	str	r3, [r7, #8]
}
 800a4f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4f6:	bf00      	nop
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0fc      	beq.n	800a4f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	2000000c 	.word	0x2000000c

0800a510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a510:	4b07      	ldr	r3, [pc, #28]	; (800a530 <pxCurrentTCBConst2>)
 800a512:	6819      	ldr	r1, [r3, #0]
 800a514:	6808      	ldr	r0, [r1, #0]
 800a516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	f380 8809 	msr	PSP, r0
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f380 8811 	msr	BASEPRI, r0
 800a52a:	4770      	bx	lr
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst2>:
 800a530:	20000da4 	.word	0x20000da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a538:	4808      	ldr	r0, [pc, #32]	; (800a55c <prvPortStartFirstTask+0x24>)
 800a53a:	6800      	ldr	r0, [r0, #0]
 800a53c:	6800      	ldr	r0, [r0, #0]
 800a53e:	f380 8808 	msr	MSP, r0
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8814 	msr	CONTROL, r0
 800a54a:	b662      	cpsie	i
 800a54c:	b661      	cpsie	f
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	df00      	svc	0
 800a558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a55a:	bf00      	nop
 800a55c:	e000ed08 	.word	0xe000ed08

0800a560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a566:	4b46      	ldr	r3, [pc, #280]	; (800a680 <xPortStartScheduler+0x120>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a46      	ldr	r2, [pc, #280]	; (800a684 <xPortStartScheduler+0x124>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d10a      	bne.n	800a586 <xPortStartScheduler+0x26>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	613b      	str	r3, [r7, #16]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a586:	4b3e      	ldr	r3, [pc, #248]	; (800a680 <xPortStartScheduler+0x120>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a3f      	ldr	r2, [pc, #252]	; (800a688 <xPortStartScheduler+0x128>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10a      	bne.n	800a5a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60fb      	str	r3, [r7, #12]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <xPortStartScheduler+0x12c>)
 800a5a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	22ff      	movs	r2, #255	; 0xff
 800a5b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	4b31      	ldr	r3, [pc, #196]	; (800a690 <xPortStartScheduler+0x130>)
 800a5cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <xPortStartScheduler+0x134>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5d4:	e009      	b.n	800a5ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5d6:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <xPortStartScheduler+0x134>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	4a2d      	ldr	r2, [pc, #180]	; (800a694 <xPortStartScheduler+0x134>)
 800a5de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d0ef      	beq.n	800a5d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5f6:	4b27      	ldr	r3, [pc, #156]	; (800a694 <xPortStartScheduler+0x134>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f1c3 0307 	rsb	r3, r3, #7
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d00a      	beq.n	800a618 <xPortStartScheduler+0xb8>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	60bb      	str	r3, [r7, #8]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a618:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <xPortStartScheduler+0x134>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <xPortStartScheduler+0x134>)
 800a620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a622:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <xPortStartScheduler+0x134>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a62a:	4a1a      	ldr	r2, [pc, #104]	; (800a694 <xPortStartScheduler+0x134>)
 800a62c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	b2da      	uxtb	r2, r3
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a636:	4b18      	ldr	r3, [pc, #96]	; (800a698 <xPortStartScheduler+0x138>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a17      	ldr	r2, [pc, #92]	; (800a698 <xPortStartScheduler+0x138>)
 800a63c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <xPortStartScheduler+0x138>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a14      	ldr	r2, [pc, #80]	; (800a698 <xPortStartScheduler+0x138>)
 800a648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a64c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a64e:	f000 f8dd 	bl	800a80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a652:	4b12      	ldr	r3, [pc, #72]	; (800a69c <xPortStartScheduler+0x13c>)
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a658:	f000 f8fc 	bl	800a854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a65c:	4b10      	ldr	r3, [pc, #64]	; (800a6a0 <xPortStartScheduler+0x140>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a0f      	ldr	r2, [pc, #60]	; (800a6a0 <xPortStartScheduler+0x140>)
 800a662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a668:	f7ff ff66 	bl	800a538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a66c:	f7ff f84c 	bl	8009708 <vTaskSwitchContext>
	prvTaskExitError();
 800a670:	f7ff ff22 	bl	800a4b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	e000ed00 	.word	0xe000ed00
 800a684:	410fc271 	.word	0x410fc271
 800a688:	410fc270 	.word	0x410fc270
 800a68c:	e000e400 	.word	0xe000e400
 800a690:	200013d0 	.word	0x200013d0
 800a694:	200013d4 	.word	0x200013d4
 800a698:	e000ed20 	.word	0xe000ed20
 800a69c:	2000000c 	.word	0x2000000c
 800a6a0:	e000ef34 	.word	0xe000ef34

0800a6a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	607b      	str	r3, [r7, #4]
}
 800a6bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6be:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <vPortEnterCritical+0x58>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <vPortEnterCritical+0x58>)
 800a6c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6c8:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <vPortEnterCritical+0x58>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d10f      	bne.n	800a6f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6d0:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <vPortEnterCritical+0x5c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	603b      	str	r3, [r7, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <vPortEnterCritical+0x4a>
	}
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	2000000c 	.word	0x2000000c
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a70a:	4b12      	ldr	r3, [pc, #72]	; (800a754 <vPortExitCritical+0x50>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <vPortExitCritical+0x24>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	607b      	str	r3, [r7, #4]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <vPortExitCritical+0x50>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	4a09      	ldr	r2, [pc, #36]	; (800a754 <vPortExitCritical+0x50>)
 800a730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a732:	4b08      	ldr	r3, [pc, #32]	; (800a754 <vPortExitCritical+0x50>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d105      	bne.n	800a746 <vPortExitCritical+0x42>
 800a73a:	2300      	movs	r3, #0
 800a73c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	f383 8811 	msr	BASEPRI, r3
}
 800a744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	2000000c 	.word	0x2000000c
	...

0800a760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a760:	f3ef 8009 	mrs	r0, PSP
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	4b15      	ldr	r3, [pc, #84]	; (800a7c0 <pxCurrentTCBConst>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	f01e 0f10 	tst.w	lr, #16
 800a770:	bf08      	it	eq
 800a772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	6010      	str	r0, [r2, #0]
 800a77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a784:	f380 8811 	msr	BASEPRI, r0
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f7fe ffba 	bl	8009708 <vTaskSwitchContext>
 800a794:	f04f 0000 	mov.w	r0, #0
 800a798:	f380 8811 	msr	BASEPRI, r0
 800a79c:	bc09      	pop	{r0, r3}
 800a79e:	6819      	ldr	r1, [r3, #0]
 800a7a0:	6808      	ldr	r0, [r1, #0]
 800a7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a6:	f01e 0f10 	tst.w	lr, #16
 800a7aa:	bf08      	it	eq
 800a7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7b0:	f380 8809 	msr	PSP, r0
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst>:
 800a7c0:	20000da4 	.word	0x20000da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	607b      	str	r3, [r7, #4]
}
 800a7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7e2:	f7fe fed7 	bl	8009594 <xTaskIncrementTick>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7ec:	4b06      	ldr	r3, [pc, #24]	; (800a808 <xPortSysTickHandler+0x40>)
 800a7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f383 8811 	msr	BASEPRI, r3
}
 800a7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <vPortSetupTimerInterrupt+0x34>)
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <vPortSetupTimerInterrupt+0x38>)
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <vPortSetupTimerInterrupt+0x3c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <vPortSetupTimerInterrupt+0x40>)
 800a822:	fba2 2303 	umull	r2, r3, r2, r3
 800a826:	099b      	lsrs	r3, r3, #6
 800a828:	4a09      	ldr	r2, [pc, #36]	; (800a850 <vPortSetupTimerInterrupt+0x44>)
 800a82a:	3b01      	subs	r3, #1
 800a82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a82e:	4b04      	ldr	r3, [pc, #16]	; (800a840 <vPortSetupTimerInterrupt+0x34>)
 800a830:	2207      	movs	r2, #7
 800a832:	601a      	str	r2, [r3, #0]
}
 800a834:	bf00      	nop
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	e000e010 	.word	0xe000e010
 800a844:	e000e018 	.word	0xe000e018
 800a848:	20000000 	.word	0x20000000
 800a84c:	10624dd3 	.word	0x10624dd3
 800a850:	e000e014 	.word	0xe000e014

0800a854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a864 <vPortEnableVFP+0x10>
 800a858:	6801      	ldr	r1, [r0, #0]
 800a85a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a85e:	6001      	str	r1, [r0, #0]
 800a860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a862:	bf00      	nop
 800a864:	e000ed88 	.word	0xe000ed88

0800a868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a86e:	f3ef 8305 	mrs	r3, IPSR
 800a872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b0f      	cmp	r3, #15
 800a878:	d914      	bls.n	800a8a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a87a:	4a17      	ldr	r2, [pc, #92]	; (800a8d8 <vPortValidateInterruptPriority+0x70>)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a884:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <vPortValidateInterruptPriority+0x74>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	7afa      	ldrb	r2, [r7, #11]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d20a      	bcs.n	800a8a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	607b      	str	r3, [r7, #4]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <vPortValidateInterruptPriority+0x78>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <vPortValidateInterruptPriority+0x7c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d90a      	bls.n	800a8ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	603b      	str	r3, [r7, #0]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <vPortValidateInterruptPriority+0x60>
	}
 800a8ca:	bf00      	nop
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	e000e3f0 	.word	0xe000e3f0
 800a8dc:	200013d0 	.word	0x200013d0
 800a8e0:	e000ed0c 	.word	0xe000ed0c
 800a8e4:	200013d4 	.word	0x200013d4

0800a8e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8f4:	f7fe fd80 	bl	80093f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8f8:	4b5b      	ldr	r3, [pc, #364]	; (800aa68 <pvPortMalloc+0x180>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a900:	f000 f920 	bl	800ab44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a904:	4b59      	ldr	r3, [pc, #356]	; (800aa6c <pvPortMalloc+0x184>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 8093 	bne.w	800aa38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01d      	beq.n	800a954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a918:	2208      	movs	r2, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b00      	cmp	r3, #0
 800a928:	d014      	beq.n	800a954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f023 0307 	bic.w	r3, r3, #7
 800a930:	3308      	adds	r3, #8
 800a932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <pvPortMalloc+0x6c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	617b      	str	r3, [r7, #20]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d06e      	beq.n	800aa38 <pvPortMalloc+0x150>
 800a95a:	4b45      	ldr	r3, [pc, #276]	; (800aa70 <pvPortMalloc+0x188>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d869      	bhi.n	800aa38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a964:	4b43      	ldr	r3, [pc, #268]	; (800aa74 <pvPortMalloc+0x18c>)
 800a966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a968:	4b42      	ldr	r3, [pc, #264]	; (800aa74 <pvPortMalloc+0x18c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a96e:	e004      	b.n	800a97a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d903      	bls.n	800a98c <pvPortMalloc+0xa4>
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1f1      	bne.n	800a970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a98c:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <pvPortMalloc+0x180>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a992:	429a      	cmp	r2, r3
 800a994:	d050      	beq.n	800aa38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2208      	movs	r2, #8
 800a99c:	4413      	add	r3, r2
 800a99e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d91f      	bls.n	800a9f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f003 0307 	and.w	r3, r3, #7
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	613b      	str	r3, [r7, #16]
}
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	1ad2      	subs	r2, r2, r3
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9f2:	69b8      	ldr	r0, [r7, #24]
 800a9f4:	f000 f908 	bl	800ac08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9f8:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <pvPortMalloc+0x188>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <pvPortMalloc+0x188>)
 800aa04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa06:	4b1a      	ldr	r3, [pc, #104]	; (800aa70 <pvPortMalloc+0x188>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <pvPortMalloc+0x190>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d203      	bcs.n	800aa1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa12:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <pvPortMalloc+0x188>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <pvPortMalloc+0x190>)
 800aa18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <pvPortMalloc+0x184>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	431a      	orrs	r2, r3
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <pvPortMalloc+0x194>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <pvPortMalloc+0x194>)
 800aa36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa38:	f7fe fcec 	bl	8009414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <pvPortMalloc+0x174>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	60fb      	str	r3, [r7, #12]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <pvPortMalloc+0x172>
	return pvReturn;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3728      	adds	r7, #40	; 0x28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20006070 	.word	0x20006070
 800aa6c:	20006084 	.word	0x20006084
 800aa70:	20006074 	.word	0x20006074
 800aa74:	20006068 	.word	0x20006068
 800aa78:	20006078 	.word	0x20006078
 800aa7c:	2000607c 	.word	0x2000607c

0800aa80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d04d      	beq.n	800ab2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa92:	2308      	movs	r3, #8
 800aa94:	425b      	negs	r3, r3
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	4b24      	ldr	r3, [pc, #144]	; (800ab38 <vPortFree+0xb8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <vPortFree+0x44>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60fb      	str	r3, [r7, #12]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00a      	beq.n	800aae2 <vPortFree+0x62>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60bb      	str	r3, [r7, #8]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <vPortFree+0xb8>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4013      	ands	r3, r2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01e      	beq.n	800ab2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11a      	bne.n	800ab2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <vPortFree+0xb8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	43db      	mvns	r3, r3
 800ab02:	401a      	ands	r2, r3
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab08:	f7fe fc76 	bl	80093f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <vPortFree+0xbc>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4413      	add	r3, r2
 800ab16:	4a09      	ldr	r2, [pc, #36]	; (800ab3c <vPortFree+0xbc>)
 800ab18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab1a:	6938      	ldr	r0, [r7, #16]
 800ab1c:	f000 f874 	bl	800ac08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <vPortFree+0xc0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3301      	adds	r3, #1
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <vPortFree+0xc0>)
 800ab28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab2a:	f7fe fc73 	bl	8009414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab2e:	bf00      	nop
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20006084 	.word	0x20006084
 800ab3c:	20006074 	.word	0x20006074
 800ab40:	20006080 	.word	0x20006080

0800ab44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab4a:	f644 4390 	movw	r3, #19600	; 0x4c90
 800ab4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab50:	4b27      	ldr	r3, [pc, #156]	; (800abf0 <prvHeapInit+0xac>)
 800ab52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00c      	beq.n	800ab78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	4a1f      	ldr	r2, [pc, #124]	; (800abf0 <prvHeapInit+0xac>)
 800ab74:	4413      	add	r3, r2
 800ab76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab7c:	4a1d      	ldr	r2, [pc, #116]	; (800abf4 <prvHeapInit+0xb0>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab82:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <prvHeapInit+0xb0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab90:	2208      	movs	r2, #8
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a15      	ldr	r2, [pc, #84]	; (800abf8 <prvHeapInit+0xb4>)
 800aba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aba6:	4b14      	ldr	r3, [pc, #80]	; (800abf8 <prvHeapInit+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2200      	movs	r2, #0
 800abac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abae:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <prvHeapInit+0xb4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abc4:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <prvHeapInit+0xb4>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	; (800abfc <prvHeapInit+0xb8>)
 800abd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <prvHeapInit+0xbc>)
 800abda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abdc:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <prvHeapInit+0xc0>)
 800abde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200013d8 	.word	0x200013d8
 800abf4:	20006068 	.word	0x20006068
 800abf8:	20006070 	.word	0x20006070
 800abfc:	20006078 	.word	0x20006078
 800ac00:	20006074 	.word	0x20006074
 800ac04:	20006084 	.word	0x20006084

0800ac08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <prvInsertBlockIntoFreeList+0xac>)
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	e002      	b.n	800ac1c <prvInsertBlockIntoFreeList+0x14>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d8f7      	bhi.n	800ac16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4413      	add	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d108      	bne.n	800ac4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	441a      	add	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	441a      	add	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d118      	bne.n	800ac90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d00d      	beq.n	800ac86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	441a      	add	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	e008      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac86:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e003      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d002      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	20006068 	.word	0x20006068
 800acb8:	20006070 	.word	0x20006070

0800acbc <__cvt>:
 800acbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	ec55 4b10 	vmov	r4, r5, d0
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	460e      	mov	r6, r1
 800acc8:	4619      	mov	r1, r3
 800acca:	462b      	mov	r3, r5
 800accc:	bfbb      	ittet	lt
 800acce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acd2:	461d      	movlt	r5, r3
 800acd4:	2300      	movge	r3, #0
 800acd6:	232d      	movlt	r3, #45	; 0x2d
 800acd8:	700b      	strb	r3, [r1, #0]
 800acda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ace0:	4691      	mov	r9, r2
 800ace2:	f023 0820 	bic.w	r8, r3, #32
 800ace6:	bfbc      	itt	lt
 800ace8:	4622      	movlt	r2, r4
 800acea:	4614      	movlt	r4, r2
 800acec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acf0:	d005      	beq.n	800acfe <__cvt+0x42>
 800acf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acf6:	d100      	bne.n	800acfa <__cvt+0x3e>
 800acf8:	3601      	adds	r6, #1
 800acfa:	2102      	movs	r1, #2
 800acfc:	e000      	b.n	800ad00 <__cvt+0x44>
 800acfe:	2103      	movs	r1, #3
 800ad00:	ab03      	add	r3, sp, #12
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	ab02      	add	r3, sp, #8
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	ec45 4b10 	vmov	d0, r4, r5
 800ad0c:	4653      	mov	r3, sl
 800ad0e:	4632      	mov	r2, r6
 800ad10:	f001 f8ce 	bl	800beb0 <_dtoa_r>
 800ad14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad18:	4607      	mov	r7, r0
 800ad1a:	d102      	bne.n	800ad22 <__cvt+0x66>
 800ad1c:	f019 0f01 	tst.w	r9, #1
 800ad20:	d022      	beq.n	800ad68 <__cvt+0xac>
 800ad22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad26:	eb07 0906 	add.w	r9, r7, r6
 800ad2a:	d110      	bne.n	800ad4e <__cvt+0x92>
 800ad2c:	783b      	ldrb	r3, [r7, #0]
 800ad2e:	2b30      	cmp	r3, #48	; 0x30
 800ad30:	d10a      	bne.n	800ad48 <__cvt+0x8c>
 800ad32:	2200      	movs	r2, #0
 800ad34:	2300      	movs	r3, #0
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f7f5 fecd 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad3e:	b918      	cbnz	r0, 800ad48 <__cvt+0x8c>
 800ad40:	f1c6 0601 	rsb	r6, r6, #1
 800ad44:	f8ca 6000 	str.w	r6, [sl]
 800ad48:	f8da 3000 	ldr.w	r3, [sl]
 800ad4c:	4499      	add	r9, r3
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2300      	movs	r3, #0
 800ad52:	4620      	mov	r0, r4
 800ad54:	4629      	mov	r1, r5
 800ad56:	f7f5 febf 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad5a:	b108      	cbz	r0, 800ad60 <__cvt+0xa4>
 800ad5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad60:	2230      	movs	r2, #48	; 0x30
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	454b      	cmp	r3, r9
 800ad66:	d307      	bcc.n	800ad78 <__cvt+0xbc>
 800ad68:	9b03      	ldr	r3, [sp, #12]
 800ad6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad6c:	1bdb      	subs	r3, r3, r7
 800ad6e:	4638      	mov	r0, r7
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	b004      	add	sp, #16
 800ad74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad78:	1c59      	adds	r1, r3, #1
 800ad7a:	9103      	str	r1, [sp, #12]
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	e7f0      	b.n	800ad62 <__cvt+0xa6>

0800ad80 <__exponent>:
 800ad80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad82:	4603      	mov	r3, r0
 800ad84:	2900      	cmp	r1, #0
 800ad86:	bfb8      	it	lt
 800ad88:	4249      	neglt	r1, r1
 800ad8a:	f803 2b02 	strb.w	r2, [r3], #2
 800ad8e:	bfb4      	ite	lt
 800ad90:	222d      	movlt	r2, #45	; 0x2d
 800ad92:	222b      	movge	r2, #43	; 0x2b
 800ad94:	2909      	cmp	r1, #9
 800ad96:	7042      	strb	r2, [r0, #1]
 800ad98:	dd2a      	ble.n	800adf0 <__exponent+0x70>
 800ad9a:	f10d 0207 	add.w	r2, sp, #7
 800ad9e:	4617      	mov	r7, r2
 800ada0:	260a      	movs	r6, #10
 800ada2:	4694      	mov	ip, r2
 800ada4:	fb91 f5f6 	sdiv	r5, r1, r6
 800ada8:	fb06 1415 	mls	r4, r6, r5, r1
 800adac:	3430      	adds	r4, #48	; 0x30
 800adae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800adb2:	460c      	mov	r4, r1
 800adb4:	2c63      	cmp	r4, #99	; 0x63
 800adb6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800adba:	4629      	mov	r1, r5
 800adbc:	dcf1      	bgt.n	800ada2 <__exponent+0x22>
 800adbe:	3130      	adds	r1, #48	; 0x30
 800adc0:	f1ac 0402 	sub.w	r4, ip, #2
 800adc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800adc8:	1c41      	adds	r1, r0, #1
 800adca:	4622      	mov	r2, r4
 800adcc:	42ba      	cmp	r2, r7
 800adce:	d30a      	bcc.n	800ade6 <__exponent+0x66>
 800add0:	f10d 0209 	add.w	r2, sp, #9
 800add4:	eba2 020c 	sub.w	r2, r2, ip
 800add8:	42bc      	cmp	r4, r7
 800adda:	bf88      	it	hi
 800addc:	2200      	movhi	r2, #0
 800adde:	4413      	add	r3, r2
 800ade0:	1a18      	subs	r0, r3, r0
 800ade2:	b003      	add	sp, #12
 800ade4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800adea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800adee:	e7ed      	b.n	800adcc <__exponent+0x4c>
 800adf0:	2330      	movs	r3, #48	; 0x30
 800adf2:	3130      	adds	r1, #48	; 0x30
 800adf4:	7083      	strb	r3, [r0, #2]
 800adf6:	70c1      	strb	r1, [r0, #3]
 800adf8:	1d03      	adds	r3, r0, #4
 800adfa:	e7f1      	b.n	800ade0 <__exponent+0x60>

0800adfc <_printf_float>:
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	ed2d 8b02 	vpush	{d8}
 800ae04:	b08d      	sub	sp, #52	; 0x34
 800ae06:	460c      	mov	r4, r1
 800ae08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	461f      	mov	r7, r3
 800ae10:	4605      	mov	r5, r0
 800ae12:	f000 fee5 	bl	800bbe0 <_localeconv_r>
 800ae16:	f8d0 a000 	ldr.w	sl, [r0]
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	f7f5 fa30 	bl	8000280 <strlen>
 800ae20:	2300      	movs	r3, #0
 800ae22:	930a      	str	r3, [sp, #40]	; 0x28
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae30:	3307      	adds	r3, #7
 800ae32:	f023 0307 	bic.w	r3, r3, #7
 800ae36:	f103 0208 	add.w	r2, r3, #8
 800ae3a:	f8c8 2000 	str.w	r2, [r8]
 800ae3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae4c:	ee08 0a10 	vmov	s16, r0
 800ae50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ae54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae58:	4b9e      	ldr	r3, [pc, #632]	; (800b0d4 <_printf_float+0x2d8>)
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae5e:	f7f5 fe6d 	bl	8000b3c <__aeabi_dcmpun>
 800ae62:	bb88      	cbnz	r0, 800aec8 <_printf_float+0xcc>
 800ae64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae68:	4b9a      	ldr	r3, [pc, #616]	; (800b0d4 <_printf_float+0x2d8>)
 800ae6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae6e:	f7f5 fe47 	bl	8000b00 <__aeabi_dcmple>
 800ae72:	bb48      	cbnz	r0, 800aec8 <_printf_float+0xcc>
 800ae74:	2200      	movs	r2, #0
 800ae76:	2300      	movs	r3, #0
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7f5 fe36 	bl	8000aec <__aeabi_dcmplt>
 800ae80:	b110      	cbz	r0, 800ae88 <_printf_float+0x8c>
 800ae82:	232d      	movs	r3, #45	; 0x2d
 800ae84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae88:	4a93      	ldr	r2, [pc, #588]	; (800b0d8 <_printf_float+0x2dc>)
 800ae8a:	4b94      	ldr	r3, [pc, #592]	; (800b0dc <_printf_float+0x2e0>)
 800ae8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae90:	bf94      	ite	ls
 800ae92:	4690      	movls	r8, r2
 800ae94:	4698      	movhi	r8, r3
 800ae96:	2303      	movs	r3, #3
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	9b05      	ldr	r3, [sp, #20]
 800ae9c:	f023 0304 	bic.w	r3, r3, #4
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	9700      	str	r7, [sp, #0]
 800aea8:	4633      	mov	r3, r6
 800aeaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800aeac:	4621      	mov	r1, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 f9da 	bl	800b268 <_printf_common>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f040 8090 	bne.w	800afda <_printf_float+0x1de>
 800aeba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aebe:	b00d      	add	sp, #52	; 0x34
 800aec0:	ecbd 8b02 	vpop	{d8}
 800aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 fe34 	bl	8000b3c <__aeabi_dcmpun>
 800aed4:	b140      	cbz	r0, 800aee8 <_printf_float+0xec>
 800aed6:	464b      	mov	r3, r9
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bfbc      	itt	lt
 800aedc:	232d      	movlt	r3, #45	; 0x2d
 800aede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aee2:	4a7f      	ldr	r2, [pc, #508]	; (800b0e0 <_printf_float+0x2e4>)
 800aee4:	4b7f      	ldr	r3, [pc, #508]	; (800b0e4 <_printf_float+0x2e8>)
 800aee6:	e7d1      	b.n	800ae8c <_printf_float+0x90>
 800aee8:	6863      	ldr	r3, [r4, #4]
 800aeea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	d13f      	bne.n	800af74 <_printf_float+0x178>
 800aef4:	2306      	movs	r3, #6
 800aef6:	6063      	str	r3, [r4, #4]
 800aef8:	9b05      	ldr	r3, [sp, #20]
 800aefa:	6861      	ldr	r1, [r4, #4]
 800aefc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af00:	2300      	movs	r3, #0
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	ab0a      	add	r3, sp, #40	; 0x28
 800af06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af0a:	ab09      	add	r3, sp, #36	; 0x24
 800af0c:	ec49 8b10 	vmov	d0, r8, r9
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	6022      	str	r2, [r4, #0]
 800af14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af18:	4628      	mov	r0, r5
 800af1a:	f7ff fecf 	bl	800acbc <__cvt>
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af22:	2b47      	cmp	r3, #71	; 0x47
 800af24:	4680      	mov	r8, r0
 800af26:	d108      	bne.n	800af3a <_printf_float+0x13e>
 800af28:	1cc8      	adds	r0, r1, #3
 800af2a:	db02      	blt.n	800af32 <_printf_float+0x136>
 800af2c:	6863      	ldr	r3, [r4, #4]
 800af2e:	4299      	cmp	r1, r3
 800af30:	dd41      	ble.n	800afb6 <_printf_float+0x1ba>
 800af32:	f1ab 0302 	sub.w	r3, fp, #2
 800af36:	fa5f fb83 	uxtb.w	fp, r3
 800af3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af3e:	d820      	bhi.n	800af82 <_printf_float+0x186>
 800af40:	3901      	subs	r1, #1
 800af42:	465a      	mov	r2, fp
 800af44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af48:	9109      	str	r1, [sp, #36]	; 0x24
 800af4a:	f7ff ff19 	bl	800ad80 <__exponent>
 800af4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af50:	1813      	adds	r3, r2, r0
 800af52:	2a01      	cmp	r2, #1
 800af54:	4681      	mov	r9, r0
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	dc02      	bgt.n	800af60 <_printf_float+0x164>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	07d2      	lsls	r2, r2, #31
 800af5e:	d501      	bpl.n	800af64 <_printf_float+0x168>
 800af60:	3301      	adds	r3, #1
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d09c      	beq.n	800aea6 <_printf_float+0xaa>
 800af6c:	232d      	movs	r3, #45	; 0x2d
 800af6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af72:	e798      	b.n	800aea6 <_printf_float+0xaa>
 800af74:	9a06      	ldr	r2, [sp, #24]
 800af76:	2a47      	cmp	r2, #71	; 0x47
 800af78:	d1be      	bne.n	800aef8 <_printf_float+0xfc>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1bc      	bne.n	800aef8 <_printf_float+0xfc>
 800af7e:	2301      	movs	r3, #1
 800af80:	e7b9      	b.n	800aef6 <_printf_float+0xfa>
 800af82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af86:	d118      	bne.n	800afba <_printf_float+0x1be>
 800af88:	2900      	cmp	r1, #0
 800af8a:	6863      	ldr	r3, [r4, #4]
 800af8c:	dd0b      	ble.n	800afa6 <_printf_float+0x1aa>
 800af8e:	6121      	str	r1, [r4, #16]
 800af90:	b913      	cbnz	r3, 800af98 <_printf_float+0x19c>
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	07d0      	lsls	r0, r2, #31
 800af96:	d502      	bpl.n	800af9e <_printf_float+0x1a2>
 800af98:	3301      	adds	r3, #1
 800af9a:	440b      	add	r3, r1
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800afa0:	f04f 0900 	mov.w	r9, #0
 800afa4:	e7de      	b.n	800af64 <_printf_float+0x168>
 800afa6:	b913      	cbnz	r3, 800afae <_printf_float+0x1b2>
 800afa8:	6822      	ldr	r2, [r4, #0]
 800afaa:	07d2      	lsls	r2, r2, #31
 800afac:	d501      	bpl.n	800afb2 <_printf_float+0x1b6>
 800afae:	3302      	adds	r3, #2
 800afb0:	e7f4      	b.n	800af9c <_printf_float+0x1a0>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e7f2      	b.n	800af9c <_printf_float+0x1a0>
 800afb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	4299      	cmp	r1, r3
 800afbe:	db05      	blt.n	800afcc <_printf_float+0x1d0>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	6121      	str	r1, [r4, #16]
 800afc4:	07d8      	lsls	r0, r3, #31
 800afc6:	d5ea      	bpl.n	800af9e <_printf_float+0x1a2>
 800afc8:	1c4b      	adds	r3, r1, #1
 800afca:	e7e7      	b.n	800af9c <_printf_float+0x1a0>
 800afcc:	2900      	cmp	r1, #0
 800afce:	bfd4      	ite	le
 800afd0:	f1c1 0202 	rsble	r2, r1, #2
 800afd4:	2201      	movgt	r2, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	e7e0      	b.n	800af9c <_printf_float+0x1a0>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	055a      	lsls	r2, r3, #21
 800afde:	d407      	bmi.n	800aff0 <_printf_float+0x1f4>
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	4642      	mov	r2, r8
 800afe4:	4631      	mov	r1, r6
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b8      	blx	r7
 800afea:	3001      	adds	r0, #1
 800afec:	d12c      	bne.n	800b048 <_printf_float+0x24c>
 800afee:	e764      	b.n	800aeba <_printf_float+0xbe>
 800aff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aff4:	f240 80e0 	bls.w	800b1b8 <_printf_float+0x3bc>
 800aff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800affc:	2200      	movs	r2, #0
 800affe:	2300      	movs	r3, #0
 800b000:	f7f5 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b004:	2800      	cmp	r0, #0
 800b006:	d034      	beq.n	800b072 <_printf_float+0x276>
 800b008:	4a37      	ldr	r2, [pc, #220]	; (800b0e8 <_printf_float+0x2ec>)
 800b00a:	2301      	movs	r3, #1
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f af51 	beq.w	800aeba <_printf_float+0xbe>
 800b018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b01c:	429a      	cmp	r2, r3
 800b01e:	db02      	blt.n	800b026 <_printf_float+0x22a>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	07d8      	lsls	r0, r3, #31
 800b024:	d510      	bpl.n	800b048 <_printf_float+0x24c>
 800b026:	ee18 3a10 	vmov	r3, s16
 800b02a:	4652      	mov	r2, sl
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f af41 	beq.w	800aeba <_printf_float+0xbe>
 800b038:	f04f 0800 	mov.w	r8, #0
 800b03c:	f104 091a 	add.w	r9, r4, #26
 800b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b042:	3b01      	subs	r3, #1
 800b044:	4543      	cmp	r3, r8
 800b046:	dc09      	bgt.n	800b05c <_printf_float+0x260>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	079b      	lsls	r3, r3, #30
 800b04c:	f100 8107 	bmi.w	800b25e <_printf_float+0x462>
 800b050:	68e0      	ldr	r0, [r4, #12]
 800b052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b054:	4298      	cmp	r0, r3
 800b056:	bfb8      	it	lt
 800b058:	4618      	movlt	r0, r3
 800b05a:	e730      	b.n	800aebe <_printf_float+0xc2>
 800b05c:	2301      	movs	r3, #1
 800b05e:	464a      	mov	r2, r9
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	f43f af27 	beq.w	800aeba <_printf_float+0xbe>
 800b06c:	f108 0801 	add.w	r8, r8, #1
 800b070:	e7e6      	b.n	800b040 <_printf_float+0x244>
 800b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b074:	2b00      	cmp	r3, #0
 800b076:	dc39      	bgt.n	800b0ec <_printf_float+0x2f0>
 800b078:	4a1b      	ldr	r2, [pc, #108]	; (800b0e8 <_printf_float+0x2ec>)
 800b07a:	2301      	movs	r3, #1
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f af19 	beq.w	800aeba <_printf_float+0xbe>
 800b088:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b08c:	4313      	orrs	r3, r2
 800b08e:	d102      	bne.n	800b096 <_printf_float+0x29a>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	07d9      	lsls	r1, r3, #31
 800b094:	d5d8      	bpl.n	800b048 <_printf_float+0x24c>
 800b096:	ee18 3a10 	vmov	r3, s16
 800b09a:	4652      	mov	r2, sl
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f af09 	beq.w	800aeba <_printf_float+0xbe>
 800b0a8:	f04f 0900 	mov.w	r9, #0
 800b0ac:	f104 0a1a 	add.w	sl, r4, #26
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	425b      	negs	r3, r3
 800b0b4:	454b      	cmp	r3, r9
 800b0b6:	dc01      	bgt.n	800b0bc <_printf_float+0x2c0>
 800b0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ba:	e792      	b.n	800afe2 <_printf_float+0x1e6>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4652      	mov	r2, sl
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	47b8      	blx	r7
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	f43f aef7 	beq.w	800aeba <_printf_float+0xbe>
 800b0cc:	f109 0901 	add.w	r9, r9, #1
 800b0d0:	e7ee      	b.n	800b0b0 <_printf_float+0x2b4>
 800b0d2:	bf00      	nop
 800b0d4:	7fefffff 	.word	0x7fefffff
 800b0d8:	0800f908 	.word	0x0800f908
 800b0dc:	0800f90c 	.word	0x0800f90c
 800b0e0:	0800f910 	.word	0x0800f910
 800b0e4:	0800f914 	.word	0x0800f914
 800b0e8:	0800f918 	.word	0x0800f918
 800b0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	bfa8      	it	ge
 800b0f4:	461a      	movge	r2, r3
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	4691      	mov	r9, r2
 800b0fa:	dc37      	bgt.n	800b16c <_printf_float+0x370>
 800b0fc:	f04f 0b00 	mov.w	fp, #0
 800b100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b104:	f104 021a 	add.w	r2, r4, #26
 800b108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	eba3 0309 	sub.w	r3, r3, r9
 800b110:	455b      	cmp	r3, fp
 800b112:	dc33      	bgt.n	800b17c <_printf_float+0x380>
 800b114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b118:	429a      	cmp	r2, r3
 800b11a:	db3b      	blt.n	800b194 <_printf_float+0x398>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d438      	bmi.n	800b194 <_printf_float+0x398>
 800b122:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b126:	eba2 0903 	sub.w	r9, r2, r3
 800b12a:	9b05      	ldr	r3, [sp, #20]
 800b12c:	1ad2      	subs	r2, r2, r3
 800b12e:	4591      	cmp	r9, r2
 800b130:	bfa8      	it	ge
 800b132:	4691      	movge	r9, r2
 800b134:	f1b9 0f00 	cmp.w	r9, #0
 800b138:	dc35      	bgt.n	800b1a6 <_printf_float+0x3aa>
 800b13a:	f04f 0800 	mov.w	r8, #0
 800b13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b142:	f104 0a1a 	add.w	sl, r4, #26
 800b146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b14a:	1a9b      	subs	r3, r3, r2
 800b14c:	eba3 0309 	sub.w	r3, r3, r9
 800b150:	4543      	cmp	r3, r8
 800b152:	f77f af79 	ble.w	800b048 <_printf_float+0x24c>
 800b156:	2301      	movs	r3, #1
 800b158:	4652      	mov	r2, sl
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	f43f aeaa 	beq.w	800aeba <_printf_float+0xbe>
 800b166:	f108 0801 	add.w	r8, r8, #1
 800b16a:	e7ec      	b.n	800b146 <_printf_float+0x34a>
 800b16c:	4613      	mov	r3, r2
 800b16e:	4631      	mov	r1, r6
 800b170:	4642      	mov	r2, r8
 800b172:	4628      	mov	r0, r5
 800b174:	47b8      	blx	r7
 800b176:	3001      	adds	r0, #1
 800b178:	d1c0      	bne.n	800b0fc <_printf_float+0x300>
 800b17a:	e69e      	b.n	800aeba <_printf_float+0xbe>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4631      	mov	r1, r6
 800b180:	4628      	mov	r0, r5
 800b182:	9205      	str	r2, [sp, #20]
 800b184:	47b8      	blx	r7
 800b186:	3001      	adds	r0, #1
 800b188:	f43f ae97 	beq.w	800aeba <_printf_float+0xbe>
 800b18c:	9a05      	ldr	r2, [sp, #20]
 800b18e:	f10b 0b01 	add.w	fp, fp, #1
 800b192:	e7b9      	b.n	800b108 <_printf_float+0x30c>
 800b194:	ee18 3a10 	vmov	r3, s16
 800b198:	4652      	mov	r2, sl
 800b19a:	4631      	mov	r1, r6
 800b19c:	4628      	mov	r0, r5
 800b19e:	47b8      	blx	r7
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	d1be      	bne.n	800b122 <_printf_float+0x326>
 800b1a4:	e689      	b.n	800aeba <_printf_float+0xbe>
 800b1a6:	9a05      	ldr	r2, [sp, #20]
 800b1a8:	464b      	mov	r3, r9
 800b1aa:	4442      	add	r2, r8
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b8      	blx	r7
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	d1c1      	bne.n	800b13a <_printf_float+0x33e>
 800b1b6:	e680      	b.n	800aeba <_printf_float+0xbe>
 800b1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ba:	2a01      	cmp	r2, #1
 800b1bc:	dc01      	bgt.n	800b1c2 <_printf_float+0x3c6>
 800b1be:	07db      	lsls	r3, r3, #31
 800b1c0:	d53a      	bpl.n	800b238 <_printf_float+0x43c>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f ae74 	beq.w	800aeba <_printf_float+0xbe>
 800b1d2:	ee18 3a10 	vmov	r3, s16
 800b1d6:	4652      	mov	r2, sl
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f ae6b 	beq.w	800aeba <_printf_float+0xbe>
 800b1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b1f0:	f7f5 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f4:	b9d8      	cbnz	r0, 800b22e <_printf_float+0x432>
 800b1f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b1fa:	f108 0201 	add.w	r2, r8, #1
 800b1fe:	4631      	mov	r1, r6
 800b200:	4628      	mov	r0, r5
 800b202:	47b8      	blx	r7
 800b204:	3001      	adds	r0, #1
 800b206:	d10e      	bne.n	800b226 <_printf_float+0x42a>
 800b208:	e657      	b.n	800aeba <_printf_float+0xbe>
 800b20a:	2301      	movs	r3, #1
 800b20c:	4652      	mov	r2, sl
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	f43f ae50 	beq.w	800aeba <_printf_float+0xbe>
 800b21a:	f108 0801 	add.w	r8, r8, #1
 800b21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b220:	3b01      	subs	r3, #1
 800b222:	4543      	cmp	r3, r8
 800b224:	dcf1      	bgt.n	800b20a <_printf_float+0x40e>
 800b226:	464b      	mov	r3, r9
 800b228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b22c:	e6da      	b.n	800afe4 <_printf_float+0x1e8>
 800b22e:	f04f 0800 	mov.w	r8, #0
 800b232:	f104 0a1a 	add.w	sl, r4, #26
 800b236:	e7f2      	b.n	800b21e <_printf_float+0x422>
 800b238:	2301      	movs	r3, #1
 800b23a:	4642      	mov	r2, r8
 800b23c:	e7df      	b.n	800b1fe <_printf_float+0x402>
 800b23e:	2301      	movs	r3, #1
 800b240:	464a      	mov	r2, r9
 800b242:	4631      	mov	r1, r6
 800b244:	4628      	mov	r0, r5
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	f43f ae36 	beq.w	800aeba <_printf_float+0xbe>
 800b24e:	f108 0801 	add.w	r8, r8, #1
 800b252:	68e3      	ldr	r3, [r4, #12]
 800b254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b256:	1a5b      	subs	r3, r3, r1
 800b258:	4543      	cmp	r3, r8
 800b25a:	dcf0      	bgt.n	800b23e <_printf_float+0x442>
 800b25c:	e6f8      	b.n	800b050 <_printf_float+0x254>
 800b25e:	f04f 0800 	mov.w	r8, #0
 800b262:	f104 0919 	add.w	r9, r4, #25
 800b266:	e7f4      	b.n	800b252 <_printf_float+0x456>

0800b268 <_printf_common>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	4616      	mov	r6, r2
 800b26e:	4699      	mov	r9, r3
 800b270:	688a      	ldr	r2, [r1, #8]
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b278:	4293      	cmp	r3, r2
 800b27a:	bfb8      	it	lt
 800b27c:	4613      	movlt	r3, r2
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b284:	4607      	mov	r7, r0
 800b286:	460c      	mov	r4, r1
 800b288:	b10a      	cbz	r2, 800b28e <_printf_common+0x26>
 800b28a:	3301      	adds	r3, #1
 800b28c:	6033      	str	r3, [r6, #0]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	0699      	lsls	r1, r3, #26
 800b292:	bf42      	ittt	mi
 800b294:	6833      	ldrmi	r3, [r6, #0]
 800b296:	3302      	addmi	r3, #2
 800b298:	6033      	strmi	r3, [r6, #0]
 800b29a:	6825      	ldr	r5, [r4, #0]
 800b29c:	f015 0506 	ands.w	r5, r5, #6
 800b2a0:	d106      	bne.n	800b2b0 <_printf_common+0x48>
 800b2a2:	f104 0a19 	add.w	sl, r4, #25
 800b2a6:	68e3      	ldr	r3, [r4, #12]
 800b2a8:	6832      	ldr	r2, [r6, #0]
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	42ab      	cmp	r3, r5
 800b2ae:	dc26      	bgt.n	800b2fe <_printf_common+0x96>
 800b2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2b4:	1e13      	subs	r3, r2, #0
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	bf18      	it	ne
 800b2ba:	2301      	movne	r3, #1
 800b2bc:	0692      	lsls	r2, r2, #26
 800b2be:	d42b      	bmi.n	800b318 <_printf_common+0xb0>
 800b2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	47c0      	blx	r8
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d01e      	beq.n	800b30c <_printf_common+0xa4>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	6922      	ldr	r2, [r4, #16]
 800b2d2:	f003 0306 	and.w	r3, r3, #6
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	bf02      	ittt	eq
 800b2da:	68e5      	ldreq	r5, [r4, #12]
 800b2dc:	6833      	ldreq	r3, [r6, #0]
 800b2de:	1aed      	subeq	r5, r5, r3
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	bf0c      	ite	eq
 800b2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e8:	2500      	movne	r5, #0
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	bfc4      	itt	gt
 800b2ee:	1a9b      	subgt	r3, r3, r2
 800b2f0:	18ed      	addgt	r5, r5, r3
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	341a      	adds	r4, #26
 800b2f6:	42b5      	cmp	r5, r6
 800b2f8:	d11a      	bne.n	800b330 <_printf_common+0xc8>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e008      	b.n	800b310 <_printf_common+0xa8>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4652      	mov	r2, sl
 800b302:	4649      	mov	r1, r9
 800b304:	4638      	mov	r0, r7
 800b306:	47c0      	blx	r8
 800b308:	3001      	adds	r0, #1
 800b30a:	d103      	bne.n	800b314 <_printf_common+0xac>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b314:	3501      	adds	r5, #1
 800b316:	e7c6      	b.n	800b2a6 <_printf_common+0x3e>
 800b318:	18e1      	adds	r1, r4, r3
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	2030      	movs	r0, #48	; 0x30
 800b31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b322:	4422      	add	r2, r4
 800b324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b32c:	3302      	adds	r3, #2
 800b32e:	e7c7      	b.n	800b2c0 <_printf_common+0x58>
 800b330:	2301      	movs	r3, #1
 800b332:	4622      	mov	r2, r4
 800b334:	4649      	mov	r1, r9
 800b336:	4638      	mov	r0, r7
 800b338:	47c0      	blx	r8
 800b33a:	3001      	adds	r0, #1
 800b33c:	d0e6      	beq.n	800b30c <_printf_common+0xa4>
 800b33e:	3601      	adds	r6, #1
 800b340:	e7d9      	b.n	800b2f6 <_printf_common+0x8e>
	...

0800b344 <_printf_i>:
 800b344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	7e0f      	ldrb	r7, [r1, #24]
 800b34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b34c:	2f78      	cmp	r7, #120	; 0x78
 800b34e:	4691      	mov	r9, r2
 800b350:	4680      	mov	r8, r0
 800b352:	460c      	mov	r4, r1
 800b354:	469a      	mov	sl, r3
 800b356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b35a:	d807      	bhi.n	800b36c <_printf_i+0x28>
 800b35c:	2f62      	cmp	r7, #98	; 0x62
 800b35e:	d80a      	bhi.n	800b376 <_printf_i+0x32>
 800b360:	2f00      	cmp	r7, #0
 800b362:	f000 80d4 	beq.w	800b50e <_printf_i+0x1ca>
 800b366:	2f58      	cmp	r7, #88	; 0x58
 800b368:	f000 80c0 	beq.w	800b4ec <_printf_i+0x1a8>
 800b36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b374:	e03a      	b.n	800b3ec <_printf_i+0xa8>
 800b376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b37a:	2b15      	cmp	r3, #21
 800b37c:	d8f6      	bhi.n	800b36c <_printf_i+0x28>
 800b37e:	a101      	add	r1, pc, #4	; (adr r1, 800b384 <_printf_i+0x40>)
 800b380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b384:	0800b3dd 	.word	0x0800b3dd
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b36d 	.word	0x0800b36d
 800b390:	0800b36d 	.word	0x0800b36d
 800b394:	0800b36d 	.word	0x0800b36d
 800b398:	0800b36d 	.word	0x0800b36d
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b36d 	.word	0x0800b36d
 800b3a4:	0800b36d 	.word	0x0800b36d
 800b3a8:	0800b36d 	.word	0x0800b36d
 800b3ac:	0800b36d 	.word	0x0800b36d
 800b3b0:	0800b4f5 	.word	0x0800b4f5
 800b3b4:	0800b41d 	.word	0x0800b41d
 800b3b8:	0800b4af 	.word	0x0800b4af
 800b3bc:	0800b36d 	.word	0x0800b36d
 800b3c0:	0800b36d 	.word	0x0800b36d
 800b3c4:	0800b517 	.word	0x0800b517
 800b3c8:	0800b36d 	.word	0x0800b36d
 800b3cc:	0800b41d 	.word	0x0800b41d
 800b3d0:	0800b36d 	.word	0x0800b36d
 800b3d4:	0800b36d 	.word	0x0800b36d
 800b3d8:	0800b4b7 	.word	0x0800b4b7
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	1d1a      	adds	r2, r3, #4
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	602a      	str	r2, [r5, #0]
 800b3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e09f      	b.n	800b530 <_printf_i+0x1ec>
 800b3f0:	6820      	ldr	r0, [r4, #0]
 800b3f2:	682b      	ldr	r3, [r5, #0]
 800b3f4:	0607      	lsls	r7, r0, #24
 800b3f6:	f103 0104 	add.w	r1, r3, #4
 800b3fa:	6029      	str	r1, [r5, #0]
 800b3fc:	d501      	bpl.n	800b402 <_printf_i+0xbe>
 800b3fe:	681e      	ldr	r6, [r3, #0]
 800b400:	e003      	b.n	800b40a <_printf_i+0xc6>
 800b402:	0646      	lsls	r6, r0, #25
 800b404:	d5fb      	bpl.n	800b3fe <_printf_i+0xba>
 800b406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b40a:	2e00      	cmp	r6, #0
 800b40c:	da03      	bge.n	800b416 <_printf_i+0xd2>
 800b40e:	232d      	movs	r3, #45	; 0x2d
 800b410:	4276      	negs	r6, r6
 800b412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b416:	485a      	ldr	r0, [pc, #360]	; (800b580 <_printf_i+0x23c>)
 800b418:	230a      	movs	r3, #10
 800b41a:	e012      	b.n	800b442 <_printf_i+0xfe>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	1d19      	adds	r1, r3, #4
 800b422:	6029      	str	r1, [r5, #0]
 800b424:	0605      	lsls	r5, r0, #24
 800b426:	d501      	bpl.n	800b42c <_printf_i+0xe8>
 800b428:	681e      	ldr	r6, [r3, #0]
 800b42a:	e002      	b.n	800b432 <_printf_i+0xee>
 800b42c:	0641      	lsls	r1, r0, #25
 800b42e:	d5fb      	bpl.n	800b428 <_printf_i+0xe4>
 800b430:	881e      	ldrh	r6, [r3, #0]
 800b432:	4853      	ldr	r0, [pc, #332]	; (800b580 <_printf_i+0x23c>)
 800b434:	2f6f      	cmp	r7, #111	; 0x6f
 800b436:	bf0c      	ite	eq
 800b438:	2308      	moveq	r3, #8
 800b43a:	230a      	movne	r3, #10
 800b43c:	2100      	movs	r1, #0
 800b43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b442:	6865      	ldr	r5, [r4, #4]
 800b444:	60a5      	str	r5, [r4, #8]
 800b446:	2d00      	cmp	r5, #0
 800b448:	bfa2      	ittt	ge
 800b44a:	6821      	ldrge	r1, [r4, #0]
 800b44c:	f021 0104 	bicge.w	r1, r1, #4
 800b450:	6021      	strge	r1, [r4, #0]
 800b452:	b90e      	cbnz	r6, 800b458 <_printf_i+0x114>
 800b454:	2d00      	cmp	r5, #0
 800b456:	d04b      	beq.n	800b4f0 <_printf_i+0x1ac>
 800b458:	4615      	mov	r5, r2
 800b45a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b45e:	fb03 6711 	mls	r7, r3, r1, r6
 800b462:	5dc7      	ldrb	r7, [r0, r7]
 800b464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b468:	4637      	mov	r7, r6
 800b46a:	42bb      	cmp	r3, r7
 800b46c:	460e      	mov	r6, r1
 800b46e:	d9f4      	bls.n	800b45a <_printf_i+0x116>
 800b470:	2b08      	cmp	r3, #8
 800b472:	d10b      	bne.n	800b48c <_printf_i+0x148>
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	07de      	lsls	r6, r3, #31
 800b478:	d508      	bpl.n	800b48c <_printf_i+0x148>
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	6861      	ldr	r1, [r4, #4]
 800b47e:	4299      	cmp	r1, r3
 800b480:	bfde      	ittt	le
 800b482:	2330      	movle	r3, #48	; 0x30
 800b484:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b488:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b48c:	1b52      	subs	r2, r2, r5
 800b48e:	6122      	str	r2, [r4, #16]
 800b490:	f8cd a000 	str.w	sl, [sp]
 800b494:	464b      	mov	r3, r9
 800b496:	aa03      	add	r2, sp, #12
 800b498:	4621      	mov	r1, r4
 800b49a:	4640      	mov	r0, r8
 800b49c:	f7ff fee4 	bl	800b268 <_printf_common>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d14a      	bne.n	800b53a <_printf_i+0x1f6>
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a8:	b004      	add	sp, #16
 800b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	f043 0320 	orr.w	r3, r3, #32
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	4833      	ldr	r0, [pc, #204]	; (800b584 <_printf_i+0x240>)
 800b4b8:	2778      	movs	r7, #120	; 0x78
 800b4ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	6829      	ldr	r1, [r5, #0]
 800b4c2:	061f      	lsls	r7, r3, #24
 800b4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4c8:	d402      	bmi.n	800b4d0 <_printf_i+0x18c>
 800b4ca:	065f      	lsls	r7, r3, #25
 800b4cc:	bf48      	it	mi
 800b4ce:	b2b6      	uxthmi	r6, r6
 800b4d0:	07df      	lsls	r7, r3, #31
 800b4d2:	bf48      	it	mi
 800b4d4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4d8:	6029      	str	r1, [r5, #0]
 800b4da:	bf48      	it	mi
 800b4dc:	6023      	strmi	r3, [r4, #0]
 800b4de:	b91e      	cbnz	r6, 800b4e8 <_printf_i+0x1a4>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	f023 0320 	bic.w	r3, r3, #32
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	e7a7      	b.n	800b43c <_printf_i+0xf8>
 800b4ec:	4824      	ldr	r0, [pc, #144]	; (800b580 <_printf_i+0x23c>)
 800b4ee:	e7e4      	b.n	800b4ba <_printf_i+0x176>
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	e7bd      	b.n	800b470 <_printf_i+0x12c>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	6826      	ldr	r6, [r4, #0]
 800b4f8:	6961      	ldr	r1, [r4, #20]
 800b4fa:	1d18      	adds	r0, r3, #4
 800b4fc:	6028      	str	r0, [r5, #0]
 800b4fe:	0635      	lsls	r5, r6, #24
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	d501      	bpl.n	800b508 <_printf_i+0x1c4>
 800b504:	6019      	str	r1, [r3, #0]
 800b506:	e002      	b.n	800b50e <_printf_i+0x1ca>
 800b508:	0670      	lsls	r0, r6, #25
 800b50a:	d5fb      	bpl.n	800b504 <_printf_i+0x1c0>
 800b50c:	8019      	strh	r1, [r3, #0]
 800b50e:	2300      	movs	r3, #0
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	4615      	mov	r5, r2
 800b514:	e7bc      	b.n	800b490 <_printf_i+0x14c>
 800b516:	682b      	ldr	r3, [r5, #0]
 800b518:	1d1a      	adds	r2, r3, #4
 800b51a:	602a      	str	r2, [r5, #0]
 800b51c:	681d      	ldr	r5, [r3, #0]
 800b51e:	6862      	ldr	r2, [r4, #4]
 800b520:	2100      	movs	r1, #0
 800b522:	4628      	mov	r0, r5
 800b524:	f7f4 fe5c 	bl	80001e0 <memchr>
 800b528:	b108      	cbz	r0, 800b52e <_printf_i+0x1ea>
 800b52a:	1b40      	subs	r0, r0, r5
 800b52c:	6060      	str	r0, [r4, #4]
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	2300      	movs	r3, #0
 800b534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b538:	e7aa      	b.n	800b490 <_printf_i+0x14c>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	462a      	mov	r2, r5
 800b53e:	4649      	mov	r1, r9
 800b540:	4640      	mov	r0, r8
 800b542:	47d0      	blx	sl
 800b544:	3001      	adds	r0, #1
 800b546:	d0ad      	beq.n	800b4a4 <_printf_i+0x160>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	079b      	lsls	r3, r3, #30
 800b54c:	d413      	bmi.n	800b576 <_printf_i+0x232>
 800b54e:	68e0      	ldr	r0, [r4, #12]
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	4298      	cmp	r0, r3
 800b554:	bfb8      	it	lt
 800b556:	4618      	movlt	r0, r3
 800b558:	e7a6      	b.n	800b4a8 <_printf_i+0x164>
 800b55a:	2301      	movs	r3, #1
 800b55c:	4632      	mov	r2, r6
 800b55e:	4649      	mov	r1, r9
 800b560:	4640      	mov	r0, r8
 800b562:	47d0      	blx	sl
 800b564:	3001      	adds	r0, #1
 800b566:	d09d      	beq.n	800b4a4 <_printf_i+0x160>
 800b568:	3501      	adds	r5, #1
 800b56a:	68e3      	ldr	r3, [r4, #12]
 800b56c:	9903      	ldr	r1, [sp, #12]
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	42ab      	cmp	r3, r5
 800b572:	dcf2      	bgt.n	800b55a <_printf_i+0x216>
 800b574:	e7eb      	b.n	800b54e <_printf_i+0x20a>
 800b576:	2500      	movs	r5, #0
 800b578:	f104 0619 	add.w	r6, r4, #25
 800b57c:	e7f5      	b.n	800b56a <_printf_i+0x226>
 800b57e:	bf00      	nop
 800b580:	0800f91a 	.word	0x0800f91a
 800b584:	0800f92b 	.word	0x0800f92b

0800b588 <_scanf_float>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	b087      	sub	sp, #28
 800b58e:	4617      	mov	r7, r2
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	688b      	ldr	r3, [r1, #8]
 800b594:	1e5a      	subs	r2, r3, #1
 800b596:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b59a:	bf83      	ittte	hi
 800b59c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5a0:	195b      	addhi	r3, r3, r5
 800b5a2:	9302      	strhi	r3, [sp, #8]
 800b5a4:	2300      	movls	r3, #0
 800b5a6:	bf86      	itte	hi
 800b5a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5ac:	608b      	strhi	r3, [r1, #8]
 800b5ae:	9302      	strls	r3, [sp, #8]
 800b5b0:	680b      	ldr	r3, [r1, #0]
 800b5b2:	468b      	mov	fp, r1
 800b5b4:	2500      	movs	r5, #0
 800b5b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5ba:	f84b 3b1c 	str.w	r3, [fp], #28
 800b5be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	465e      	mov	r6, fp
 800b5c8:	46aa      	mov	sl, r5
 800b5ca:	46a9      	mov	r9, r5
 800b5cc:	9501      	str	r5, [sp, #4]
 800b5ce:	68a2      	ldr	r2, [r4, #8]
 800b5d0:	b152      	cbz	r2, 800b5e8 <_scanf_float+0x60>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b4e      	cmp	r3, #78	; 0x4e
 800b5d8:	d864      	bhi.n	800b6a4 <_scanf_float+0x11c>
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d83c      	bhi.n	800b658 <_scanf_float+0xd0>
 800b5de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b5e2:	b2c8      	uxtb	r0, r1
 800b5e4:	280e      	cmp	r0, #14
 800b5e6:	d93a      	bls.n	800b65e <_scanf_float+0xd6>
 800b5e8:	f1b9 0f00 	cmp.w	r9, #0
 800b5ec:	d003      	beq.n	800b5f6 <_scanf_float+0x6e>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b5fa:	f1ba 0f01 	cmp.w	sl, #1
 800b5fe:	f200 8113 	bhi.w	800b828 <_scanf_float+0x2a0>
 800b602:	455e      	cmp	r6, fp
 800b604:	f200 8105 	bhi.w	800b812 <_scanf_float+0x28a>
 800b608:	2501      	movs	r5, #1
 800b60a:	4628      	mov	r0, r5
 800b60c:	b007      	add	sp, #28
 800b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b612:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b616:	2a0d      	cmp	r2, #13
 800b618:	d8e6      	bhi.n	800b5e8 <_scanf_float+0x60>
 800b61a:	a101      	add	r1, pc, #4	; (adr r1, 800b620 <_scanf_float+0x98>)
 800b61c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b620:	0800b75f 	.word	0x0800b75f
 800b624:	0800b5e9 	.word	0x0800b5e9
 800b628:	0800b5e9 	.word	0x0800b5e9
 800b62c:	0800b5e9 	.word	0x0800b5e9
 800b630:	0800b7bf 	.word	0x0800b7bf
 800b634:	0800b797 	.word	0x0800b797
 800b638:	0800b5e9 	.word	0x0800b5e9
 800b63c:	0800b5e9 	.word	0x0800b5e9
 800b640:	0800b76d 	.word	0x0800b76d
 800b644:	0800b5e9 	.word	0x0800b5e9
 800b648:	0800b5e9 	.word	0x0800b5e9
 800b64c:	0800b5e9 	.word	0x0800b5e9
 800b650:	0800b5e9 	.word	0x0800b5e9
 800b654:	0800b725 	.word	0x0800b725
 800b658:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b65c:	e7db      	b.n	800b616 <_scanf_float+0x8e>
 800b65e:	290e      	cmp	r1, #14
 800b660:	d8c2      	bhi.n	800b5e8 <_scanf_float+0x60>
 800b662:	a001      	add	r0, pc, #4	; (adr r0, 800b668 <_scanf_float+0xe0>)
 800b664:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b668:	0800b717 	.word	0x0800b717
 800b66c:	0800b5e9 	.word	0x0800b5e9
 800b670:	0800b717 	.word	0x0800b717
 800b674:	0800b7ab 	.word	0x0800b7ab
 800b678:	0800b5e9 	.word	0x0800b5e9
 800b67c:	0800b6c5 	.word	0x0800b6c5
 800b680:	0800b701 	.word	0x0800b701
 800b684:	0800b701 	.word	0x0800b701
 800b688:	0800b701 	.word	0x0800b701
 800b68c:	0800b701 	.word	0x0800b701
 800b690:	0800b701 	.word	0x0800b701
 800b694:	0800b701 	.word	0x0800b701
 800b698:	0800b701 	.word	0x0800b701
 800b69c:	0800b701 	.word	0x0800b701
 800b6a0:	0800b701 	.word	0x0800b701
 800b6a4:	2b6e      	cmp	r3, #110	; 0x6e
 800b6a6:	d809      	bhi.n	800b6bc <_scanf_float+0x134>
 800b6a8:	2b60      	cmp	r3, #96	; 0x60
 800b6aa:	d8b2      	bhi.n	800b612 <_scanf_float+0x8a>
 800b6ac:	2b54      	cmp	r3, #84	; 0x54
 800b6ae:	d077      	beq.n	800b7a0 <_scanf_float+0x218>
 800b6b0:	2b59      	cmp	r3, #89	; 0x59
 800b6b2:	d199      	bne.n	800b5e8 <_scanf_float+0x60>
 800b6b4:	2d07      	cmp	r5, #7
 800b6b6:	d197      	bne.n	800b5e8 <_scanf_float+0x60>
 800b6b8:	2508      	movs	r5, #8
 800b6ba:	e029      	b.n	800b710 <_scanf_float+0x188>
 800b6bc:	2b74      	cmp	r3, #116	; 0x74
 800b6be:	d06f      	beq.n	800b7a0 <_scanf_float+0x218>
 800b6c0:	2b79      	cmp	r3, #121	; 0x79
 800b6c2:	e7f6      	b.n	800b6b2 <_scanf_float+0x12a>
 800b6c4:	6821      	ldr	r1, [r4, #0]
 800b6c6:	05c8      	lsls	r0, r1, #23
 800b6c8:	d51a      	bpl.n	800b700 <_scanf_float+0x178>
 800b6ca:	9b02      	ldr	r3, [sp, #8]
 800b6cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b6d0:	6021      	str	r1, [r4, #0]
 800b6d2:	f109 0901 	add.w	r9, r9, #1
 800b6d6:	b11b      	cbz	r3, 800b6e0 <_scanf_float+0x158>
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	3201      	adds	r2, #1
 800b6dc:	9302      	str	r3, [sp, #8]
 800b6de:	60a2      	str	r2, [r4, #8]
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	60a3      	str	r3, [r4, #8]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	6123      	str	r3, [r4, #16]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	607b      	str	r3, [r7, #4]
 800b6f4:	f340 8084 	ble.w	800b800 <_scanf_float+0x278>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	603b      	str	r3, [r7, #0]
 800b6fe:	e766      	b.n	800b5ce <_scanf_float+0x46>
 800b700:	eb1a 0f05 	cmn.w	sl, r5
 800b704:	f47f af70 	bne.w	800b5e8 <_scanf_float+0x60>
 800b708:	6822      	ldr	r2, [r4, #0]
 800b70a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b70e:	6022      	str	r2, [r4, #0]
 800b710:	f806 3b01 	strb.w	r3, [r6], #1
 800b714:	e7e4      	b.n	800b6e0 <_scanf_float+0x158>
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	0610      	lsls	r0, r2, #24
 800b71a:	f57f af65 	bpl.w	800b5e8 <_scanf_float+0x60>
 800b71e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b722:	e7f4      	b.n	800b70e <_scanf_float+0x186>
 800b724:	f1ba 0f00 	cmp.w	sl, #0
 800b728:	d10e      	bne.n	800b748 <_scanf_float+0x1c0>
 800b72a:	f1b9 0f00 	cmp.w	r9, #0
 800b72e:	d10e      	bne.n	800b74e <_scanf_float+0x1c6>
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b736:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b73a:	d108      	bne.n	800b74e <_scanf_float+0x1c6>
 800b73c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	f04f 0a01 	mov.w	sl, #1
 800b746:	e7e3      	b.n	800b710 <_scanf_float+0x188>
 800b748:	f1ba 0f02 	cmp.w	sl, #2
 800b74c:	d055      	beq.n	800b7fa <_scanf_float+0x272>
 800b74e:	2d01      	cmp	r5, #1
 800b750:	d002      	beq.n	800b758 <_scanf_float+0x1d0>
 800b752:	2d04      	cmp	r5, #4
 800b754:	f47f af48 	bne.w	800b5e8 <_scanf_float+0x60>
 800b758:	3501      	adds	r5, #1
 800b75a:	b2ed      	uxtb	r5, r5
 800b75c:	e7d8      	b.n	800b710 <_scanf_float+0x188>
 800b75e:	f1ba 0f01 	cmp.w	sl, #1
 800b762:	f47f af41 	bne.w	800b5e8 <_scanf_float+0x60>
 800b766:	f04f 0a02 	mov.w	sl, #2
 800b76a:	e7d1      	b.n	800b710 <_scanf_float+0x188>
 800b76c:	b97d      	cbnz	r5, 800b78e <_scanf_float+0x206>
 800b76e:	f1b9 0f00 	cmp.w	r9, #0
 800b772:	f47f af3c 	bne.w	800b5ee <_scanf_float+0x66>
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b77c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b780:	f47f af39 	bne.w	800b5f6 <_scanf_float+0x6e>
 800b784:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b788:	6022      	str	r2, [r4, #0]
 800b78a:	2501      	movs	r5, #1
 800b78c:	e7c0      	b.n	800b710 <_scanf_float+0x188>
 800b78e:	2d03      	cmp	r5, #3
 800b790:	d0e2      	beq.n	800b758 <_scanf_float+0x1d0>
 800b792:	2d05      	cmp	r5, #5
 800b794:	e7de      	b.n	800b754 <_scanf_float+0x1cc>
 800b796:	2d02      	cmp	r5, #2
 800b798:	f47f af26 	bne.w	800b5e8 <_scanf_float+0x60>
 800b79c:	2503      	movs	r5, #3
 800b79e:	e7b7      	b.n	800b710 <_scanf_float+0x188>
 800b7a0:	2d06      	cmp	r5, #6
 800b7a2:	f47f af21 	bne.w	800b5e8 <_scanf_float+0x60>
 800b7a6:	2507      	movs	r5, #7
 800b7a8:	e7b2      	b.n	800b710 <_scanf_float+0x188>
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	0591      	lsls	r1, r2, #22
 800b7ae:	f57f af1b 	bpl.w	800b5e8 <_scanf_float+0x60>
 800b7b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7bc:	e7a8      	b.n	800b710 <_scanf_float+0x188>
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b7c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b7c8:	d006      	beq.n	800b7d8 <_scanf_float+0x250>
 800b7ca:	0550      	lsls	r0, r2, #21
 800b7cc:	f57f af0c 	bpl.w	800b5e8 <_scanf_float+0x60>
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	f43f af0f 	beq.w	800b5f6 <_scanf_float+0x6e>
 800b7d8:	0591      	lsls	r1, r2, #22
 800b7da:	bf58      	it	pl
 800b7dc:	9901      	ldrpl	r1, [sp, #4]
 800b7de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7e2:	bf58      	it	pl
 800b7e4:	eba9 0101 	subpl.w	r1, r9, r1
 800b7e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b7ec:	bf58      	it	pl
 800b7ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7f2:	6022      	str	r2, [r4, #0]
 800b7f4:	f04f 0900 	mov.w	r9, #0
 800b7f8:	e78a      	b.n	800b710 <_scanf_float+0x188>
 800b7fa:	f04f 0a03 	mov.w	sl, #3
 800b7fe:	e787      	b.n	800b710 <_scanf_float+0x188>
 800b800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b804:	4639      	mov	r1, r7
 800b806:	4640      	mov	r0, r8
 800b808:	4798      	blx	r3
 800b80a:	2800      	cmp	r0, #0
 800b80c:	f43f aedf 	beq.w	800b5ce <_scanf_float+0x46>
 800b810:	e6ea      	b.n	800b5e8 <_scanf_float+0x60>
 800b812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b81a:	463a      	mov	r2, r7
 800b81c:	4640      	mov	r0, r8
 800b81e:	4798      	blx	r3
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	3b01      	subs	r3, #1
 800b824:	6123      	str	r3, [r4, #16]
 800b826:	e6ec      	b.n	800b602 <_scanf_float+0x7a>
 800b828:	1e6b      	subs	r3, r5, #1
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d825      	bhi.n	800b87a <_scanf_float+0x2f2>
 800b82e:	2d02      	cmp	r5, #2
 800b830:	d836      	bhi.n	800b8a0 <_scanf_float+0x318>
 800b832:	455e      	cmp	r6, fp
 800b834:	f67f aee8 	bls.w	800b608 <_scanf_float+0x80>
 800b838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b83c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b840:	463a      	mov	r2, r7
 800b842:	4640      	mov	r0, r8
 800b844:	4798      	blx	r3
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	3b01      	subs	r3, #1
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	e7f1      	b.n	800b832 <_scanf_float+0x2aa>
 800b84e:	9802      	ldr	r0, [sp, #8]
 800b850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b854:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b858:	9002      	str	r0, [sp, #8]
 800b85a:	463a      	mov	r2, r7
 800b85c:	4640      	mov	r0, r8
 800b85e:	4798      	blx	r3
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	3b01      	subs	r3, #1
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b86a:	fa5f fa8a 	uxtb.w	sl, sl
 800b86e:	f1ba 0f02 	cmp.w	sl, #2
 800b872:	d1ec      	bne.n	800b84e <_scanf_float+0x2c6>
 800b874:	3d03      	subs	r5, #3
 800b876:	b2ed      	uxtb	r5, r5
 800b878:	1b76      	subs	r6, r6, r5
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	05da      	lsls	r2, r3, #23
 800b87e:	d52f      	bpl.n	800b8e0 <_scanf_float+0x358>
 800b880:	055b      	lsls	r3, r3, #21
 800b882:	d510      	bpl.n	800b8a6 <_scanf_float+0x31e>
 800b884:	455e      	cmp	r6, fp
 800b886:	f67f aebf 	bls.w	800b608 <_scanf_float+0x80>
 800b88a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b88e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b892:	463a      	mov	r2, r7
 800b894:	4640      	mov	r0, r8
 800b896:	4798      	blx	r3
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	e7f1      	b.n	800b884 <_scanf_float+0x2fc>
 800b8a0:	46aa      	mov	sl, r5
 800b8a2:	9602      	str	r6, [sp, #8]
 800b8a4:	e7df      	b.n	800b866 <_scanf_float+0x2de>
 800b8a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	2965      	cmp	r1, #101	; 0x65
 800b8ae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b8b2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b8b6:	6123      	str	r3, [r4, #16]
 800b8b8:	d00c      	beq.n	800b8d4 <_scanf_float+0x34c>
 800b8ba:	2945      	cmp	r1, #69	; 0x45
 800b8bc:	d00a      	beq.n	800b8d4 <_scanf_float+0x34c>
 800b8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8c2:	463a      	mov	r2, r7
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4798      	blx	r3
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	1eb5      	subs	r5, r6, #2
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8d8:	463a      	mov	r2, r7
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4798      	blx	r3
 800b8de:	462e      	mov	r6, r5
 800b8e0:	6825      	ldr	r5, [r4, #0]
 800b8e2:	f015 0510 	ands.w	r5, r5, #16
 800b8e6:	d158      	bne.n	800b99a <_scanf_float+0x412>
 800b8e8:	7035      	strb	r5, [r6, #0]
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f4:	d11c      	bne.n	800b930 <_scanf_float+0x3a8>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	454b      	cmp	r3, r9
 800b8fa:	eba3 0209 	sub.w	r2, r3, r9
 800b8fe:	d124      	bne.n	800b94a <_scanf_float+0x3c2>
 800b900:	2200      	movs	r2, #0
 800b902:	4659      	mov	r1, fp
 800b904:	4640      	mov	r0, r8
 800b906:	f002 fc7f 	bl	800e208 <_strtod_r>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	6821      	ldr	r1, [r4, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f011 0f02 	tst.w	r1, #2
 800b914:	ec57 6b10 	vmov	r6, r7, d0
 800b918:	f103 0204 	add.w	r2, r3, #4
 800b91c:	d020      	beq.n	800b960 <_scanf_float+0x3d8>
 800b91e:	9903      	ldr	r1, [sp, #12]
 800b920:	600a      	str	r2, [r1, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	e9c3 6700 	strd	r6, r7, [r3]
 800b928:	68e3      	ldr	r3, [r4, #12]
 800b92a:	3301      	adds	r3, #1
 800b92c:	60e3      	str	r3, [r4, #12]
 800b92e:	e66c      	b.n	800b60a <_scanf_float+0x82>
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d0e4      	beq.n	800b900 <_scanf_float+0x378>
 800b936:	9905      	ldr	r1, [sp, #20]
 800b938:	230a      	movs	r3, #10
 800b93a:	462a      	mov	r2, r5
 800b93c:	3101      	adds	r1, #1
 800b93e:	4640      	mov	r0, r8
 800b940:	f002 fcea 	bl	800e318 <_strtol_r>
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	9e05      	ldr	r6, [sp, #20]
 800b948:	1ac2      	subs	r2, r0, r3
 800b94a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b94e:	429e      	cmp	r6, r3
 800b950:	bf28      	it	cs
 800b952:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b956:	4912      	ldr	r1, [pc, #72]	; (800b9a0 <_scanf_float+0x418>)
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f8d5 	bl	800bb08 <siprintf>
 800b95e:	e7cf      	b.n	800b900 <_scanf_float+0x378>
 800b960:	f011 0f04 	tst.w	r1, #4
 800b964:	9903      	ldr	r1, [sp, #12]
 800b966:	600a      	str	r2, [r1, #0]
 800b968:	d1db      	bne.n	800b922 <_scanf_float+0x39a>
 800b96a:	f8d3 8000 	ldr.w	r8, [r3]
 800b96e:	ee10 2a10 	vmov	r2, s0
 800b972:	ee10 0a10 	vmov	r0, s0
 800b976:	463b      	mov	r3, r7
 800b978:	4639      	mov	r1, r7
 800b97a:	f7f5 f8df 	bl	8000b3c <__aeabi_dcmpun>
 800b97e:	b128      	cbz	r0, 800b98c <_scanf_float+0x404>
 800b980:	4808      	ldr	r0, [pc, #32]	; (800b9a4 <_scanf_float+0x41c>)
 800b982:	f000 fa07 	bl	800bd94 <nanf>
 800b986:	ed88 0a00 	vstr	s0, [r8]
 800b98a:	e7cd      	b.n	800b928 <_scanf_float+0x3a0>
 800b98c:	4630      	mov	r0, r6
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f5 f932 	bl	8000bf8 <__aeabi_d2f>
 800b994:	f8c8 0000 	str.w	r0, [r8]
 800b998:	e7c6      	b.n	800b928 <_scanf_float+0x3a0>
 800b99a:	2500      	movs	r5, #0
 800b99c:	e635      	b.n	800b60a <_scanf_float+0x82>
 800b99e:	bf00      	nop
 800b9a0:	0800f93c 	.word	0x0800f93c
 800b9a4:	0800fccd 	.word	0x0800fccd

0800b9a8 <std>:
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b9b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9b6:	6083      	str	r3, [r0, #8]
 800b9b8:	8181      	strh	r1, [r0, #12]
 800b9ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b9bc:	81c2      	strh	r2, [r0, #14]
 800b9be:	6183      	str	r3, [r0, #24]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	2208      	movs	r2, #8
 800b9c4:	305c      	adds	r0, #92	; 0x5c
 800b9c6:	f000 f902 	bl	800bbce <memset>
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <std+0x38>)
 800b9cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b9ce:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <std+0x3c>)
 800b9d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9d2:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <std+0x40>)
 800b9d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <std+0x44>)
 800b9d8:	6224      	str	r4, [r4, #32]
 800b9da:	6323      	str	r3, [r4, #48]	; 0x30
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800bb49 	.word	0x0800bb49
 800b9e4:	0800bb6b 	.word	0x0800bb6b
 800b9e8:	0800bba3 	.word	0x0800bba3
 800b9ec:	0800bbc7 	.word	0x0800bbc7

0800b9f0 <stdio_exit_handler>:
 800b9f0:	4a02      	ldr	r2, [pc, #8]	; (800b9fc <stdio_exit_handler+0xc>)
 800b9f2:	4903      	ldr	r1, [pc, #12]	; (800ba00 <stdio_exit_handler+0x10>)
 800b9f4:	4803      	ldr	r0, [pc, #12]	; (800ba04 <stdio_exit_handler+0x14>)
 800b9f6:	f000 b869 	b.w	800bacc <_fwalk_sglue>
 800b9fa:	bf00      	nop
 800b9fc:	20000010 	.word	0x20000010
 800ba00:	0800e6d9 	.word	0x0800e6d9
 800ba04:	2000001c 	.word	0x2000001c

0800ba08 <cleanup_stdio>:
 800ba08:	6841      	ldr	r1, [r0, #4]
 800ba0a:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <cleanup_stdio+0x34>)
 800ba0c:	4299      	cmp	r1, r3
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	4604      	mov	r4, r0
 800ba12:	d001      	beq.n	800ba18 <cleanup_stdio+0x10>
 800ba14:	f002 fe60 	bl	800e6d8 <_fflush_r>
 800ba18:	68a1      	ldr	r1, [r4, #8]
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <cleanup_stdio+0x38>)
 800ba1c:	4299      	cmp	r1, r3
 800ba1e:	d002      	beq.n	800ba26 <cleanup_stdio+0x1e>
 800ba20:	4620      	mov	r0, r4
 800ba22:	f002 fe59 	bl	800e6d8 <_fflush_r>
 800ba26:	68e1      	ldr	r1, [r4, #12]
 800ba28:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <cleanup_stdio+0x3c>)
 800ba2a:	4299      	cmp	r1, r3
 800ba2c:	d004      	beq.n	800ba38 <cleanup_stdio+0x30>
 800ba2e:	4620      	mov	r0, r4
 800ba30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba34:	f002 be50 	b.w	800e6d8 <_fflush_r>
 800ba38:	bd10      	pop	{r4, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20006088 	.word	0x20006088
 800ba40:	200060f0 	.word	0x200060f0
 800ba44:	20006158 	.word	0x20006158

0800ba48 <global_stdio_init.part.0>:
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	4b0b      	ldr	r3, [pc, #44]	; (800ba78 <global_stdio_init.part.0+0x30>)
 800ba4c:	4c0b      	ldr	r4, [pc, #44]	; (800ba7c <global_stdio_init.part.0+0x34>)
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <global_stdio_init.part.0+0x38>)
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	4620      	mov	r0, r4
 800ba54:	2200      	movs	r2, #0
 800ba56:	2104      	movs	r1, #4
 800ba58:	f7ff ffa6 	bl	800b9a8 <std>
 800ba5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ba60:	2201      	movs	r2, #1
 800ba62:	2109      	movs	r1, #9
 800ba64:	f7ff ffa0 	bl	800b9a8 <std>
 800ba68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ba6c:	2202      	movs	r2, #2
 800ba6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba72:	2112      	movs	r1, #18
 800ba74:	f7ff bf98 	b.w	800b9a8 <std>
 800ba78:	200061c0 	.word	0x200061c0
 800ba7c:	20006088 	.word	0x20006088
 800ba80:	0800b9f1 	.word	0x0800b9f1

0800ba84 <__sfp_lock_acquire>:
 800ba84:	4801      	ldr	r0, [pc, #4]	; (800ba8c <__sfp_lock_acquire+0x8>)
 800ba86:	f000 b975 	b.w	800bd74 <__retarget_lock_acquire_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	200061c9 	.word	0x200061c9

0800ba90 <__sfp_lock_release>:
 800ba90:	4801      	ldr	r0, [pc, #4]	; (800ba98 <__sfp_lock_release+0x8>)
 800ba92:	f000 b970 	b.w	800bd76 <__retarget_lock_release_recursive>
 800ba96:	bf00      	nop
 800ba98:	200061c9 	.word	0x200061c9

0800ba9c <__sinit>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	4604      	mov	r4, r0
 800baa0:	f7ff fff0 	bl	800ba84 <__sfp_lock_acquire>
 800baa4:	6a23      	ldr	r3, [r4, #32]
 800baa6:	b11b      	cbz	r3, 800bab0 <__sinit+0x14>
 800baa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baac:	f7ff bff0 	b.w	800ba90 <__sfp_lock_release>
 800bab0:	4b04      	ldr	r3, [pc, #16]	; (800bac4 <__sinit+0x28>)
 800bab2:	6223      	str	r3, [r4, #32]
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <__sinit+0x2c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1f5      	bne.n	800baa8 <__sinit+0xc>
 800babc:	f7ff ffc4 	bl	800ba48 <global_stdio_init.part.0>
 800bac0:	e7f2      	b.n	800baa8 <__sinit+0xc>
 800bac2:	bf00      	nop
 800bac4:	0800ba09 	.word	0x0800ba09
 800bac8:	200061c0 	.word	0x200061c0

0800bacc <_fwalk_sglue>:
 800bacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad0:	4607      	mov	r7, r0
 800bad2:	4688      	mov	r8, r1
 800bad4:	4614      	mov	r4, r2
 800bad6:	2600      	movs	r6, #0
 800bad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800badc:	f1b9 0901 	subs.w	r9, r9, #1
 800bae0:	d505      	bpl.n	800baee <_fwalk_sglue+0x22>
 800bae2:	6824      	ldr	r4, [r4, #0]
 800bae4:	2c00      	cmp	r4, #0
 800bae6:	d1f7      	bne.n	800bad8 <_fwalk_sglue+0xc>
 800bae8:	4630      	mov	r0, r6
 800baea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d907      	bls.n	800bb04 <_fwalk_sglue+0x38>
 800baf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baf8:	3301      	adds	r3, #1
 800bafa:	d003      	beq.n	800bb04 <_fwalk_sglue+0x38>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4638      	mov	r0, r7
 800bb00:	47c0      	blx	r8
 800bb02:	4306      	orrs	r6, r0
 800bb04:	3568      	adds	r5, #104	; 0x68
 800bb06:	e7e9      	b.n	800badc <_fwalk_sglue+0x10>

0800bb08 <siprintf>:
 800bb08:	b40e      	push	{r1, r2, r3}
 800bb0a:	b500      	push	{lr}
 800bb0c:	b09c      	sub	sp, #112	; 0x70
 800bb0e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb10:	9002      	str	r0, [sp, #8]
 800bb12:	9006      	str	r0, [sp, #24]
 800bb14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb18:	4809      	ldr	r0, [pc, #36]	; (800bb40 <siprintf+0x38>)
 800bb1a:	9107      	str	r1, [sp, #28]
 800bb1c:	9104      	str	r1, [sp, #16]
 800bb1e:	4909      	ldr	r1, [pc, #36]	; (800bb44 <siprintf+0x3c>)
 800bb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb24:	9105      	str	r1, [sp, #20]
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	a902      	add	r1, sp, #8
 800bb2c:	f002 fc50 	bl	800e3d0 <_svfiprintf_r>
 800bb30:	9b02      	ldr	r3, [sp, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	b01c      	add	sp, #112	; 0x70
 800bb38:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb3c:	b003      	add	sp, #12
 800bb3e:	4770      	bx	lr
 800bb40:	20000068 	.word	0x20000068
 800bb44:	ffff0208 	.word	0xffff0208

0800bb48 <__sread>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb50:	f000 f8c2 	bl	800bcd8 <_read_r>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	bfab      	itete	ge
 800bb58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb5c:	181b      	addge	r3, r3, r0
 800bb5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb62:	bfac      	ite	ge
 800bb64:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb66:	81a3      	strhlt	r3, [r4, #12]
 800bb68:	bd10      	pop	{r4, pc}

0800bb6a <__swrite>:
 800bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6e:	461f      	mov	r7, r3
 800bb70:	898b      	ldrh	r3, [r1, #12]
 800bb72:	05db      	lsls	r3, r3, #23
 800bb74:	4605      	mov	r5, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	4616      	mov	r6, r2
 800bb7a:	d505      	bpl.n	800bb88 <__swrite+0x1e>
 800bb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb80:	2302      	movs	r3, #2
 800bb82:	2200      	movs	r2, #0
 800bb84:	f000 f896 	bl	800bcb4 <_lseek_r>
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb92:	81a3      	strh	r3, [r4, #12]
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	4628      	mov	r0, r5
 800bb9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9e:	f000 b8ad 	b.w	800bcfc <_write_r>

0800bba2 <__sseek>:
 800bba2:	b510      	push	{r4, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbaa:	f000 f883 	bl	800bcb4 <_lseek_r>
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	bf15      	itete	ne
 800bbb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbbe:	81a3      	strheq	r3, [r4, #12]
 800bbc0:	bf18      	it	ne
 800bbc2:	81a3      	strhne	r3, [r4, #12]
 800bbc4:	bd10      	pop	{r4, pc}

0800bbc6 <__sclose>:
 800bbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbca:	f000 b80d 	b.w	800bbe8 <_close_r>

0800bbce <memset>:
 800bbce:	4402      	add	r2, r0
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d100      	bne.n	800bbd8 <memset+0xa>
 800bbd6:	4770      	bx	lr
 800bbd8:	f803 1b01 	strb.w	r1, [r3], #1
 800bbdc:	e7f9      	b.n	800bbd2 <memset+0x4>
	...

0800bbe0 <_localeconv_r>:
 800bbe0:	4800      	ldr	r0, [pc, #0]	; (800bbe4 <_localeconv_r+0x4>)
 800bbe2:	4770      	bx	lr
 800bbe4:	2000015c 	.word	0x2000015c

0800bbe8 <_close_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_close_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f5 fec3 	bl	800197e <_close>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_close_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_close_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	200061c4 	.word	0x200061c4

0800bc08 <_reclaim_reent>:
 800bc08:	4b29      	ldr	r3, [pc, #164]	; (800bcb0 <_reclaim_reent+0xa8>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4283      	cmp	r3, r0
 800bc0e:	b570      	push	{r4, r5, r6, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	d04b      	beq.n	800bcac <_reclaim_reent+0xa4>
 800bc14:	69c3      	ldr	r3, [r0, #28]
 800bc16:	b143      	cbz	r3, 800bc2a <_reclaim_reent+0x22>
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d144      	bne.n	800bca8 <_reclaim_reent+0xa0>
 800bc1e:	69e3      	ldr	r3, [r4, #28]
 800bc20:	6819      	ldr	r1, [r3, #0]
 800bc22:	b111      	cbz	r1, 800bc2a <_reclaim_reent+0x22>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 ff35 	bl	800ca94 <_free_r>
 800bc2a:	6961      	ldr	r1, [r4, #20]
 800bc2c:	b111      	cbz	r1, 800bc34 <_reclaim_reent+0x2c>
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 ff30 	bl	800ca94 <_free_r>
 800bc34:	69e1      	ldr	r1, [r4, #28]
 800bc36:	b111      	cbz	r1, 800bc3e <_reclaim_reent+0x36>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 ff2b 	bl	800ca94 <_free_r>
 800bc3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bc40:	b111      	cbz	r1, 800bc48 <_reclaim_reent+0x40>
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 ff26 	bl	800ca94 <_free_r>
 800bc48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc4a:	b111      	cbz	r1, 800bc52 <_reclaim_reent+0x4a>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 ff21 	bl	800ca94 <_free_r>
 800bc52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc54:	b111      	cbz	r1, 800bc5c <_reclaim_reent+0x54>
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 ff1c 	bl	800ca94 <_free_r>
 800bc5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc5e:	b111      	cbz	r1, 800bc66 <_reclaim_reent+0x5e>
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 ff17 	bl	800ca94 <_free_r>
 800bc66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bc68:	b111      	cbz	r1, 800bc70 <_reclaim_reent+0x68>
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 ff12 	bl	800ca94 <_free_r>
 800bc70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bc72:	b111      	cbz	r1, 800bc7a <_reclaim_reent+0x72>
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 ff0d 	bl	800ca94 <_free_r>
 800bc7a:	6a23      	ldr	r3, [r4, #32]
 800bc7c:	b1b3      	cbz	r3, 800bcac <_reclaim_reent+0xa4>
 800bc7e:	4620      	mov	r0, r4
 800bc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc84:	4718      	bx	r3
 800bc86:	5949      	ldr	r1, [r1, r5]
 800bc88:	b941      	cbnz	r1, 800bc9c <_reclaim_reent+0x94>
 800bc8a:	3504      	adds	r5, #4
 800bc8c:	69e3      	ldr	r3, [r4, #28]
 800bc8e:	2d80      	cmp	r5, #128	; 0x80
 800bc90:	68d9      	ldr	r1, [r3, #12]
 800bc92:	d1f8      	bne.n	800bc86 <_reclaim_reent+0x7e>
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 fefd 	bl	800ca94 <_free_r>
 800bc9a:	e7c0      	b.n	800bc1e <_reclaim_reent+0x16>
 800bc9c:	680e      	ldr	r6, [r1, #0]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fef8 	bl	800ca94 <_free_r>
 800bca4:	4631      	mov	r1, r6
 800bca6:	e7ef      	b.n	800bc88 <_reclaim_reent+0x80>
 800bca8:	2500      	movs	r5, #0
 800bcaa:	e7ef      	b.n	800bc8c <_reclaim_reent+0x84>
 800bcac:	bd70      	pop	{r4, r5, r6, pc}
 800bcae:	bf00      	nop
 800bcb0:	20000068 	.word	0x20000068

0800bcb4 <_lseek_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d07      	ldr	r5, [pc, #28]	; (800bcd4 <_lseek_r+0x20>)
 800bcb8:	4604      	mov	r4, r0
 800bcba:	4608      	mov	r0, r1
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	602a      	str	r2, [r5, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f7f5 fe82 	bl	80019cc <_lseek>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d102      	bne.n	800bcd2 <_lseek_r+0x1e>
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	b103      	cbz	r3, 800bcd2 <_lseek_r+0x1e>
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	200061c4 	.word	0x200061c4

0800bcd8 <_read_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	; (800bcf8 <_read_r+0x20>)
 800bcdc:	4604      	mov	r4, r0
 800bcde:	4608      	mov	r0, r1
 800bce0:	4611      	mov	r1, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	602a      	str	r2, [r5, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f7f5 fe10 	bl	800190c <_read>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_read_r+0x1e>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_read_r+0x1e>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	200061c4 	.word	0x200061c4

0800bcfc <_write_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d07      	ldr	r5, [pc, #28]	; (800bd1c <_write_r+0x20>)
 800bd00:	4604      	mov	r4, r0
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	2200      	movs	r2, #0
 800bd08:	602a      	str	r2, [r5, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f7f5 fe1b 	bl	8001946 <_write>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_write_r+0x1e>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_write_r+0x1e>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	200061c4 	.word	0x200061c4

0800bd20 <__errno>:
 800bd20:	4b01      	ldr	r3, [pc, #4]	; (800bd28 <__errno+0x8>)
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	20000068 	.word	0x20000068

0800bd2c <__libc_init_array>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	4d0d      	ldr	r5, [pc, #52]	; (800bd64 <__libc_init_array+0x38>)
 800bd30:	4c0d      	ldr	r4, [pc, #52]	; (800bd68 <__libc_init_array+0x3c>)
 800bd32:	1b64      	subs	r4, r4, r5
 800bd34:	10a4      	asrs	r4, r4, #2
 800bd36:	2600      	movs	r6, #0
 800bd38:	42a6      	cmp	r6, r4
 800bd3a:	d109      	bne.n	800bd50 <__libc_init_array+0x24>
 800bd3c:	4d0b      	ldr	r5, [pc, #44]	; (800bd6c <__libc_init_array+0x40>)
 800bd3e:	4c0c      	ldr	r4, [pc, #48]	; (800bd70 <__libc_init_array+0x44>)
 800bd40:	f003 fbd2 	bl	800f4e8 <_init>
 800bd44:	1b64      	subs	r4, r4, r5
 800bd46:	10a4      	asrs	r4, r4, #2
 800bd48:	2600      	movs	r6, #0
 800bd4a:	42a6      	cmp	r6, r4
 800bd4c:	d105      	bne.n	800bd5a <__libc_init_array+0x2e>
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd54:	4798      	blx	r3
 800bd56:	3601      	adds	r6, #1
 800bd58:	e7ee      	b.n	800bd38 <__libc_init_array+0xc>
 800bd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd5e:	4798      	blx	r3
 800bd60:	3601      	adds	r6, #1
 800bd62:	e7f2      	b.n	800bd4a <__libc_init_array+0x1e>
 800bd64:	0800fd38 	.word	0x0800fd38
 800bd68:	0800fd38 	.word	0x0800fd38
 800bd6c:	0800fd38 	.word	0x0800fd38
 800bd70:	0800fd3c 	.word	0x0800fd3c

0800bd74 <__retarget_lock_acquire_recursive>:
 800bd74:	4770      	bx	lr

0800bd76 <__retarget_lock_release_recursive>:
 800bd76:	4770      	bx	lr

0800bd78 <memcpy>:
 800bd78:	440a      	add	r2, r1
 800bd7a:	4291      	cmp	r1, r2
 800bd7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd80:	d100      	bne.n	800bd84 <memcpy+0xc>
 800bd82:	4770      	bx	lr
 800bd84:	b510      	push	{r4, lr}
 800bd86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd8e:	4291      	cmp	r1, r2
 800bd90:	d1f9      	bne.n	800bd86 <memcpy+0xe>
 800bd92:	bd10      	pop	{r4, pc}

0800bd94 <nanf>:
 800bd94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd9c <nanf+0x8>
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	7fc00000 	.word	0x7fc00000

0800bda0 <quorem>:
 800bda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	6903      	ldr	r3, [r0, #16]
 800bda6:	690c      	ldr	r4, [r1, #16]
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	4607      	mov	r7, r0
 800bdac:	db7e      	blt.n	800beac <quorem+0x10c>
 800bdae:	3c01      	subs	r4, #1
 800bdb0:	f101 0814 	add.w	r8, r1, #20
 800bdb4:	f100 0514 	add.w	r5, r0, #20
 800bdb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bdce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdd6:	d331      	bcc.n	800be3c <quorem+0x9c>
 800bdd8:	f04f 0e00 	mov.w	lr, #0
 800bddc:	4640      	mov	r0, r8
 800bdde:	46ac      	mov	ip, r5
 800bde0:	46f2      	mov	sl, lr
 800bde2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bde6:	b293      	uxth	r3, r2
 800bde8:	fb06 e303 	mla	r3, r6, r3, lr
 800bdec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bdf0:	0c1a      	lsrs	r2, r3, #16
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	ebaa 0303 	sub.w	r3, sl, r3
 800bdf8:	f8dc a000 	ldr.w	sl, [ip]
 800bdfc:	fa13 f38a 	uxtah	r3, r3, sl
 800be00:	fb06 220e 	mla	r2, r6, lr, r2
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	9b00      	ldr	r3, [sp, #0]
 800be08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be0c:	b292      	uxth	r2, r2
 800be0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be16:	f8bd 3000 	ldrh.w	r3, [sp]
 800be1a:	4581      	cmp	r9, r0
 800be1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be20:	f84c 3b04 	str.w	r3, [ip], #4
 800be24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be28:	d2db      	bcs.n	800bde2 <quorem+0x42>
 800be2a:	f855 300b 	ldr.w	r3, [r5, fp]
 800be2e:	b92b      	cbnz	r3, 800be3c <quorem+0x9c>
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	3b04      	subs	r3, #4
 800be34:	429d      	cmp	r5, r3
 800be36:	461a      	mov	r2, r3
 800be38:	d32c      	bcc.n	800be94 <quorem+0xf4>
 800be3a:	613c      	str	r4, [r7, #16]
 800be3c:	4638      	mov	r0, r7
 800be3e:	f001 f9ef 	bl	800d220 <__mcmp>
 800be42:	2800      	cmp	r0, #0
 800be44:	db22      	blt.n	800be8c <quorem+0xec>
 800be46:	3601      	adds	r6, #1
 800be48:	4629      	mov	r1, r5
 800be4a:	2000      	movs	r0, #0
 800be4c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be50:	f8d1 c000 	ldr.w	ip, [r1]
 800be54:	b293      	uxth	r3, r2
 800be56:	1ac3      	subs	r3, r0, r3
 800be58:	0c12      	lsrs	r2, r2, #16
 800be5a:	fa13 f38c 	uxtah	r3, r3, ip
 800be5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800be62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be66:	b29b      	uxth	r3, r3
 800be68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be6c:	45c1      	cmp	r9, r8
 800be6e:	f841 3b04 	str.w	r3, [r1], #4
 800be72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be76:	d2e9      	bcs.n	800be4c <quorem+0xac>
 800be78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be80:	b922      	cbnz	r2, 800be8c <quorem+0xec>
 800be82:	3b04      	subs	r3, #4
 800be84:	429d      	cmp	r5, r3
 800be86:	461a      	mov	r2, r3
 800be88:	d30a      	bcc.n	800bea0 <quorem+0x100>
 800be8a:	613c      	str	r4, [r7, #16]
 800be8c:	4630      	mov	r0, r6
 800be8e:	b003      	add	sp, #12
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be94:	6812      	ldr	r2, [r2, #0]
 800be96:	3b04      	subs	r3, #4
 800be98:	2a00      	cmp	r2, #0
 800be9a:	d1ce      	bne.n	800be3a <quorem+0x9a>
 800be9c:	3c01      	subs	r4, #1
 800be9e:	e7c9      	b.n	800be34 <quorem+0x94>
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	3b04      	subs	r3, #4
 800bea4:	2a00      	cmp	r2, #0
 800bea6:	d1f0      	bne.n	800be8a <quorem+0xea>
 800bea8:	3c01      	subs	r4, #1
 800beaa:	e7eb      	b.n	800be84 <quorem+0xe4>
 800beac:	2000      	movs	r0, #0
 800beae:	e7ee      	b.n	800be8e <quorem+0xee>

0800beb0 <_dtoa_r>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	ed2d 8b04 	vpush	{d8-d9}
 800beb8:	69c5      	ldr	r5, [r0, #28]
 800beba:	b093      	sub	sp, #76	; 0x4c
 800bebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bec0:	ec57 6b10 	vmov	r6, r7, d0
 800bec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bec8:	9107      	str	r1, [sp, #28]
 800beca:	4604      	mov	r4, r0
 800becc:	920a      	str	r2, [sp, #40]	; 0x28
 800bece:	930d      	str	r3, [sp, #52]	; 0x34
 800bed0:	b975      	cbnz	r5, 800bef0 <_dtoa_r+0x40>
 800bed2:	2010      	movs	r0, #16
 800bed4:	f000 fe2a 	bl	800cb2c <malloc>
 800bed8:	4602      	mov	r2, r0
 800beda:	61e0      	str	r0, [r4, #28]
 800bedc:	b920      	cbnz	r0, 800bee8 <_dtoa_r+0x38>
 800bede:	4bae      	ldr	r3, [pc, #696]	; (800c198 <_dtoa_r+0x2e8>)
 800bee0:	21ef      	movs	r1, #239	; 0xef
 800bee2:	48ae      	ldr	r0, [pc, #696]	; (800c19c <_dtoa_r+0x2ec>)
 800bee4:	f002 fc64 	bl	800e7b0 <__assert_func>
 800bee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800beec:	6005      	str	r5, [r0, #0]
 800beee:	60c5      	str	r5, [r0, #12]
 800bef0:	69e3      	ldr	r3, [r4, #28]
 800bef2:	6819      	ldr	r1, [r3, #0]
 800bef4:	b151      	cbz	r1, 800bf0c <_dtoa_r+0x5c>
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	604a      	str	r2, [r1, #4]
 800befa:	2301      	movs	r3, #1
 800befc:	4093      	lsls	r3, r2
 800befe:	608b      	str	r3, [r1, #8]
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 ff07 	bl	800cd14 <_Bfree>
 800bf06:	69e3      	ldr	r3, [r4, #28]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	1e3b      	subs	r3, r7, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf14:	9303      	strlt	r3, [sp, #12]
 800bf16:	2300      	movge	r3, #0
 800bf18:	2201      	movlt	r2, #1
 800bf1a:	bfac      	ite	ge
 800bf1c:	f8c8 3000 	strge.w	r3, [r8]
 800bf20:	f8c8 2000 	strlt.w	r2, [r8]
 800bf24:	4b9e      	ldr	r3, [pc, #632]	; (800c1a0 <_dtoa_r+0x2f0>)
 800bf26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bf2a:	ea33 0308 	bics.w	r3, r3, r8
 800bf2e:	d11b      	bne.n	800bf68 <_dtoa_r+0xb8>
 800bf30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf32:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bf3c:	4333      	orrs	r3, r6
 800bf3e:	f000 8593 	beq.w	800ca68 <_dtoa_r+0xbb8>
 800bf42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf44:	b963      	cbnz	r3, 800bf60 <_dtoa_r+0xb0>
 800bf46:	4b97      	ldr	r3, [pc, #604]	; (800c1a4 <_dtoa_r+0x2f4>)
 800bf48:	e027      	b.n	800bf9a <_dtoa_r+0xea>
 800bf4a:	4b97      	ldr	r3, [pc, #604]	; (800c1a8 <_dtoa_r+0x2f8>)
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	3308      	adds	r3, #8
 800bf50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	9800      	ldr	r0, [sp, #0]
 800bf56:	b013      	add	sp, #76	; 0x4c
 800bf58:	ecbd 8b04 	vpop	{d8-d9}
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	4b90      	ldr	r3, [pc, #576]	; (800c1a4 <_dtoa_r+0x2f4>)
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	3303      	adds	r3, #3
 800bf66:	e7f3      	b.n	800bf50 <_dtoa_r+0xa0>
 800bf68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	ec51 0b17 	vmov	r0, r1, d7
 800bf72:	eeb0 8a47 	vmov.f32	s16, s14
 800bf76:	eef0 8a67 	vmov.f32	s17, s15
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f7f4 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf80:	4681      	mov	r9, r0
 800bf82:	b160      	cbz	r0, 800bf9e <_dtoa_r+0xee>
 800bf84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf86:	2301      	movs	r3, #1
 800bf88:	6013      	str	r3, [r2, #0]
 800bf8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f000 8568 	beq.w	800ca62 <_dtoa_r+0xbb2>
 800bf92:	4b86      	ldr	r3, [pc, #536]	; (800c1ac <_dtoa_r+0x2fc>)
 800bf94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	e7da      	b.n	800bf54 <_dtoa_r+0xa4>
 800bf9e:	aa10      	add	r2, sp, #64	; 0x40
 800bfa0:	a911      	add	r1, sp, #68	; 0x44
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	eeb0 0a48 	vmov.f32	s0, s16
 800bfa8:	eef0 0a68 	vmov.f32	s1, s17
 800bfac:	f001 fa4e 	bl	800d44c <__d2b>
 800bfb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	2d00      	cmp	r5, #0
 800bfb8:	d07f      	beq.n	800c0ba <_dtoa_r+0x20a>
 800bfba:	ee18 3a90 	vmov	r3, s17
 800bfbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bfc6:	ec51 0b18 	vmov	r0, r1, d8
 800bfca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bfd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	2200      	movs	r2, #0
 800bfda:	4b75      	ldr	r3, [pc, #468]	; (800c1b0 <_dtoa_r+0x300>)
 800bfdc:	f7f4 f95c 	bl	8000298 <__aeabi_dsub>
 800bfe0:	a367      	add	r3, pc, #412	; (adr r3, 800c180 <_dtoa_r+0x2d0>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 fb0f 	bl	8000608 <__aeabi_dmul>
 800bfea:	a367      	add	r3, pc, #412	; (adr r3, 800c188 <_dtoa_r+0x2d8>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 f954 	bl	800029c <__adddf3>
 800bff4:	4606      	mov	r6, r0
 800bff6:	4628      	mov	r0, r5
 800bff8:	460f      	mov	r7, r1
 800bffa:	f7f4 fa9b 	bl	8000534 <__aeabi_i2d>
 800bffe:	a364      	add	r3, pc, #400	; (adr r3, 800c190 <_dtoa_r+0x2e0>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f7f4 fb00 	bl	8000608 <__aeabi_dmul>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f7f4 f944 	bl	800029c <__adddf3>
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	f7f4 fda6 	bl	8000b68 <__aeabi_d2iz>
 800c01c:	2200      	movs	r2, #0
 800c01e:	4683      	mov	fp, r0
 800c020:	2300      	movs	r3, #0
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 fd61 	bl	8000aec <__aeabi_dcmplt>
 800c02a:	b148      	cbz	r0, 800c040 <_dtoa_r+0x190>
 800c02c:	4658      	mov	r0, fp
 800c02e:	f7f4 fa81 	bl	8000534 <__aeabi_i2d>
 800c032:	4632      	mov	r2, r6
 800c034:	463b      	mov	r3, r7
 800c036:	f7f4 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c03a:	b908      	cbnz	r0, 800c040 <_dtoa_r+0x190>
 800c03c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c040:	f1bb 0f16 	cmp.w	fp, #22
 800c044:	d857      	bhi.n	800c0f6 <_dtoa_r+0x246>
 800c046:	4b5b      	ldr	r3, [pc, #364]	; (800c1b4 <_dtoa_r+0x304>)
 800c048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	ec51 0b18 	vmov	r0, r1, d8
 800c054:	f7f4 fd4a 	bl	8000aec <__aeabi_dcmplt>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d04e      	beq.n	800c0fa <_dtoa_r+0x24a>
 800c05c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c060:	2300      	movs	r3, #0
 800c062:	930c      	str	r3, [sp, #48]	; 0x30
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	1b5b      	subs	r3, r3, r5
 800c068:	1e5a      	subs	r2, r3, #1
 800c06a:	bf45      	ittet	mi
 800c06c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c070:	9305      	strmi	r3, [sp, #20]
 800c072:	2300      	movpl	r3, #0
 800c074:	2300      	movmi	r3, #0
 800c076:	9206      	str	r2, [sp, #24]
 800c078:	bf54      	ite	pl
 800c07a:	9305      	strpl	r3, [sp, #20]
 800c07c:	9306      	strmi	r3, [sp, #24]
 800c07e:	f1bb 0f00 	cmp.w	fp, #0
 800c082:	db3c      	blt.n	800c0fe <_dtoa_r+0x24e>
 800c084:	9b06      	ldr	r3, [sp, #24]
 800c086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c08a:	445b      	add	r3, fp
 800c08c:	9306      	str	r3, [sp, #24]
 800c08e:	2300      	movs	r3, #0
 800c090:	9308      	str	r3, [sp, #32]
 800c092:	9b07      	ldr	r3, [sp, #28]
 800c094:	2b09      	cmp	r3, #9
 800c096:	d868      	bhi.n	800c16a <_dtoa_r+0x2ba>
 800c098:	2b05      	cmp	r3, #5
 800c09a:	bfc4      	itt	gt
 800c09c:	3b04      	subgt	r3, #4
 800c09e:	9307      	strgt	r3, [sp, #28]
 800c0a0:	9b07      	ldr	r3, [sp, #28]
 800c0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c0a6:	bfcc      	ite	gt
 800c0a8:	2500      	movgt	r5, #0
 800c0aa:	2501      	movle	r5, #1
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	f200 8085 	bhi.w	800c1bc <_dtoa_r+0x30c>
 800c0b2:	e8df f003 	tbb	[pc, r3]
 800c0b6:	3b2e      	.short	0x3b2e
 800c0b8:	5839      	.short	0x5839
 800c0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c0be:	441d      	add	r5, r3
 800c0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c0c4:	2b20      	cmp	r3, #32
 800c0c6:	bfc1      	itttt	gt
 800c0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c0d8:	bfd6      	itet	le
 800c0da:	f1c3 0320 	rsble	r3, r3, #32
 800c0de:	ea48 0003 	orrgt.w	r0, r8, r3
 800c0e2:	fa06 f003 	lslle.w	r0, r6, r3
 800c0e6:	f7f4 fa15 	bl	8000514 <__aeabi_ui2d>
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c0f0:	3d01      	subs	r5, #1
 800c0f2:	920e      	str	r2, [sp, #56]	; 0x38
 800c0f4:	e76f      	b.n	800bfd6 <_dtoa_r+0x126>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e7b3      	b.n	800c062 <_dtoa_r+0x1b2>
 800c0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c0fc:	e7b2      	b.n	800c064 <_dtoa_r+0x1b4>
 800c0fe:	9b05      	ldr	r3, [sp, #20]
 800c100:	eba3 030b 	sub.w	r3, r3, fp
 800c104:	9305      	str	r3, [sp, #20]
 800c106:	f1cb 0300 	rsb	r3, fp, #0
 800c10a:	9308      	str	r3, [sp, #32]
 800c10c:	2300      	movs	r3, #0
 800c10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c110:	e7bf      	b.n	800c092 <_dtoa_r+0x1e2>
 800c112:	2300      	movs	r3, #0
 800c114:	9309      	str	r3, [sp, #36]	; 0x24
 800c116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc52      	bgt.n	800c1c2 <_dtoa_r+0x312>
 800c11c:	2301      	movs	r3, #1
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	461a      	mov	r2, r3
 800c124:	920a      	str	r2, [sp, #40]	; 0x28
 800c126:	e00b      	b.n	800c140 <_dtoa_r+0x290>
 800c128:	2301      	movs	r3, #1
 800c12a:	e7f3      	b.n	800c114 <_dtoa_r+0x264>
 800c12c:	2300      	movs	r3, #0
 800c12e:	9309      	str	r3, [sp, #36]	; 0x24
 800c130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c132:	445b      	add	r3, fp
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	3301      	adds	r3, #1
 800c138:	2b01      	cmp	r3, #1
 800c13a:	9304      	str	r3, [sp, #16]
 800c13c:	bfb8      	it	lt
 800c13e:	2301      	movlt	r3, #1
 800c140:	69e0      	ldr	r0, [r4, #28]
 800c142:	2100      	movs	r1, #0
 800c144:	2204      	movs	r2, #4
 800c146:	f102 0614 	add.w	r6, r2, #20
 800c14a:	429e      	cmp	r6, r3
 800c14c:	d93d      	bls.n	800c1ca <_dtoa_r+0x31a>
 800c14e:	6041      	str	r1, [r0, #4]
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fd9f 	bl	800cc94 <_Balloc>
 800c156:	9000      	str	r0, [sp, #0]
 800c158:	2800      	cmp	r0, #0
 800c15a:	d139      	bne.n	800c1d0 <_dtoa_r+0x320>
 800c15c:	4b16      	ldr	r3, [pc, #88]	; (800c1b8 <_dtoa_r+0x308>)
 800c15e:	4602      	mov	r2, r0
 800c160:	f240 11af 	movw	r1, #431	; 0x1af
 800c164:	e6bd      	b.n	800bee2 <_dtoa_r+0x32>
 800c166:	2301      	movs	r3, #1
 800c168:	e7e1      	b.n	800c12e <_dtoa_r+0x27e>
 800c16a:	2501      	movs	r5, #1
 800c16c:	2300      	movs	r3, #0
 800c16e:	9307      	str	r3, [sp, #28]
 800c170:	9509      	str	r5, [sp, #36]	; 0x24
 800c172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	2200      	movs	r2, #0
 800c17c:	2312      	movs	r3, #18
 800c17e:	e7d1      	b.n	800c124 <_dtoa_r+0x274>
 800c180:	636f4361 	.word	0x636f4361
 800c184:	3fd287a7 	.word	0x3fd287a7
 800c188:	8b60c8b3 	.word	0x8b60c8b3
 800c18c:	3fc68a28 	.word	0x3fc68a28
 800c190:	509f79fb 	.word	0x509f79fb
 800c194:	3fd34413 	.word	0x3fd34413
 800c198:	0800f94e 	.word	0x0800f94e
 800c19c:	0800f965 	.word	0x0800f965
 800c1a0:	7ff00000 	.word	0x7ff00000
 800c1a4:	0800f94a 	.word	0x0800f94a
 800c1a8:	0800f941 	.word	0x0800f941
 800c1ac:	0800f919 	.word	0x0800f919
 800c1b0:	3ff80000 	.word	0x3ff80000
 800c1b4:	0800fa50 	.word	0x0800fa50
 800c1b8:	0800f9bd 	.word	0x0800f9bd
 800c1bc:	2301      	movs	r3, #1
 800c1be:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c0:	e7d7      	b.n	800c172 <_dtoa_r+0x2c2>
 800c1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	e7ba      	b.n	800c140 <_dtoa_r+0x290>
 800c1ca:	3101      	adds	r1, #1
 800c1cc:	0052      	lsls	r2, r2, #1
 800c1ce:	e7ba      	b.n	800c146 <_dtoa_r+0x296>
 800c1d0:	69e3      	ldr	r3, [r4, #28]
 800c1d2:	9a00      	ldr	r2, [sp, #0]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	9b04      	ldr	r3, [sp, #16]
 800c1d8:	2b0e      	cmp	r3, #14
 800c1da:	f200 80a8 	bhi.w	800c32e <_dtoa_r+0x47e>
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	f000 80a5 	beq.w	800c32e <_dtoa_r+0x47e>
 800c1e4:	f1bb 0f00 	cmp.w	fp, #0
 800c1e8:	dd38      	ble.n	800c25c <_dtoa_r+0x3ac>
 800c1ea:	4bc0      	ldr	r3, [pc, #768]	; (800c4ec <_dtoa_r+0x63c>)
 800c1ec:	f00b 020f 	and.w	r2, fp, #15
 800c1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c200:	d019      	beq.n	800c236 <_dtoa_r+0x386>
 800c202:	4bbb      	ldr	r3, [pc, #748]	; (800c4f0 <_dtoa_r+0x640>)
 800c204:	ec51 0b18 	vmov	r0, r1, d8
 800c208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c20c:	f7f4 fb26 	bl	800085c <__aeabi_ddiv>
 800c210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c214:	f008 080f 	and.w	r8, r8, #15
 800c218:	2503      	movs	r5, #3
 800c21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c4f0 <_dtoa_r+0x640>
 800c21e:	f1b8 0f00 	cmp.w	r8, #0
 800c222:	d10a      	bne.n	800c23a <_dtoa_r+0x38a>
 800c224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c228:	4632      	mov	r2, r6
 800c22a:	463b      	mov	r3, r7
 800c22c:	f7f4 fb16 	bl	800085c <__aeabi_ddiv>
 800c230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c234:	e02b      	b.n	800c28e <_dtoa_r+0x3de>
 800c236:	2502      	movs	r5, #2
 800c238:	e7ef      	b.n	800c21a <_dtoa_r+0x36a>
 800c23a:	f018 0f01 	tst.w	r8, #1
 800c23e:	d008      	beq.n	800c252 <_dtoa_r+0x3a2>
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c248:	f7f4 f9de 	bl	8000608 <__aeabi_dmul>
 800c24c:	3501      	adds	r5, #1
 800c24e:	4606      	mov	r6, r0
 800c250:	460f      	mov	r7, r1
 800c252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c256:	f109 0908 	add.w	r9, r9, #8
 800c25a:	e7e0      	b.n	800c21e <_dtoa_r+0x36e>
 800c25c:	f000 809f 	beq.w	800c39e <_dtoa_r+0x4ee>
 800c260:	f1cb 0600 	rsb	r6, fp, #0
 800c264:	4ba1      	ldr	r3, [pc, #644]	; (800c4ec <_dtoa_r+0x63c>)
 800c266:	4fa2      	ldr	r7, [pc, #648]	; (800c4f0 <_dtoa_r+0x640>)
 800c268:	f006 020f 	and.w	r2, r6, #15
 800c26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	ec51 0b18 	vmov	r0, r1, d8
 800c278:	f7f4 f9c6 	bl	8000608 <__aeabi_dmul>
 800c27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c280:	1136      	asrs	r6, r6, #4
 800c282:	2300      	movs	r3, #0
 800c284:	2502      	movs	r5, #2
 800c286:	2e00      	cmp	r6, #0
 800c288:	d17e      	bne.n	800c388 <_dtoa_r+0x4d8>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1d0      	bne.n	800c230 <_dtoa_r+0x380>
 800c28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 8084 	beq.w	800c3a2 <_dtoa_r+0x4f2>
 800c29a:	4b96      	ldr	r3, [pc, #600]	; (800c4f4 <_dtoa_r+0x644>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	f7f4 fc23 	bl	8000aec <__aeabi_dcmplt>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d07b      	beq.n	800c3a2 <_dtoa_r+0x4f2>
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d078      	beq.n	800c3a2 <_dtoa_r+0x4f2>
 800c2b0:	9b01      	ldr	r3, [sp, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	dd39      	ble.n	800c32a <_dtoa_r+0x47a>
 800c2b6:	4b90      	ldr	r3, [pc, #576]	; (800c4f8 <_dtoa_r+0x648>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	4649      	mov	r1, r9
 800c2be:	f7f4 f9a3 	bl	8000608 <__aeabi_dmul>
 800c2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c6:	9e01      	ldr	r6, [sp, #4]
 800c2c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c2cc:	3501      	adds	r5, #1
 800c2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7f4 f92e 	bl	8000534 <__aeabi_i2d>
 800c2d8:	4642      	mov	r2, r8
 800c2da:	464b      	mov	r3, r9
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	4b86      	ldr	r3, [pc, #536]	; (800c4fc <_dtoa_r+0x64c>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7f3 ffda 	bl	800029c <__adddf3>
 800c2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	2e00      	cmp	r6, #0
 800c2f4:	d158      	bne.n	800c3a8 <_dtoa_r+0x4f8>
 800c2f6:	4b82      	ldr	r3, [pc, #520]	; (800c500 <_dtoa_r+0x650>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	f7f3 ffcb 	bl	8000298 <__aeabi_dsub>
 800c302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c306:	4680      	mov	r8, r0
 800c308:	4689      	mov	r9, r1
 800c30a:	f7f4 fc0d 	bl	8000b28 <__aeabi_dcmpgt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 8296 	bne.w	800c840 <_dtoa_r+0x990>
 800c314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c318:	4640      	mov	r0, r8
 800c31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c31e:	4649      	mov	r1, r9
 800c320:	f7f4 fbe4 	bl	8000aec <__aeabi_dcmplt>
 800c324:	2800      	cmp	r0, #0
 800c326:	f040 8289 	bne.w	800c83c <_dtoa_r+0x98c>
 800c32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c330:	2b00      	cmp	r3, #0
 800c332:	f2c0 814e 	blt.w	800c5d2 <_dtoa_r+0x722>
 800c336:	f1bb 0f0e 	cmp.w	fp, #14
 800c33a:	f300 814a 	bgt.w	800c5d2 <_dtoa_r+0x722>
 800c33e:	4b6b      	ldr	r3, [pc, #428]	; (800c4ec <_dtoa_r+0x63c>)
 800c340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f280 80dc 	bge.w	800c508 <_dtoa_r+0x658>
 800c350:	9b04      	ldr	r3, [sp, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f300 80d8 	bgt.w	800c508 <_dtoa_r+0x658>
 800c358:	f040 826f 	bne.w	800c83a <_dtoa_r+0x98a>
 800c35c:	4b68      	ldr	r3, [pc, #416]	; (800c500 <_dtoa_r+0x650>)
 800c35e:	2200      	movs	r2, #0
 800c360:	4640      	mov	r0, r8
 800c362:	4649      	mov	r1, r9
 800c364:	f7f4 f950 	bl	8000608 <__aeabi_dmul>
 800c368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c36c:	f7f4 fbd2 	bl	8000b14 <__aeabi_dcmpge>
 800c370:	9e04      	ldr	r6, [sp, #16]
 800c372:	4637      	mov	r7, r6
 800c374:	2800      	cmp	r0, #0
 800c376:	f040 8245 	bne.w	800c804 <_dtoa_r+0x954>
 800c37a:	9d00      	ldr	r5, [sp, #0]
 800c37c:	2331      	movs	r3, #49	; 0x31
 800c37e:	f805 3b01 	strb.w	r3, [r5], #1
 800c382:	f10b 0b01 	add.w	fp, fp, #1
 800c386:	e241      	b.n	800c80c <_dtoa_r+0x95c>
 800c388:	07f2      	lsls	r2, r6, #31
 800c38a:	d505      	bpl.n	800c398 <_dtoa_r+0x4e8>
 800c38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c390:	f7f4 f93a 	bl	8000608 <__aeabi_dmul>
 800c394:	3501      	adds	r5, #1
 800c396:	2301      	movs	r3, #1
 800c398:	1076      	asrs	r6, r6, #1
 800c39a:	3708      	adds	r7, #8
 800c39c:	e773      	b.n	800c286 <_dtoa_r+0x3d6>
 800c39e:	2502      	movs	r5, #2
 800c3a0:	e775      	b.n	800c28e <_dtoa_r+0x3de>
 800c3a2:	9e04      	ldr	r6, [sp, #16]
 800c3a4:	465f      	mov	r7, fp
 800c3a6:	e792      	b.n	800c2ce <_dtoa_r+0x41e>
 800c3a8:	9900      	ldr	r1, [sp, #0]
 800c3aa:	4b50      	ldr	r3, [pc, #320]	; (800c4ec <_dtoa_r+0x63c>)
 800c3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3b0:	4431      	add	r1, r6
 800c3b2:	9102      	str	r1, [sp, #8]
 800c3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3b6:	eeb0 9a47 	vmov.f32	s18, s14
 800c3ba:	eef0 9a67 	vmov.f32	s19, s15
 800c3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	d044      	beq.n	800c454 <_dtoa_r+0x5a4>
 800c3ca:	494e      	ldr	r1, [pc, #312]	; (800c504 <_dtoa_r+0x654>)
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	f7f4 fa45 	bl	800085c <__aeabi_ddiv>
 800c3d2:	ec53 2b19 	vmov	r2, r3, d9
 800c3d6:	f7f3 ff5f 	bl	8000298 <__aeabi_dsub>
 800c3da:	9d00      	ldr	r5, [sp, #0]
 800c3dc:	ec41 0b19 	vmov	d9, r0, r1
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	f7f4 fbc0 	bl	8000b68 <__aeabi_d2iz>
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	f7f4 f8a3 	bl	8000534 <__aeabi_i2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	f7f3 ff4f 	bl	8000298 <__aeabi_dsub>
 800c3fa:	3630      	adds	r6, #48	; 0x30
 800c3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c400:	ec53 2b19 	vmov	r2, r3, d9
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	f7f4 fb70 	bl	8000aec <__aeabi_dcmplt>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d164      	bne.n	800c4da <_dtoa_r+0x62a>
 800c410:	4642      	mov	r2, r8
 800c412:	464b      	mov	r3, r9
 800c414:	4937      	ldr	r1, [pc, #220]	; (800c4f4 <_dtoa_r+0x644>)
 800c416:	2000      	movs	r0, #0
 800c418:	f7f3 ff3e 	bl	8000298 <__aeabi_dsub>
 800c41c:	ec53 2b19 	vmov	r2, r3, d9
 800c420:	f7f4 fb64 	bl	8000aec <__aeabi_dcmplt>
 800c424:	2800      	cmp	r0, #0
 800c426:	f040 80b6 	bne.w	800c596 <_dtoa_r+0x6e6>
 800c42a:	9b02      	ldr	r3, [sp, #8]
 800c42c:	429d      	cmp	r5, r3
 800c42e:	f43f af7c 	beq.w	800c32a <_dtoa_r+0x47a>
 800c432:	4b31      	ldr	r3, [pc, #196]	; (800c4f8 <_dtoa_r+0x648>)
 800c434:	ec51 0b19 	vmov	r0, r1, d9
 800c438:	2200      	movs	r2, #0
 800c43a:	f7f4 f8e5 	bl	8000608 <__aeabi_dmul>
 800c43e:	4b2e      	ldr	r3, [pc, #184]	; (800c4f8 <_dtoa_r+0x648>)
 800c440:	ec41 0b19 	vmov	d9, r0, r1
 800c444:	2200      	movs	r2, #0
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	f7f4 f8dd 	bl	8000608 <__aeabi_dmul>
 800c44e:	4680      	mov	r8, r0
 800c450:	4689      	mov	r9, r1
 800c452:	e7c5      	b.n	800c3e0 <_dtoa_r+0x530>
 800c454:	ec51 0b17 	vmov	r0, r1, d7
 800c458:	f7f4 f8d6 	bl	8000608 <__aeabi_dmul>
 800c45c:	9b02      	ldr	r3, [sp, #8]
 800c45e:	9d00      	ldr	r5, [sp, #0]
 800c460:	930f      	str	r3, [sp, #60]	; 0x3c
 800c462:	ec41 0b19 	vmov	d9, r0, r1
 800c466:	4649      	mov	r1, r9
 800c468:	4640      	mov	r0, r8
 800c46a:	f7f4 fb7d 	bl	8000b68 <__aeabi_d2iz>
 800c46e:	4606      	mov	r6, r0
 800c470:	f7f4 f860 	bl	8000534 <__aeabi_i2d>
 800c474:	3630      	adds	r6, #48	; 0x30
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4640      	mov	r0, r8
 800c47c:	4649      	mov	r1, r9
 800c47e:	f7f3 ff0b 	bl	8000298 <__aeabi_dsub>
 800c482:	f805 6b01 	strb.w	r6, [r5], #1
 800c486:	9b02      	ldr	r3, [sp, #8]
 800c488:	429d      	cmp	r5, r3
 800c48a:	4680      	mov	r8, r0
 800c48c:	4689      	mov	r9, r1
 800c48e:	f04f 0200 	mov.w	r2, #0
 800c492:	d124      	bne.n	800c4de <_dtoa_r+0x62e>
 800c494:	4b1b      	ldr	r3, [pc, #108]	; (800c504 <_dtoa_r+0x654>)
 800c496:	ec51 0b19 	vmov	r0, r1, d9
 800c49a:	f7f3 feff 	bl	800029c <__adddf3>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	f7f4 fb3f 	bl	8000b28 <__aeabi_dcmpgt>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d173      	bne.n	800c596 <_dtoa_r+0x6e6>
 800c4ae:	ec53 2b19 	vmov	r2, r3, d9
 800c4b2:	4914      	ldr	r1, [pc, #80]	; (800c504 <_dtoa_r+0x654>)
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f7f3 feef 	bl	8000298 <__aeabi_dsub>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 fb13 	bl	8000aec <__aeabi_dcmplt>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f43f af2f 	beq.w	800c32a <_dtoa_r+0x47a>
 800c4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c4ce:	1e6b      	subs	r3, r5, #1
 800c4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4d6:	2b30      	cmp	r3, #48	; 0x30
 800c4d8:	d0f8      	beq.n	800c4cc <_dtoa_r+0x61c>
 800c4da:	46bb      	mov	fp, r7
 800c4dc:	e04a      	b.n	800c574 <_dtoa_r+0x6c4>
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <_dtoa_r+0x648>)
 800c4e0:	f7f4 f892 	bl	8000608 <__aeabi_dmul>
 800c4e4:	4680      	mov	r8, r0
 800c4e6:	4689      	mov	r9, r1
 800c4e8:	e7bd      	b.n	800c466 <_dtoa_r+0x5b6>
 800c4ea:	bf00      	nop
 800c4ec:	0800fa50 	.word	0x0800fa50
 800c4f0:	0800fa28 	.word	0x0800fa28
 800c4f4:	3ff00000 	.word	0x3ff00000
 800c4f8:	40240000 	.word	0x40240000
 800c4fc:	401c0000 	.word	0x401c0000
 800c500:	40140000 	.word	0x40140000
 800c504:	3fe00000 	.word	0x3fe00000
 800c508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c50c:	9d00      	ldr	r5, [sp, #0]
 800c50e:	4642      	mov	r2, r8
 800c510:	464b      	mov	r3, r9
 800c512:	4630      	mov	r0, r6
 800c514:	4639      	mov	r1, r7
 800c516:	f7f4 f9a1 	bl	800085c <__aeabi_ddiv>
 800c51a:	f7f4 fb25 	bl	8000b68 <__aeabi_d2iz>
 800c51e:	9001      	str	r0, [sp, #4]
 800c520:	f7f4 f808 	bl	8000534 <__aeabi_i2d>
 800c524:	4642      	mov	r2, r8
 800c526:	464b      	mov	r3, r9
 800c528:	f7f4 f86e 	bl	8000608 <__aeabi_dmul>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 feb0 	bl	8000298 <__aeabi_dsub>
 800c538:	9e01      	ldr	r6, [sp, #4]
 800c53a:	9f04      	ldr	r7, [sp, #16]
 800c53c:	3630      	adds	r6, #48	; 0x30
 800c53e:	f805 6b01 	strb.w	r6, [r5], #1
 800c542:	9e00      	ldr	r6, [sp, #0]
 800c544:	1bae      	subs	r6, r5, r6
 800c546:	42b7      	cmp	r7, r6
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	d134      	bne.n	800c5b8 <_dtoa_r+0x708>
 800c54e:	f7f3 fea5 	bl	800029c <__adddf3>
 800c552:	4642      	mov	r2, r8
 800c554:	464b      	mov	r3, r9
 800c556:	4606      	mov	r6, r0
 800c558:	460f      	mov	r7, r1
 800c55a:	f7f4 fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800c55e:	b9c8      	cbnz	r0, 800c594 <_dtoa_r+0x6e4>
 800c560:	4642      	mov	r2, r8
 800c562:	464b      	mov	r3, r9
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f4 fab6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c56c:	b110      	cbz	r0, 800c574 <_dtoa_r+0x6c4>
 800c56e:	9b01      	ldr	r3, [sp, #4]
 800c570:	07db      	lsls	r3, r3, #31
 800c572:	d40f      	bmi.n	800c594 <_dtoa_r+0x6e4>
 800c574:	4651      	mov	r1, sl
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fbcc 	bl	800cd14 <_Bfree>
 800c57c:	2300      	movs	r3, #0
 800c57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c580:	702b      	strb	r3, [r5, #0]
 800c582:	f10b 0301 	add.w	r3, fp, #1
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f43f ace2 	beq.w	800bf54 <_dtoa_r+0xa4>
 800c590:	601d      	str	r5, [r3, #0]
 800c592:	e4df      	b.n	800bf54 <_dtoa_r+0xa4>
 800c594:	465f      	mov	r7, fp
 800c596:	462b      	mov	r3, r5
 800c598:	461d      	mov	r5, r3
 800c59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c59e:	2a39      	cmp	r2, #57	; 0x39
 800c5a0:	d106      	bne.n	800c5b0 <_dtoa_r+0x700>
 800c5a2:	9a00      	ldr	r2, [sp, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d1f7      	bne.n	800c598 <_dtoa_r+0x6e8>
 800c5a8:	9900      	ldr	r1, [sp, #0]
 800c5aa:	2230      	movs	r2, #48	; 0x30
 800c5ac:	3701      	adds	r7, #1
 800c5ae:	700a      	strb	r2, [r1, #0]
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	3201      	adds	r2, #1
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	e790      	b.n	800c4da <_dtoa_r+0x62a>
 800c5b8:	4ba3      	ldr	r3, [pc, #652]	; (800c848 <_dtoa_r+0x998>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f7f4 f824 	bl	8000608 <__aeabi_dmul>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	460f      	mov	r7, r1
 800c5c8:	f7f4 fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d09e      	beq.n	800c50e <_dtoa_r+0x65e>
 800c5d0:	e7d0      	b.n	800c574 <_dtoa_r+0x6c4>
 800c5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5d4:	2a00      	cmp	r2, #0
 800c5d6:	f000 80ca 	beq.w	800c76e <_dtoa_r+0x8be>
 800c5da:	9a07      	ldr	r2, [sp, #28]
 800c5dc:	2a01      	cmp	r2, #1
 800c5de:	f300 80ad 	bgt.w	800c73c <_dtoa_r+0x88c>
 800c5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	f000 80a5 	beq.w	800c734 <_dtoa_r+0x884>
 800c5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5ee:	9e08      	ldr	r6, [sp, #32]
 800c5f0:	9d05      	ldr	r5, [sp, #20]
 800c5f2:	9a05      	ldr	r2, [sp, #20]
 800c5f4:	441a      	add	r2, r3
 800c5f6:	9205      	str	r2, [sp, #20]
 800c5f8:	9a06      	ldr	r2, [sp, #24]
 800c5fa:	2101      	movs	r1, #1
 800c5fc:	441a      	add	r2, r3
 800c5fe:	4620      	mov	r0, r4
 800c600:	9206      	str	r2, [sp, #24]
 800c602:	f000 fc87 	bl	800cf14 <__i2b>
 800c606:	4607      	mov	r7, r0
 800c608:	b165      	cbz	r5, 800c624 <_dtoa_r+0x774>
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dd09      	ble.n	800c624 <_dtoa_r+0x774>
 800c610:	42ab      	cmp	r3, r5
 800c612:	9a05      	ldr	r2, [sp, #20]
 800c614:	bfa8      	it	ge
 800c616:	462b      	movge	r3, r5
 800c618:	1ad2      	subs	r2, r2, r3
 800c61a:	9205      	str	r2, [sp, #20]
 800c61c:	9a06      	ldr	r2, [sp, #24]
 800c61e:	1aed      	subs	r5, r5, r3
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	9306      	str	r3, [sp, #24]
 800c624:	9b08      	ldr	r3, [sp, #32]
 800c626:	b1f3      	cbz	r3, 800c666 <_dtoa_r+0x7b6>
 800c628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 80a3 	beq.w	800c776 <_dtoa_r+0x8c6>
 800c630:	2e00      	cmp	r6, #0
 800c632:	dd10      	ble.n	800c656 <_dtoa_r+0x7a6>
 800c634:	4639      	mov	r1, r7
 800c636:	4632      	mov	r2, r6
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 fd2b 	bl	800d094 <__pow5mult>
 800c63e:	4652      	mov	r2, sl
 800c640:	4601      	mov	r1, r0
 800c642:	4607      	mov	r7, r0
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fc7b 	bl	800cf40 <__multiply>
 800c64a:	4651      	mov	r1, sl
 800c64c:	4680      	mov	r8, r0
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fb60 	bl	800cd14 <_Bfree>
 800c654:	46c2      	mov	sl, r8
 800c656:	9b08      	ldr	r3, [sp, #32]
 800c658:	1b9a      	subs	r2, r3, r6
 800c65a:	d004      	beq.n	800c666 <_dtoa_r+0x7b6>
 800c65c:	4651      	mov	r1, sl
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 fd18 	bl	800d094 <__pow5mult>
 800c664:	4682      	mov	sl, r0
 800c666:	2101      	movs	r1, #1
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fc53 	bl	800cf14 <__i2b>
 800c66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c670:	2b00      	cmp	r3, #0
 800c672:	4606      	mov	r6, r0
 800c674:	f340 8081 	ble.w	800c77a <_dtoa_r+0x8ca>
 800c678:	461a      	mov	r2, r3
 800c67a:	4601      	mov	r1, r0
 800c67c:	4620      	mov	r0, r4
 800c67e:	f000 fd09 	bl	800d094 <__pow5mult>
 800c682:	9b07      	ldr	r3, [sp, #28]
 800c684:	2b01      	cmp	r3, #1
 800c686:	4606      	mov	r6, r0
 800c688:	dd7a      	ble.n	800c780 <_dtoa_r+0x8d0>
 800c68a:	f04f 0800 	mov.w	r8, #0
 800c68e:	6933      	ldr	r3, [r6, #16]
 800c690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c694:	6918      	ldr	r0, [r3, #16]
 800c696:	f000 fbef 	bl	800ce78 <__hi0bits>
 800c69a:	f1c0 0020 	rsb	r0, r0, #32
 800c69e:	9b06      	ldr	r3, [sp, #24]
 800c6a0:	4418      	add	r0, r3
 800c6a2:	f010 001f 	ands.w	r0, r0, #31
 800c6a6:	f000 8094 	beq.w	800c7d2 <_dtoa_r+0x922>
 800c6aa:	f1c0 0320 	rsb	r3, r0, #32
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	f340 8085 	ble.w	800c7be <_dtoa_r+0x90e>
 800c6b4:	9b05      	ldr	r3, [sp, #20]
 800c6b6:	f1c0 001c 	rsb	r0, r0, #28
 800c6ba:	4403      	add	r3, r0
 800c6bc:	9305      	str	r3, [sp, #20]
 800c6be:	9b06      	ldr	r3, [sp, #24]
 800c6c0:	4403      	add	r3, r0
 800c6c2:	4405      	add	r5, r0
 800c6c4:	9306      	str	r3, [sp, #24]
 800c6c6:	9b05      	ldr	r3, [sp, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dd05      	ble.n	800c6d8 <_dtoa_r+0x828>
 800c6cc:	4651      	mov	r1, sl
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fd39 	bl	800d148 <__lshift>
 800c6d6:	4682      	mov	sl, r0
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd05      	ble.n	800c6ea <_dtoa_r+0x83a>
 800c6de:	4631      	mov	r1, r6
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 fd30 	bl	800d148 <__lshift>
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d072      	beq.n	800c7d6 <_dtoa_r+0x926>
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	f000 fd94 	bl	800d220 <__mcmp>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	da6c      	bge.n	800c7d6 <_dtoa_r+0x926>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4651      	mov	r1, sl
 800c700:	220a      	movs	r2, #10
 800c702:	4620      	mov	r0, r4
 800c704:	f000 fb28 	bl	800cd58 <__multadd>
 800c708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c70a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c70e:	4682      	mov	sl, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 81b0 	beq.w	800ca76 <_dtoa_r+0xbc6>
 800c716:	2300      	movs	r3, #0
 800c718:	4639      	mov	r1, r7
 800c71a:	220a      	movs	r2, #10
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fb1b 	bl	800cd58 <__multadd>
 800c722:	9b01      	ldr	r3, [sp, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	4607      	mov	r7, r0
 800c728:	f300 8096 	bgt.w	800c858 <_dtoa_r+0x9a8>
 800c72c:	9b07      	ldr	r3, [sp, #28]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	dc59      	bgt.n	800c7e6 <_dtoa_r+0x936>
 800c732:	e091      	b.n	800c858 <_dtoa_r+0x9a8>
 800c734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c73a:	e758      	b.n	800c5ee <_dtoa_r+0x73e>
 800c73c:	9b04      	ldr	r3, [sp, #16]
 800c73e:	1e5e      	subs	r6, r3, #1
 800c740:	9b08      	ldr	r3, [sp, #32]
 800c742:	42b3      	cmp	r3, r6
 800c744:	bfbf      	itttt	lt
 800c746:	9b08      	ldrlt	r3, [sp, #32]
 800c748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c74a:	9608      	strlt	r6, [sp, #32]
 800c74c:	1af3      	sublt	r3, r6, r3
 800c74e:	bfb4      	ite	lt
 800c750:	18d2      	addlt	r2, r2, r3
 800c752:	1b9e      	subge	r6, r3, r6
 800c754:	9b04      	ldr	r3, [sp, #16]
 800c756:	bfbc      	itt	lt
 800c758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c75a:	2600      	movlt	r6, #0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	bfb7      	itett	lt
 800c760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c768:	1a9d      	sublt	r5, r3, r2
 800c76a:	2300      	movlt	r3, #0
 800c76c:	e741      	b.n	800c5f2 <_dtoa_r+0x742>
 800c76e:	9e08      	ldr	r6, [sp, #32]
 800c770:	9d05      	ldr	r5, [sp, #20]
 800c772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c774:	e748      	b.n	800c608 <_dtoa_r+0x758>
 800c776:	9a08      	ldr	r2, [sp, #32]
 800c778:	e770      	b.n	800c65c <_dtoa_r+0x7ac>
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	dc19      	bgt.n	800c7b4 <_dtoa_r+0x904>
 800c780:	9b02      	ldr	r3, [sp, #8]
 800c782:	b9bb      	cbnz	r3, 800c7b4 <_dtoa_r+0x904>
 800c784:	9b03      	ldr	r3, [sp, #12]
 800c786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c78a:	b99b      	cbnz	r3, 800c7b4 <_dtoa_r+0x904>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c792:	0d1b      	lsrs	r3, r3, #20
 800c794:	051b      	lsls	r3, r3, #20
 800c796:	b183      	cbz	r3, 800c7ba <_dtoa_r+0x90a>
 800c798:	9b05      	ldr	r3, [sp, #20]
 800c79a:	3301      	adds	r3, #1
 800c79c:	9305      	str	r3, [sp, #20]
 800c79e:	9b06      	ldr	r3, [sp, #24]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	9306      	str	r3, [sp, #24]
 800c7a4:	f04f 0801 	mov.w	r8, #1
 800c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f47f af6f 	bne.w	800c68e <_dtoa_r+0x7de>
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	e774      	b.n	800c69e <_dtoa_r+0x7ee>
 800c7b4:	f04f 0800 	mov.w	r8, #0
 800c7b8:	e7f6      	b.n	800c7a8 <_dtoa_r+0x8f8>
 800c7ba:	4698      	mov	r8, r3
 800c7bc:	e7f4      	b.n	800c7a8 <_dtoa_r+0x8f8>
 800c7be:	d082      	beq.n	800c6c6 <_dtoa_r+0x816>
 800c7c0:	9a05      	ldr	r2, [sp, #20]
 800c7c2:	331c      	adds	r3, #28
 800c7c4:	441a      	add	r2, r3
 800c7c6:	9205      	str	r2, [sp, #20]
 800c7c8:	9a06      	ldr	r2, [sp, #24]
 800c7ca:	441a      	add	r2, r3
 800c7cc:	441d      	add	r5, r3
 800c7ce:	9206      	str	r2, [sp, #24]
 800c7d0:	e779      	b.n	800c6c6 <_dtoa_r+0x816>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	e7f4      	b.n	800c7c0 <_dtoa_r+0x910>
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dc37      	bgt.n	800c84c <_dtoa_r+0x99c>
 800c7dc:	9b07      	ldr	r3, [sp, #28]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	dd34      	ble.n	800c84c <_dtoa_r+0x99c>
 800c7e2:	9b04      	ldr	r3, [sp, #16]
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	b963      	cbnz	r3, 800c804 <_dtoa_r+0x954>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	2205      	movs	r2, #5
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f000 fab2 	bl	800cd58 <__multadd>
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	f000 fd11 	bl	800d220 <__mcmp>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f73f adbb 	bgt.w	800c37a <_dtoa_r+0x4ca>
 800c804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c806:	9d00      	ldr	r5, [sp, #0]
 800c808:	ea6f 0b03 	mvn.w	fp, r3
 800c80c:	f04f 0800 	mov.w	r8, #0
 800c810:	4631      	mov	r1, r6
 800c812:	4620      	mov	r0, r4
 800c814:	f000 fa7e 	bl	800cd14 <_Bfree>
 800c818:	2f00      	cmp	r7, #0
 800c81a:	f43f aeab 	beq.w	800c574 <_dtoa_r+0x6c4>
 800c81e:	f1b8 0f00 	cmp.w	r8, #0
 800c822:	d005      	beq.n	800c830 <_dtoa_r+0x980>
 800c824:	45b8      	cmp	r8, r7
 800c826:	d003      	beq.n	800c830 <_dtoa_r+0x980>
 800c828:	4641      	mov	r1, r8
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 fa72 	bl	800cd14 <_Bfree>
 800c830:	4639      	mov	r1, r7
 800c832:	4620      	mov	r0, r4
 800c834:	f000 fa6e 	bl	800cd14 <_Bfree>
 800c838:	e69c      	b.n	800c574 <_dtoa_r+0x6c4>
 800c83a:	2600      	movs	r6, #0
 800c83c:	4637      	mov	r7, r6
 800c83e:	e7e1      	b.n	800c804 <_dtoa_r+0x954>
 800c840:	46bb      	mov	fp, r7
 800c842:	4637      	mov	r7, r6
 800c844:	e599      	b.n	800c37a <_dtoa_r+0x4ca>
 800c846:	bf00      	nop
 800c848:	40240000 	.word	0x40240000
 800c84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 80c8 	beq.w	800c9e4 <_dtoa_r+0xb34>
 800c854:	9b04      	ldr	r3, [sp, #16]
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	2d00      	cmp	r5, #0
 800c85a:	dd05      	ble.n	800c868 <_dtoa_r+0x9b8>
 800c85c:	4639      	mov	r1, r7
 800c85e:	462a      	mov	r2, r5
 800c860:	4620      	mov	r0, r4
 800c862:	f000 fc71 	bl	800d148 <__lshift>
 800c866:	4607      	mov	r7, r0
 800c868:	f1b8 0f00 	cmp.w	r8, #0
 800c86c:	d05b      	beq.n	800c926 <_dtoa_r+0xa76>
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fa0f 	bl	800cc94 <_Balloc>
 800c876:	4605      	mov	r5, r0
 800c878:	b928      	cbnz	r0, 800c886 <_dtoa_r+0x9d6>
 800c87a:	4b83      	ldr	r3, [pc, #524]	; (800ca88 <_dtoa_r+0xbd8>)
 800c87c:	4602      	mov	r2, r0
 800c87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c882:	f7ff bb2e 	b.w	800bee2 <_dtoa_r+0x32>
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	3202      	adds	r2, #2
 800c88a:	0092      	lsls	r2, r2, #2
 800c88c:	f107 010c 	add.w	r1, r7, #12
 800c890:	300c      	adds	r0, #12
 800c892:	f7ff fa71 	bl	800bd78 <memcpy>
 800c896:	2201      	movs	r2, #1
 800c898:	4629      	mov	r1, r5
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fc54 	bl	800d148 <__lshift>
 800c8a0:	9b00      	ldr	r3, [sp, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	9308      	str	r3, [sp, #32]
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	46b8      	mov	r8, r7
 800c8b6:	9306      	str	r3, [sp, #24]
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	4631      	mov	r1, r6
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	4650      	mov	r0, sl
 800c8c2:	9301      	str	r3, [sp, #4]
 800c8c4:	f7ff fa6c 	bl	800bda0 <quorem>
 800c8c8:	4641      	mov	r1, r8
 800c8ca:	9002      	str	r0, [sp, #8]
 800c8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	f000 fca5 	bl	800d220 <__mcmp>
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	9005      	str	r0, [sp, #20]
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 fcbb 	bl	800d258 <__mdiff>
 800c8e2:	68c2      	ldr	r2, [r0, #12]
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	bb02      	cbnz	r2, 800c92a <_dtoa_r+0xa7a>
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	f000 fc98 	bl	800d220 <__mcmp>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8f8:	f000 fa0c 	bl	800cd14 <_Bfree>
 800c8fc:	9b07      	ldr	r3, [sp, #28]
 800c8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c900:	9d04      	ldr	r5, [sp, #16]
 800c902:	ea43 0102 	orr.w	r1, r3, r2
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	4319      	orrs	r1, r3
 800c90a:	d110      	bne.n	800c92e <_dtoa_r+0xa7e>
 800c90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c910:	d029      	beq.n	800c966 <_dtoa_r+0xab6>
 800c912:	9b05      	ldr	r3, [sp, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	dd02      	ble.n	800c91e <_dtoa_r+0xa6e>
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	f883 9000 	strb.w	r9, [r3]
 800c924:	e774      	b.n	800c810 <_dtoa_r+0x960>
 800c926:	4638      	mov	r0, r7
 800c928:	e7ba      	b.n	800c8a0 <_dtoa_r+0x9f0>
 800c92a:	2201      	movs	r2, #1
 800c92c:	e7e1      	b.n	800c8f2 <_dtoa_r+0xa42>
 800c92e:	9b05      	ldr	r3, [sp, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	db04      	blt.n	800c93e <_dtoa_r+0xa8e>
 800c934:	9907      	ldr	r1, [sp, #28]
 800c936:	430b      	orrs	r3, r1
 800c938:	9906      	ldr	r1, [sp, #24]
 800c93a:	430b      	orrs	r3, r1
 800c93c:	d120      	bne.n	800c980 <_dtoa_r+0xad0>
 800c93e:	2a00      	cmp	r2, #0
 800c940:	dded      	ble.n	800c91e <_dtoa_r+0xa6e>
 800c942:	4651      	mov	r1, sl
 800c944:	2201      	movs	r2, #1
 800c946:	4620      	mov	r0, r4
 800c948:	f000 fbfe 	bl	800d148 <__lshift>
 800c94c:	4631      	mov	r1, r6
 800c94e:	4682      	mov	sl, r0
 800c950:	f000 fc66 	bl	800d220 <__mcmp>
 800c954:	2800      	cmp	r0, #0
 800c956:	dc03      	bgt.n	800c960 <_dtoa_r+0xab0>
 800c958:	d1e1      	bne.n	800c91e <_dtoa_r+0xa6e>
 800c95a:	f019 0f01 	tst.w	r9, #1
 800c95e:	d0de      	beq.n	800c91e <_dtoa_r+0xa6e>
 800c960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c964:	d1d8      	bne.n	800c918 <_dtoa_r+0xa68>
 800c966:	9a01      	ldr	r2, [sp, #4]
 800c968:	2339      	movs	r3, #57	; 0x39
 800c96a:	7013      	strb	r3, [r2, #0]
 800c96c:	462b      	mov	r3, r5
 800c96e:	461d      	mov	r5, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c976:	2a39      	cmp	r2, #57	; 0x39
 800c978:	d06c      	beq.n	800ca54 <_dtoa_r+0xba4>
 800c97a:	3201      	adds	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	e747      	b.n	800c810 <_dtoa_r+0x960>
 800c980:	2a00      	cmp	r2, #0
 800c982:	dd07      	ble.n	800c994 <_dtoa_r+0xae4>
 800c984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c988:	d0ed      	beq.n	800c966 <_dtoa_r+0xab6>
 800c98a:	9a01      	ldr	r2, [sp, #4]
 800c98c:	f109 0301 	add.w	r3, r9, #1
 800c990:	7013      	strb	r3, [r2, #0]
 800c992:	e73d      	b.n	800c810 <_dtoa_r+0x960>
 800c994:	9b04      	ldr	r3, [sp, #16]
 800c996:	9a08      	ldr	r2, [sp, #32]
 800c998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d043      	beq.n	800ca28 <_dtoa_r+0xb78>
 800c9a0:	4651      	mov	r1, sl
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	220a      	movs	r2, #10
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 f9d6 	bl	800cd58 <__multadd>
 800c9ac:	45b8      	cmp	r8, r7
 800c9ae:	4682      	mov	sl, r0
 800c9b0:	f04f 0300 	mov.w	r3, #0
 800c9b4:	f04f 020a 	mov.w	r2, #10
 800c9b8:	4641      	mov	r1, r8
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	d107      	bne.n	800c9ce <_dtoa_r+0xb1e>
 800c9be:	f000 f9cb 	bl	800cd58 <__multadd>
 800c9c2:	4680      	mov	r8, r0
 800c9c4:	4607      	mov	r7, r0
 800c9c6:	9b04      	ldr	r3, [sp, #16]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	e775      	b.n	800c8ba <_dtoa_r+0xa0a>
 800c9ce:	f000 f9c3 	bl	800cd58 <__multadd>
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	220a      	movs	r2, #10
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 f9bc 	bl	800cd58 <__multadd>
 800c9e0:	4607      	mov	r7, r0
 800c9e2:	e7f0      	b.n	800c9c6 <_dtoa_r+0xb16>
 800c9e4:	9b04      	ldr	r3, [sp, #16]
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	9d00      	ldr	r5, [sp, #0]
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4650      	mov	r0, sl
 800c9ee:	f7ff f9d7 	bl	800bda0 <quorem>
 800c9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c9f6:	9b00      	ldr	r3, [sp, #0]
 800c9f8:	f805 9b01 	strb.w	r9, [r5], #1
 800c9fc:	1aea      	subs	r2, r5, r3
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	4293      	cmp	r3, r2
 800ca02:	dd07      	ble.n	800ca14 <_dtoa_r+0xb64>
 800ca04:	4651      	mov	r1, sl
 800ca06:	2300      	movs	r3, #0
 800ca08:	220a      	movs	r2, #10
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f000 f9a4 	bl	800cd58 <__multadd>
 800ca10:	4682      	mov	sl, r0
 800ca12:	e7ea      	b.n	800c9ea <_dtoa_r+0xb3a>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfc8      	it	gt
 800ca1a:	461d      	movgt	r5, r3
 800ca1c:	9b00      	ldr	r3, [sp, #0]
 800ca1e:	bfd8      	it	le
 800ca20:	2501      	movle	r5, #1
 800ca22:	441d      	add	r5, r3
 800ca24:	f04f 0800 	mov.w	r8, #0
 800ca28:	4651      	mov	r1, sl
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fb8b 	bl	800d148 <__lshift>
 800ca32:	4631      	mov	r1, r6
 800ca34:	4682      	mov	sl, r0
 800ca36:	f000 fbf3 	bl	800d220 <__mcmp>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	dc96      	bgt.n	800c96c <_dtoa_r+0xabc>
 800ca3e:	d102      	bne.n	800ca46 <_dtoa_r+0xb96>
 800ca40:	f019 0f01 	tst.w	r9, #1
 800ca44:	d192      	bne.n	800c96c <_dtoa_r+0xabc>
 800ca46:	462b      	mov	r3, r5
 800ca48:	461d      	mov	r5, r3
 800ca4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca4e:	2a30      	cmp	r2, #48	; 0x30
 800ca50:	d0fa      	beq.n	800ca48 <_dtoa_r+0xb98>
 800ca52:	e6dd      	b.n	800c810 <_dtoa_r+0x960>
 800ca54:	9a00      	ldr	r2, [sp, #0]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d189      	bne.n	800c96e <_dtoa_r+0xabe>
 800ca5a:	f10b 0b01 	add.w	fp, fp, #1
 800ca5e:	2331      	movs	r3, #49	; 0x31
 800ca60:	e796      	b.n	800c990 <_dtoa_r+0xae0>
 800ca62:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <_dtoa_r+0xbdc>)
 800ca64:	f7ff ba99 	b.w	800bf9a <_dtoa_r+0xea>
 800ca68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f47f aa6d 	bne.w	800bf4a <_dtoa_r+0x9a>
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <_dtoa_r+0xbe0>)
 800ca72:	f7ff ba92 	b.w	800bf9a <_dtoa_r+0xea>
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	dcb5      	bgt.n	800c9e8 <_dtoa_r+0xb38>
 800ca7c:	9b07      	ldr	r3, [sp, #28]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	f73f aeb1 	bgt.w	800c7e6 <_dtoa_r+0x936>
 800ca84:	e7b0      	b.n	800c9e8 <_dtoa_r+0xb38>
 800ca86:	bf00      	nop
 800ca88:	0800f9bd 	.word	0x0800f9bd
 800ca8c:	0800f918 	.word	0x0800f918
 800ca90:	0800f941 	.word	0x0800f941

0800ca94 <_free_r>:
 800ca94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca96:	2900      	cmp	r1, #0
 800ca98:	d044      	beq.n	800cb24 <_free_r+0x90>
 800ca9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca9e:	9001      	str	r0, [sp, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f1a1 0404 	sub.w	r4, r1, #4
 800caa6:	bfb8      	it	lt
 800caa8:	18e4      	addlt	r4, r4, r3
 800caaa:	f000 f8e7 	bl	800cc7c <__malloc_lock>
 800caae:	4a1e      	ldr	r2, [pc, #120]	; (800cb28 <_free_r+0x94>)
 800cab0:	9801      	ldr	r0, [sp, #4]
 800cab2:	6813      	ldr	r3, [r2, #0]
 800cab4:	b933      	cbnz	r3, 800cac4 <_free_r+0x30>
 800cab6:	6063      	str	r3, [r4, #4]
 800cab8:	6014      	str	r4, [r2, #0]
 800caba:	b003      	add	sp, #12
 800cabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cac0:	f000 b8e2 	b.w	800cc88 <__malloc_unlock>
 800cac4:	42a3      	cmp	r3, r4
 800cac6:	d908      	bls.n	800cada <_free_r+0x46>
 800cac8:	6825      	ldr	r5, [r4, #0]
 800caca:	1961      	adds	r1, r4, r5
 800cacc:	428b      	cmp	r3, r1
 800cace:	bf01      	itttt	eq
 800cad0:	6819      	ldreq	r1, [r3, #0]
 800cad2:	685b      	ldreq	r3, [r3, #4]
 800cad4:	1949      	addeq	r1, r1, r5
 800cad6:	6021      	streq	r1, [r4, #0]
 800cad8:	e7ed      	b.n	800cab6 <_free_r+0x22>
 800cada:	461a      	mov	r2, r3
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	b10b      	cbz	r3, 800cae4 <_free_r+0x50>
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	d9fa      	bls.n	800cada <_free_r+0x46>
 800cae4:	6811      	ldr	r1, [r2, #0]
 800cae6:	1855      	adds	r5, r2, r1
 800cae8:	42a5      	cmp	r5, r4
 800caea:	d10b      	bne.n	800cb04 <_free_r+0x70>
 800caec:	6824      	ldr	r4, [r4, #0]
 800caee:	4421      	add	r1, r4
 800caf0:	1854      	adds	r4, r2, r1
 800caf2:	42a3      	cmp	r3, r4
 800caf4:	6011      	str	r1, [r2, #0]
 800caf6:	d1e0      	bne.n	800caba <_free_r+0x26>
 800caf8:	681c      	ldr	r4, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	6053      	str	r3, [r2, #4]
 800cafe:	440c      	add	r4, r1
 800cb00:	6014      	str	r4, [r2, #0]
 800cb02:	e7da      	b.n	800caba <_free_r+0x26>
 800cb04:	d902      	bls.n	800cb0c <_free_r+0x78>
 800cb06:	230c      	movs	r3, #12
 800cb08:	6003      	str	r3, [r0, #0]
 800cb0a:	e7d6      	b.n	800caba <_free_r+0x26>
 800cb0c:	6825      	ldr	r5, [r4, #0]
 800cb0e:	1961      	adds	r1, r4, r5
 800cb10:	428b      	cmp	r3, r1
 800cb12:	bf04      	itt	eq
 800cb14:	6819      	ldreq	r1, [r3, #0]
 800cb16:	685b      	ldreq	r3, [r3, #4]
 800cb18:	6063      	str	r3, [r4, #4]
 800cb1a:	bf04      	itt	eq
 800cb1c:	1949      	addeq	r1, r1, r5
 800cb1e:	6021      	streq	r1, [r4, #0]
 800cb20:	6054      	str	r4, [r2, #4]
 800cb22:	e7ca      	b.n	800caba <_free_r+0x26>
 800cb24:	b003      	add	sp, #12
 800cb26:	bd30      	pop	{r4, r5, pc}
 800cb28:	200061cc 	.word	0x200061cc

0800cb2c <malloc>:
 800cb2c:	4b02      	ldr	r3, [pc, #8]	; (800cb38 <malloc+0xc>)
 800cb2e:	4601      	mov	r1, r0
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	f000 b823 	b.w	800cb7c <_malloc_r>
 800cb36:	bf00      	nop
 800cb38:	20000068 	.word	0x20000068

0800cb3c <sbrk_aligned>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4e0e      	ldr	r6, [pc, #56]	; (800cb78 <sbrk_aligned+0x3c>)
 800cb40:	460c      	mov	r4, r1
 800cb42:	6831      	ldr	r1, [r6, #0]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b911      	cbnz	r1, 800cb4e <sbrk_aligned+0x12>
 800cb48:	f001 fe1a 	bl	800e780 <_sbrk_r>
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f001 fe15 	bl	800e780 <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <sbrk_aligned+0x34>
 800cb5a:	1cc4      	adds	r4, r0, #3
 800cb5c:	f024 0403 	bic.w	r4, r4, #3
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d007      	beq.n	800cb74 <sbrk_aligned+0x38>
 800cb64:	1a21      	subs	r1, r4, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f001 fe0a 	bl	800e780 <_sbrk_r>
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d101      	bne.n	800cb74 <sbrk_aligned+0x38>
 800cb70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	200061d0 	.word	0x200061d0

0800cb7c <_malloc_r>:
 800cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4607      	mov	r7, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d905      	bls.n	800cba4 <_malloc_r+0x28>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4630      	mov	r0, r6
 800cba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc78 <_malloc_r+0xfc>
 800cba8:	f000 f868 	bl	800cc7c <__malloc_lock>
 800cbac:	f8d8 3000 	ldr.w	r3, [r8]
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	bb5c      	cbnz	r4, 800cc0c <_malloc_r+0x90>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f7ff ffc0 	bl	800cb3c <sbrk_aligned>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	d155      	bne.n	800cc6e <_malloc_r+0xf2>
 800cbc2:	f8d8 4000 	ldr.w	r4, [r8]
 800cbc6:	4626      	mov	r6, r4
 800cbc8:	2e00      	cmp	r6, #0
 800cbca:	d145      	bne.n	800cc58 <_malloc_r+0xdc>
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	d048      	beq.n	800cc62 <_malloc_r+0xe6>
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	eb04 0903 	add.w	r9, r4, r3
 800cbda:	f001 fdd1 	bl	800e780 <_sbrk_r>
 800cbde:	4581      	cmp	r9, r0
 800cbe0:	d13f      	bne.n	800cc62 <_malloc_r+0xe6>
 800cbe2:	6821      	ldr	r1, [r4, #0]
 800cbe4:	1a6d      	subs	r5, r5, r1
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff ffa7 	bl	800cb3c <sbrk_aligned>
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d037      	beq.n	800cc62 <_malloc_r+0xe6>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	442b      	add	r3, r5
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d038      	beq.n	800cc72 <_malloc_r+0xf6>
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	42a2      	cmp	r2, r4
 800cc04:	d12b      	bne.n	800cc5e <_malloc_r+0xe2>
 800cc06:	2200      	movs	r2, #0
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	e00f      	b.n	800cc2c <_malloc_r+0xb0>
 800cc0c:	6822      	ldr	r2, [r4, #0]
 800cc0e:	1b52      	subs	r2, r2, r5
 800cc10:	d41f      	bmi.n	800cc52 <_malloc_r+0xd6>
 800cc12:	2a0b      	cmp	r2, #11
 800cc14:	d917      	bls.n	800cc46 <_malloc_r+0xca>
 800cc16:	1961      	adds	r1, r4, r5
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	6025      	str	r5, [r4, #0]
 800cc1c:	bf18      	it	ne
 800cc1e:	6059      	strne	r1, [r3, #4]
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	bf08      	it	eq
 800cc24:	f8c8 1000 	streq.w	r1, [r8]
 800cc28:	5162      	str	r2, [r4, r5]
 800cc2a:	604b      	str	r3, [r1, #4]
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f104 060b 	add.w	r6, r4, #11
 800cc32:	f000 f829 	bl	800cc88 <__malloc_unlock>
 800cc36:	f026 0607 	bic.w	r6, r6, #7
 800cc3a:	1d23      	adds	r3, r4, #4
 800cc3c:	1af2      	subs	r2, r6, r3
 800cc3e:	d0ae      	beq.n	800cb9e <_malloc_r+0x22>
 800cc40:	1b9b      	subs	r3, r3, r6
 800cc42:	50a3      	str	r3, [r4, r2]
 800cc44:	e7ab      	b.n	800cb9e <_malloc_r+0x22>
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	6862      	ldr	r2, [r4, #4]
 800cc4a:	d1dd      	bne.n	800cc08 <_malloc_r+0x8c>
 800cc4c:	f8c8 2000 	str.w	r2, [r8]
 800cc50:	e7ec      	b.n	800cc2c <_malloc_r+0xb0>
 800cc52:	4623      	mov	r3, r4
 800cc54:	6864      	ldr	r4, [r4, #4]
 800cc56:	e7ac      	b.n	800cbb2 <_malloc_r+0x36>
 800cc58:	4634      	mov	r4, r6
 800cc5a:	6876      	ldr	r6, [r6, #4]
 800cc5c:	e7b4      	b.n	800cbc8 <_malloc_r+0x4c>
 800cc5e:	4613      	mov	r3, r2
 800cc60:	e7cc      	b.n	800cbfc <_malloc_r+0x80>
 800cc62:	230c      	movs	r3, #12
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4638      	mov	r0, r7
 800cc68:	f000 f80e 	bl	800cc88 <__malloc_unlock>
 800cc6c:	e797      	b.n	800cb9e <_malloc_r+0x22>
 800cc6e:	6025      	str	r5, [r4, #0]
 800cc70:	e7dc      	b.n	800cc2c <_malloc_r+0xb0>
 800cc72:	605b      	str	r3, [r3, #4]
 800cc74:	deff      	udf	#255	; 0xff
 800cc76:	bf00      	nop
 800cc78:	200061cc 	.word	0x200061cc

0800cc7c <__malloc_lock>:
 800cc7c:	4801      	ldr	r0, [pc, #4]	; (800cc84 <__malloc_lock+0x8>)
 800cc7e:	f7ff b879 	b.w	800bd74 <__retarget_lock_acquire_recursive>
 800cc82:	bf00      	nop
 800cc84:	200061c8 	.word	0x200061c8

0800cc88 <__malloc_unlock>:
 800cc88:	4801      	ldr	r0, [pc, #4]	; (800cc90 <__malloc_unlock+0x8>)
 800cc8a:	f7ff b874 	b.w	800bd76 <__retarget_lock_release_recursive>
 800cc8e:	bf00      	nop
 800cc90:	200061c8 	.word	0x200061c8

0800cc94 <_Balloc>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	69c6      	ldr	r6, [r0, #28]
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	b976      	cbnz	r6, 800ccbc <_Balloc+0x28>
 800cc9e:	2010      	movs	r0, #16
 800cca0:	f7ff ff44 	bl	800cb2c <malloc>
 800cca4:	4602      	mov	r2, r0
 800cca6:	61e0      	str	r0, [r4, #28]
 800cca8:	b920      	cbnz	r0, 800ccb4 <_Balloc+0x20>
 800ccaa:	4b18      	ldr	r3, [pc, #96]	; (800cd0c <_Balloc+0x78>)
 800ccac:	4818      	ldr	r0, [pc, #96]	; (800cd10 <_Balloc+0x7c>)
 800ccae:	216b      	movs	r1, #107	; 0x6b
 800ccb0:	f001 fd7e 	bl	800e7b0 <__assert_func>
 800ccb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccb8:	6006      	str	r6, [r0, #0]
 800ccba:	60c6      	str	r6, [r0, #12]
 800ccbc:	69e6      	ldr	r6, [r4, #28]
 800ccbe:	68f3      	ldr	r3, [r6, #12]
 800ccc0:	b183      	cbz	r3, 800cce4 <_Balloc+0x50>
 800ccc2:	69e3      	ldr	r3, [r4, #28]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccca:	b9b8      	cbnz	r0, 800ccfc <_Balloc+0x68>
 800cccc:	2101      	movs	r1, #1
 800ccce:	fa01 f605 	lsl.w	r6, r1, r5
 800ccd2:	1d72      	adds	r2, r6, #5
 800ccd4:	0092      	lsls	r2, r2, #2
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f001 fd88 	bl	800e7ec <_calloc_r>
 800ccdc:	b160      	cbz	r0, 800ccf8 <_Balloc+0x64>
 800ccde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cce2:	e00e      	b.n	800cd02 <_Balloc+0x6e>
 800cce4:	2221      	movs	r2, #33	; 0x21
 800cce6:	2104      	movs	r1, #4
 800cce8:	4620      	mov	r0, r4
 800ccea:	f001 fd7f 	bl	800e7ec <_calloc_r>
 800ccee:	69e3      	ldr	r3, [r4, #28]
 800ccf0:	60f0      	str	r0, [r6, #12]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1e4      	bne.n	800ccc2 <_Balloc+0x2e>
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	6802      	ldr	r2, [r0, #0]
 800ccfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd02:	2300      	movs	r3, #0
 800cd04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd08:	e7f7      	b.n	800ccfa <_Balloc+0x66>
 800cd0a:	bf00      	nop
 800cd0c:	0800f94e 	.word	0x0800f94e
 800cd10:	0800f9ce 	.word	0x0800f9ce

0800cd14 <_Bfree>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	69c6      	ldr	r6, [r0, #28]
 800cd18:	4605      	mov	r5, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	b976      	cbnz	r6, 800cd3c <_Bfree+0x28>
 800cd1e:	2010      	movs	r0, #16
 800cd20:	f7ff ff04 	bl	800cb2c <malloc>
 800cd24:	4602      	mov	r2, r0
 800cd26:	61e8      	str	r0, [r5, #28]
 800cd28:	b920      	cbnz	r0, 800cd34 <_Bfree+0x20>
 800cd2a:	4b09      	ldr	r3, [pc, #36]	; (800cd50 <_Bfree+0x3c>)
 800cd2c:	4809      	ldr	r0, [pc, #36]	; (800cd54 <_Bfree+0x40>)
 800cd2e:	218f      	movs	r1, #143	; 0x8f
 800cd30:	f001 fd3e 	bl	800e7b0 <__assert_func>
 800cd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd38:	6006      	str	r6, [r0, #0]
 800cd3a:	60c6      	str	r6, [r0, #12]
 800cd3c:	b13c      	cbz	r4, 800cd4e <_Bfree+0x3a>
 800cd3e:	69eb      	ldr	r3, [r5, #28]
 800cd40:	6862      	ldr	r2, [r4, #4]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd48:	6021      	str	r1, [r4, #0]
 800cd4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	0800f94e 	.word	0x0800f94e
 800cd54:	0800f9ce 	.word	0x0800f9ce

0800cd58 <__multadd>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	690d      	ldr	r5, [r1, #16]
 800cd5e:	4607      	mov	r7, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	461e      	mov	r6, r3
 800cd64:	f101 0c14 	add.w	ip, r1, #20
 800cd68:	2000      	movs	r0, #0
 800cd6a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd6e:	b299      	uxth	r1, r3
 800cd70:	fb02 6101 	mla	r1, r2, r1, r6
 800cd74:	0c1e      	lsrs	r6, r3, #16
 800cd76:	0c0b      	lsrs	r3, r1, #16
 800cd78:	fb02 3306 	mla	r3, r2, r6, r3
 800cd7c:	b289      	uxth	r1, r1
 800cd7e:	3001      	adds	r0, #1
 800cd80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd84:	4285      	cmp	r5, r0
 800cd86:	f84c 1b04 	str.w	r1, [ip], #4
 800cd8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd8e:	dcec      	bgt.n	800cd6a <__multadd+0x12>
 800cd90:	b30e      	cbz	r6, 800cdd6 <__multadd+0x7e>
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	42ab      	cmp	r3, r5
 800cd96:	dc19      	bgt.n	800cdcc <__multadd+0x74>
 800cd98:	6861      	ldr	r1, [r4, #4]
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	3101      	adds	r1, #1
 800cd9e:	f7ff ff79 	bl	800cc94 <_Balloc>
 800cda2:	4680      	mov	r8, r0
 800cda4:	b928      	cbnz	r0, 800cdb2 <__multadd+0x5a>
 800cda6:	4602      	mov	r2, r0
 800cda8:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <__multadd+0x84>)
 800cdaa:	480d      	ldr	r0, [pc, #52]	; (800cde0 <__multadd+0x88>)
 800cdac:	21ba      	movs	r1, #186	; 0xba
 800cdae:	f001 fcff 	bl	800e7b0 <__assert_func>
 800cdb2:	6922      	ldr	r2, [r4, #16]
 800cdb4:	3202      	adds	r2, #2
 800cdb6:	f104 010c 	add.w	r1, r4, #12
 800cdba:	0092      	lsls	r2, r2, #2
 800cdbc:	300c      	adds	r0, #12
 800cdbe:	f7fe ffdb 	bl	800bd78 <memcpy>
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7ff ffa5 	bl	800cd14 <_Bfree>
 800cdca:	4644      	mov	r4, r8
 800cdcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdd0:	3501      	adds	r5, #1
 800cdd2:	615e      	str	r6, [r3, #20]
 800cdd4:	6125      	str	r5, [r4, #16]
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	0800f9bd 	.word	0x0800f9bd
 800cde0:	0800f9ce 	.word	0x0800f9ce

0800cde4 <__s2b>:
 800cde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde8:	460c      	mov	r4, r1
 800cdea:	4615      	mov	r5, r2
 800cdec:	461f      	mov	r7, r3
 800cdee:	2209      	movs	r2, #9
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	db09      	blt.n	800ce14 <__s2b+0x30>
 800ce00:	4630      	mov	r0, r6
 800ce02:	f7ff ff47 	bl	800cc94 <_Balloc>
 800ce06:	b940      	cbnz	r0, 800ce1a <__s2b+0x36>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	4b19      	ldr	r3, [pc, #100]	; (800ce70 <__s2b+0x8c>)
 800ce0c:	4819      	ldr	r0, [pc, #100]	; (800ce74 <__s2b+0x90>)
 800ce0e:	21d3      	movs	r1, #211	; 0xd3
 800ce10:	f001 fcce 	bl	800e7b0 <__assert_func>
 800ce14:	0052      	lsls	r2, r2, #1
 800ce16:	3101      	adds	r1, #1
 800ce18:	e7f0      	b.n	800cdfc <__s2b+0x18>
 800ce1a:	9b08      	ldr	r3, [sp, #32]
 800ce1c:	6143      	str	r3, [r0, #20]
 800ce1e:	2d09      	cmp	r5, #9
 800ce20:	f04f 0301 	mov.w	r3, #1
 800ce24:	6103      	str	r3, [r0, #16]
 800ce26:	dd16      	ble.n	800ce56 <__s2b+0x72>
 800ce28:	f104 0909 	add.w	r9, r4, #9
 800ce2c:	46c8      	mov	r8, r9
 800ce2e:	442c      	add	r4, r5
 800ce30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce34:	4601      	mov	r1, r0
 800ce36:	3b30      	subs	r3, #48	; 0x30
 800ce38:	220a      	movs	r2, #10
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7ff ff8c 	bl	800cd58 <__multadd>
 800ce40:	45a0      	cmp	r8, r4
 800ce42:	d1f5      	bne.n	800ce30 <__s2b+0x4c>
 800ce44:	f1a5 0408 	sub.w	r4, r5, #8
 800ce48:	444c      	add	r4, r9
 800ce4a:	1b2d      	subs	r5, r5, r4
 800ce4c:	1963      	adds	r3, r4, r5
 800ce4e:	42bb      	cmp	r3, r7
 800ce50:	db04      	blt.n	800ce5c <__s2b+0x78>
 800ce52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce56:	340a      	adds	r4, #10
 800ce58:	2509      	movs	r5, #9
 800ce5a:	e7f6      	b.n	800ce4a <__s2b+0x66>
 800ce5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce60:	4601      	mov	r1, r0
 800ce62:	3b30      	subs	r3, #48	; 0x30
 800ce64:	220a      	movs	r2, #10
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7ff ff76 	bl	800cd58 <__multadd>
 800ce6c:	e7ee      	b.n	800ce4c <__s2b+0x68>
 800ce6e:	bf00      	nop
 800ce70:	0800f9bd 	.word	0x0800f9bd
 800ce74:	0800f9ce 	.word	0x0800f9ce

0800ce78 <__hi0bits>:
 800ce78:	0c03      	lsrs	r3, r0, #16
 800ce7a:	041b      	lsls	r3, r3, #16
 800ce7c:	b9d3      	cbnz	r3, 800ceb4 <__hi0bits+0x3c>
 800ce7e:	0400      	lsls	r0, r0, #16
 800ce80:	2310      	movs	r3, #16
 800ce82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce86:	bf04      	itt	eq
 800ce88:	0200      	lsleq	r0, r0, #8
 800ce8a:	3308      	addeq	r3, #8
 800ce8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce90:	bf04      	itt	eq
 800ce92:	0100      	lsleq	r0, r0, #4
 800ce94:	3304      	addeq	r3, #4
 800ce96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce9a:	bf04      	itt	eq
 800ce9c:	0080      	lsleq	r0, r0, #2
 800ce9e:	3302      	addeq	r3, #2
 800cea0:	2800      	cmp	r0, #0
 800cea2:	db05      	blt.n	800ceb0 <__hi0bits+0x38>
 800cea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cea8:	f103 0301 	add.w	r3, r3, #1
 800ceac:	bf08      	it	eq
 800ceae:	2320      	moveq	r3, #32
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	4770      	bx	lr
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e7e4      	b.n	800ce82 <__hi0bits+0xa>

0800ceb8 <__lo0bits>:
 800ceb8:	6803      	ldr	r3, [r0, #0]
 800ceba:	f013 0207 	ands.w	r2, r3, #7
 800cebe:	d00c      	beq.n	800ceda <__lo0bits+0x22>
 800cec0:	07d9      	lsls	r1, r3, #31
 800cec2:	d422      	bmi.n	800cf0a <__lo0bits+0x52>
 800cec4:	079a      	lsls	r2, r3, #30
 800cec6:	bf49      	itett	mi
 800cec8:	085b      	lsrmi	r3, r3, #1
 800ceca:	089b      	lsrpl	r3, r3, #2
 800cecc:	6003      	strmi	r3, [r0, #0]
 800cece:	2201      	movmi	r2, #1
 800ced0:	bf5c      	itt	pl
 800ced2:	6003      	strpl	r3, [r0, #0]
 800ced4:	2202      	movpl	r2, #2
 800ced6:	4610      	mov	r0, r2
 800ced8:	4770      	bx	lr
 800ceda:	b299      	uxth	r1, r3
 800cedc:	b909      	cbnz	r1, 800cee2 <__lo0bits+0x2a>
 800cede:	0c1b      	lsrs	r3, r3, #16
 800cee0:	2210      	movs	r2, #16
 800cee2:	b2d9      	uxtb	r1, r3
 800cee4:	b909      	cbnz	r1, 800ceea <__lo0bits+0x32>
 800cee6:	3208      	adds	r2, #8
 800cee8:	0a1b      	lsrs	r3, r3, #8
 800ceea:	0719      	lsls	r1, r3, #28
 800ceec:	bf04      	itt	eq
 800ceee:	091b      	lsreq	r3, r3, #4
 800cef0:	3204      	addeq	r2, #4
 800cef2:	0799      	lsls	r1, r3, #30
 800cef4:	bf04      	itt	eq
 800cef6:	089b      	lsreq	r3, r3, #2
 800cef8:	3202      	addeq	r2, #2
 800cefa:	07d9      	lsls	r1, r3, #31
 800cefc:	d403      	bmi.n	800cf06 <__lo0bits+0x4e>
 800cefe:	085b      	lsrs	r3, r3, #1
 800cf00:	f102 0201 	add.w	r2, r2, #1
 800cf04:	d003      	beq.n	800cf0e <__lo0bits+0x56>
 800cf06:	6003      	str	r3, [r0, #0]
 800cf08:	e7e5      	b.n	800ced6 <__lo0bits+0x1e>
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	e7e3      	b.n	800ced6 <__lo0bits+0x1e>
 800cf0e:	2220      	movs	r2, #32
 800cf10:	e7e1      	b.n	800ced6 <__lo0bits+0x1e>
	...

0800cf14 <__i2b>:
 800cf14:	b510      	push	{r4, lr}
 800cf16:	460c      	mov	r4, r1
 800cf18:	2101      	movs	r1, #1
 800cf1a:	f7ff febb 	bl	800cc94 <_Balloc>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	b928      	cbnz	r0, 800cf2e <__i2b+0x1a>
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <__i2b+0x24>)
 800cf24:	4805      	ldr	r0, [pc, #20]	; (800cf3c <__i2b+0x28>)
 800cf26:	f240 1145 	movw	r1, #325	; 0x145
 800cf2a:	f001 fc41 	bl	800e7b0 <__assert_func>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	6144      	str	r4, [r0, #20]
 800cf32:	6103      	str	r3, [r0, #16]
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	bf00      	nop
 800cf38:	0800f9bd 	.word	0x0800f9bd
 800cf3c:	0800f9ce 	.word	0x0800f9ce

0800cf40 <__multiply>:
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	4691      	mov	r9, r2
 800cf46:	690a      	ldr	r2, [r1, #16]
 800cf48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	bfb8      	it	lt
 800cf50:	460b      	movlt	r3, r1
 800cf52:	460c      	mov	r4, r1
 800cf54:	bfbc      	itt	lt
 800cf56:	464c      	movlt	r4, r9
 800cf58:	4699      	movlt	r9, r3
 800cf5a:	6927      	ldr	r7, [r4, #16]
 800cf5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	6861      	ldr	r1, [r4, #4]
 800cf64:	eb07 060a 	add.w	r6, r7, sl
 800cf68:	42b3      	cmp	r3, r6
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	bfb8      	it	lt
 800cf6e:	3101      	addlt	r1, #1
 800cf70:	f7ff fe90 	bl	800cc94 <_Balloc>
 800cf74:	b930      	cbnz	r0, 800cf84 <__multiply+0x44>
 800cf76:	4602      	mov	r2, r0
 800cf78:	4b44      	ldr	r3, [pc, #272]	; (800d08c <__multiply+0x14c>)
 800cf7a:	4845      	ldr	r0, [pc, #276]	; (800d090 <__multiply+0x150>)
 800cf7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cf80:	f001 fc16 	bl	800e7b0 <__assert_func>
 800cf84:	f100 0514 	add.w	r5, r0, #20
 800cf88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4543      	cmp	r3, r8
 800cf92:	d321      	bcc.n	800cfd8 <__multiply+0x98>
 800cf94:	f104 0314 	add.w	r3, r4, #20
 800cf98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf9c:	f109 0314 	add.w	r3, r9, #20
 800cfa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfa4:	9202      	str	r2, [sp, #8]
 800cfa6:	1b3a      	subs	r2, r7, r4
 800cfa8:	3a15      	subs	r2, #21
 800cfaa:	f022 0203 	bic.w	r2, r2, #3
 800cfae:	3204      	adds	r2, #4
 800cfb0:	f104 0115 	add.w	r1, r4, #21
 800cfb4:	428f      	cmp	r7, r1
 800cfb6:	bf38      	it	cc
 800cfb8:	2204      	movcc	r2, #4
 800cfba:	9201      	str	r2, [sp, #4]
 800cfbc:	9a02      	ldr	r2, [sp, #8]
 800cfbe:	9303      	str	r3, [sp, #12]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d80c      	bhi.n	800cfde <__multiply+0x9e>
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	dd03      	ble.n	800cfd0 <__multiply+0x90>
 800cfc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d05b      	beq.n	800d088 <__multiply+0x148>
 800cfd0:	6106      	str	r6, [r0, #16]
 800cfd2:	b005      	add	sp, #20
 800cfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd8:	f843 2b04 	str.w	r2, [r3], #4
 800cfdc:	e7d8      	b.n	800cf90 <__multiply+0x50>
 800cfde:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfe2:	f1ba 0f00 	cmp.w	sl, #0
 800cfe6:	d024      	beq.n	800d032 <__multiply+0xf2>
 800cfe8:	f104 0e14 	add.w	lr, r4, #20
 800cfec:	46a9      	mov	r9, r5
 800cfee:	f04f 0c00 	mov.w	ip, #0
 800cff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cff6:	f8d9 1000 	ldr.w	r1, [r9]
 800cffa:	fa1f fb82 	uxth.w	fp, r2
 800cffe:	b289      	uxth	r1, r1
 800d000:	fb0a 110b 	mla	r1, sl, fp, r1
 800d004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d008:	f8d9 2000 	ldr.w	r2, [r9]
 800d00c:	4461      	add	r1, ip
 800d00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d012:	fb0a c20b 	mla	r2, sl, fp, ip
 800d016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d01a:	b289      	uxth	r1, r1
 800d01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d020:	4577      	cmp	r7, lr
 800d022:	f849 1b04 	str.w	r1, [r9], #4
 800d026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d02a:	d8e2      	bhi.n	800cff2 <__multiply+0xb2>
 800d02c:	9a01      	ldr	r2, [sp, #4]
 800d02e:	f845 c002 	str.w	ip, [r5, r2]
 800d032:	9a03      	ldr	r2, [sp, #12]
 800d034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d038:	3304      	adds	r3, #4
 800d03a:	f1b9 0f00 	cmp.w	r9, #0
 800d03e:	d021      	beq.n	800d084 <__multiply+0x144>
 800d040:	6829      	ldr	r1, [r5, #0]
 800d042:	f104 0c14 	add.w	ip, r4, #20
 800d046:	46ae      	mov	lr, r5
 800d048:	f04f 0a00 	mov.w	sl, #0
 800d04c:	f8bc b000 	ldrh.w	fp, [ip]
 800d050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d054:	fb09 220b 	mla	r2, r9, fp, r2
 800d058:	4452      	add	r2, sl
 800d05a:	b289      	uxth	r1, r1
 800d05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d060:	f84e 1b04 	str.w	r1, [lr], #4
 800d064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d06c:	f8be 1000 	ldrh.w	r1, [lr]
 800d070:	fb09 110a 	mla	r1, r9, sl, r1
 800d074:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d078:	4567      	cmp	r7, ip
 800d07a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d07e:	d8e5      	bhi.n	800d04c <__multiply+0x10c>
 800d080:	9a01      	ldr	r2, [sp, #4]
 800d082:	50a9      	str	r1, [r5, r2]
 800d084:	3504      	adds	r5, #4
 800d086:	e799      	b.n	800cfbc <__multiply+0x7c>
 800d088:	3e01      	subs	r6, #1
 800d08a:	e79b      	b.n	800cfc4 <__multiply+0x84>
 800d08c:	0800f9bd 	.word	0x0800f9bd
 800d090:	0800f9ce 	.word	0x0800f9ce

0800d094 <__pow5mult>:
 800d094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d098:	4615      	mov	r5, r2
 800d09a:	f012 0203 	ands.w	r2, r2, #3
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460f      	mov	r7, r1
 800d0a2:	d007      	beq.n	800d0b4 <__pow5mult+0x20>
 800d0a4:	4c25      	ldr	r4, [pc, #148]	; (800d13c <__pow5mult+0xa8>)
 800d0a6:	3a01      	subs	r2, #1
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ae:	f7ff fe53 	bl	800cd58 <__multadd>
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	10ad      	asrs	r5, r5, #2
 800d0b6:	d03d      	beq.n	800d134 <__pow5mult+0xa0>
 800d0b8:	69f4      	ldr	r4, [r6, #28]
 800d0ba:	b97c      	cbnz	r4, 800d0dc <__pow5mult+0x48>
 800d0bc:	2010      	movs	r0, #16
 800d0be:	f7ff fd35 	bl	800cb2c <malloc>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	61f0      	str	r0, [r6, #28]
 800d0c6:	b928      	cbnz	r0, 800d0d4 <__pow5mult+0x40>
 800d0c8:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <__pow5mult+0xac>)
 800d0ca:	481e      	ldr	r0, [pc, #120]	; (800d144 <__pow5mult+0xb0>)
 800d0cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d0d0:	f001 fb6e 	bl	800e7b0 <__assert_func>
 800d0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0d8:	6004      	str	r4, [r0, #0]
 800d0da:	60c4      	str	r4, [r0, #12]
 800d0dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0e4:	b94c      	cbnz	r4, 800d0fa <__pow5mult+0x66>
 800d0e6:	f240 2171 	movw	r1, #625	; 0x271
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7ff ff12 	bl	800cf14 <__i2b>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	6003      	str	r3, [r0, #0]
 800d0fa:	f04f 0900 	mov.w	r9, #0
 800d0fe:	07eb      	lsls	r3, r5, #31
 800d100:	d50a      	bpl.n	800d118 <__pow5mult+0x84>
 800d102:	4639      	mov	r1, r7
 800d104:	4622      	mov	r2, r4
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff ff1a 	bl	800cf40 <__multiply>
 800d10c:	4639      	mov	r1, r7
 800d10e:	4680      	mov	r8, r0
 800d110:	4630      	mov	r0, r6
 800d112:	f7ff fdff 	bl	800cd14 <_Bfree>
 800d116:	4647      	mov	r7, r8
 800d118:	106d      	asrs	r5, r5, #1
 800d11a:	d00b      	beq.n	800d134 <__pow5mult+0xa0>
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	b938      	cbnz	r0, 800d130 <__pow5mult+0x9c>
 800d120:	4622      	mov	r2, r4
 800d122:	4621      	mov	r1, r4
 800d124:	4630      	mov	r0, r6
 800d126:	f7ff ff0b 	bl	800cf40 <__multiply>
 800d12a:	6020      	str	r0, [r4, #0]
 800d12c:	f8c0 9000 	str.w	r9, [r0]
 800d130:	4604      	mov	r4, r0
 800d132:	e7e4      	b.n	800d0fe <__pow5mult+0x6a>
 800d134:	4638      	mov	r0, r7
 800d136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13a:	bf00      	nop
 800d13c:	0800fb18 	.word	0x0800fb18
 800d140:	0800f94e 	.word	0x0800f94e
 800d144:	0800f9ce 	.word	0x0800f9ce

0800d148 <__lshift>:
 800d148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d14c:	460c      	mov	r4, r1
 800d14e:	6849      	ldr	r1, [r1, #4]
 800d150:	6923      	ldr	r3, [r4, #16]
 800d152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d156:	68a3      	ldr	r3, [r4, #8]
 800d158:	4607      	mov	r7, r0
 800d15a:	4691      	mov	r9, r2
 800d15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d160:	f108 0601 	add.w	r6, r8, #1
 800d164:	42b3      	cmp	r3, r6
 800d166:	db0b      	blt.n	800d180 <__lshift+0x38>
 800d168:	4638      	mov	r0, r7
 800d16a:	f7ff fd93 	bl	800cc94 <_Balloc>
 800d16e:	4605      	mov	r5, r0
 800d170:	b948      	cbnz	r0, 800d186 <__lshift+0x3e>
 800d172:	4602      	mov	r2, r0
 800d174:	4b28      	ldr	r3, [pc, #160]	; (800d218 <__lshift+0xd0>)
 800d176:	4829      	ldr	r0, [pc, #164]	; (800d21c <__lshift+0xd4>)
 800d178:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d17c:	f001 fb18 	bl	800e7b0 <__assert_func>
 800d180:	3101      	adds	r1, #1
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	e7ee      	b.n	800d164 <__lshift+0x1c>
 800d186:	2300      	movs	r3, #0
 800d188:	f100 0114 	add.w	r1, r0, #20
 800d18c:	f100 0210 	add.w	r2, r0, #16
 800d190:	4618      	mov	r0, r3
 800d192:	4553      	cmp	r3, sl
 800d194:	db33      	blt.n	800d1fe <__lshift+0xb6>
 800d196:	6920      	ldr	r0, [r4, #16]
 800d198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d19c:	f104 0314 	add.w	r3, r4, #20
 800d1a0:	f019 091f 	ands.w	r9, r9, #31
 800d1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1ac:	d02b      	beq.n	800d206 <__lshift+0xbe>
 800d1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800d1b2:	468a      	mov	sl, r1
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	6818      	ldr	r0, [r3, #0]
 800d1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800d1bc:	4310      	orrs	r0, r2
 800d1be:	f84a 0b04 	str.w	r0, [sl], #4
 800d1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c6:	459c      	cmp	ip, r3
 800d1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1cc:	d8f3      	bhi.n	800d1b6 <__lshift+0x6e>
 800d1ce:	ebac 0304 	sub.w	r3, ip, r4
 800d1d2:	3b15      	subs	r3, #21
 800d1d4:	f023 0303 	bic.w	r3, r3, #3
 800d1d8:	3304      	adds	r3, #4
 800d1da:	f104 0015 	add.w	r0, r4, #21
 800d1de:	4584      	cmp	ip, r0
 800d1e0:	bf38      	it	cc
 800d1e2:	2304      	movcc	r3, #4
 800d1e4:	50ca      	str	r2, [r1, r3]
 800d1e6:	b10a      	cbz	r2, 800d1ec <__lshift+0xa4>
 800d1e8:	f108 0602 	add.w	r6, r8, #2
 800d1ec:	3e01      	subs	r6, #1
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	612e      	str	r6, [r5, #16]
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	f7ff fd8e 	bl	800cd14 <_Bfree>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800d202:	3301      	adds	r3, #1
 800d204:	e7c5      	b.n	800d192 <__lshift+0x4a>
 800d206:	3904      	subs	r1, #4
 800d208:	f853 2b04 	ldr.w	r2, [r3], #4
 800d20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d210:	459c      	cmp	ip, r3
 800d212:	d8f9      	bhi.n	800d208 <__lshift+0xc0>
 800d214:	e7ea      	b.n	800d1ec <__lshift+0xa4>
 800d216:	bf00      	nop
 800d218:	0800f9bd 	.word	0x0800f9bd
 800d21c:	0800f9ce 	.word	0x0800f9ce

0800d220 <__mcmp>:
 800d220:	b530      	push	{r4, r5, lr}
 800d222:	6902      	ldr	r2, [r0, #16]
 800d224:	690c      	ldr	r4, [r1, #16]
 800d226:	1b12      	subs	r2, r2, r4
 800d228:	d10e      	bne.n	800d248 <__mcmp+0x28>
 800d22a:	f100 0314 	add.w	r3, r0, #20
 800d22e:	3114      	adds	r1, #20
 800d230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d23c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d240:	42a5      	cmp	r5, r4
 800d242:	d003      	beq.n	800d24c <__mcmp+0x2c>
 800d244:	d305      	bcc.n	800d252 <__mcmp+0x32>
 800d246:	2201      	movs	r2, #1
 800d248:	4610      	mov	r0, r2
 800d24a:	bd30      	pop	{r4, r5, pc}
 800d24c:	4283      	cmp	r3, r0
 800d24e:	d3f3      	bcc.n	800d238 <__mcmp+0x18>
 800d250:	e7fa      	b.n	800d248 <__mcmp+0x28>
 800d252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d256:	e7f7      	b.n	800d248 <__mcmp+0x28>

0800d258 <__mdiff>:
 800d258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	460c      	mov	r4, r1
 800d25e:	4606      	mov	r6, r0
 800d260:	4611      	mov	r1, r2
 800d262:	4620      	mov	r0, r4
 800d264:	4690      	mov	r8, r2
 800d266:	f7ff ffdb 	bl	800d220 <__mcmp>
 800d26a:	1e05      	subs	r5, r0, #0
 800d26c:	d110      	bne.n	800d290 <__mdiff+0x38>
 800d26e:	4629      	mov	r1, r5
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff fd0f 	bl	800cc94 <_Balloc>
 800d276:	b930      	cbnz	r0, 800d286 <__mdiff+0x2e>
 800d278:	4b3a      	ldr	r3, [pc, #232]	; (800d364 <__mdiff+0x10c>)
 800d27a:	4602      	mov	r2, r0
 800d27c:	f240 2137 	movw	r1, #567	; 0x237
 800d280:	4839      	ldr	r0, [pc, #228]	; (800d368 <__mdiff+0x110>)
 800d282:	f001 fa95 	bl	800e7b0 <__assert_func>
 800d286:	2301      	movs	r3, #1
 800d288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d290:	bfa4      	itt	ge
 800d292:	4643      	movge	r3, r8
 800d294:	46a0      	movge	r8, r4
 800d296:	4630      	mov	r0, r6
 800d298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d29c:	bfa6      	itte	ge
 800d29e:	461c      	movge	r4, r3
 800d2a0:	2500      	movge	r5, #0
 800d2a2:	2501      	movlt	r5, #1
 800d2a4:	f7ff fcf6 	bl	800cc94 <_Balloc>
 800d2a8:	b920      	cbnz	r0, 800d2b4 <__mdiff+0x5c>
 800d2aa:	4b2e      	ldr	r3, [pc, #184]	; (800d364 <__mdiff+0x10c>)
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	f240 2145 	movw	r1, #581	; 0x245
 800d2b2:	e7e5      	b.n	800d280 <__mdiff+0x28>
 800d2b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2b8:	6926      	ldr	r6, [r4, #16]
 800d2ba:	60c5      	str	r5, [r0, #12]
 800d2bc:	f104 0914 	add.w	r9, r4, #20
 800d2c0:	f108 0514 	add.w	r5, r8, #20
 800d2c4:	f100 0e14 	add.w	lr, r0, #20
 800d2c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2d0:	f108 0210 	add.w	r2, r8, #16
 800d2d4:	46f2      	mov	sl, lr
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2e0:	fa11 f88b 	uxtah	r8, r1, fp
 800d2e4:	b299      	uxth	r1, r3
 800d2e6:	0c1b      	lsrs	r3, r3, #16
 800d2e8:	eba8 0801 	sub.w	r8, r8, r1
 800d2ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2f4:	fa1f f888 	uxth.w	r8, r8
 800d2f8:	1419      	asrs	r1, r3, #16
 800d2fa:	454e      	cmp	r6, r9
 800d2fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d300:	f84a 3b04 	str.w	r3, [sl], #4
 800d304:	d8e8      	bhi.n	800d2d8 <__mdiff+0x80>
 800d306:	1b33      	subs	r3, r6, r4
 800d308:	3b15      	subs	r3, #21
 800d30a:	f023 0303 	bic.w	r3, r3, #3
 800d30e:	3304      	adds	r3, #4
 800d310:	3415      	adds	r4, #21
 800d312:	42a6      	cmp	r6, r4
 800d314:	bf38      	it	cc
 800d316:	2304      	movcc	r3, #4
 800d318:	441d      	add	r5, r3
 800d31a:	4473      	add	r3, lr
 800d31c:	469e      	mov	lr, r3
 800d31e:	462e      	mov	r6, r5
 800d320:	4566      	cmp	r6, ip
 800d322:	d30e      	bcc.n	800d342 <__mdiff+0xea>
 800d324:	f10c 0203 	add.w	r2, ip, #3
 800d328:	1b52      	subs	r2, r2, r5
 800d32a:	f022 0203 	bic.w	r2, r2, #3
 800d32e:	3d03      	subs	r5, #3
 800d330:	45ac      	cmp	ip, r5
 800d332:	bf38      	it	cc
 800d334:	2200      	movcc	r2, #0
 800d336:	4413      	add	r3, r2
 800d338:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d33c:	b17a      	cbz	r2, 800d35e <__mdiff+0x106>
 800d33e:	6107      	str	r7, [r0, #16]
 800d340:	e7a4      	b.n	800d28c <__mdiff+0x34>
 800d342:	f856 8b04 	ldr.w	r8, [r6], #4
 800d346:	fa11 f288 	uxtah	r2, r1, r8
 800d34a:	1414      	asrs	r4, r2, #16
 800d34c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d350:	b292      	uxth	r2, r2
 800d352:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d356:	f84e 2b04 	str.w	r2, [lr], #4
 800d35a:	1421      	asrs	r1, r4, #16
 800d35c:	e7e0      	b.n	800d320 <__mdiff+0xc8>
 800d35e:	3f01      	subs	r7, #1
 800d360:	e7ea      	b.n	800d338 <__mdiff+0xe0>
 800d362:	bf00      	nop
 800d364:	0800f9bd 	.word	0x0800f9bd
 800d368:	0800f9ce 	.word	0x0800f9ce

0800d36c <__ulp>:
 800d36c:	b082      	sub	sp, #8
 800d36e:	ed8d 0b00 	vstr	d0, [sp]
 800d372:	9a01      	ldr	r2, [sp, #4]
 800d374:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <__ulp+0x48>)
 800d376:	4013      	ands	r3, r2
 800d378:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dc08      	bgt.n	800d392 <__ulp+0x26>
 800d380:	425b      	negs	r3, r3
 800d382:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d386:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d38a:	da04      	bge.n	800d396 <__ulp+0x2a>
 800d38c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d390:	4113      	asrs	r3, r2
 800d392:	2200      	movs	r2, #0
 800d394:	e008      	b.n	800d3a8 <__ulp+0x3c>
 800d396:	f1a2 0314 	sub.w	r3, r2, #20
 800d39a:	2b1e      	cmp	r3, #30
 800d39c:	bfda      	itte	le
 800d39e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d3a2:	40da      	lsrle	r2, r3
 800d3a4:	2201      	movgt	r2, #1
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	ec41 0b10 	vmov	d0, r0, r1
 800d3b0:	b002      	add	sp, #8
 800d3b2:	4770      	bx	lr
 800d3b4:	7ff00000 	.word	0x7ff00000

0800d3b8 <__b2d>:
 800d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3bc:	6906      	ldr	r6, [r0, #16]
 800d3be:	f100 0814 	add.w	r8, r0, #20
 800d3c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3c6:	1f37      	subs	r7, r6, #4
 800d3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f7ff fd53 	bl	800ce78 <__hi0bits>
 800d3d2:	f1c0 0320 	rsb	r3, r0, #32
 800d3d6:	280a      	cmp	r0, #10
 800d3d8:	600b      	str	r3, [r1, #0]
 800d3da:	491b      	ldr	r1, [pc, #108]	; (800d448 <__b2d+0x90>)
 800d3dc:	dc15      	bgt.n	800d40a <__b2d+0x52>
 800d3de:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3e6:	45b8      	cmp	r8, r7
 800d3e8:	ea43 0501 	orr.w	r5, r3, r1
 800d3ec:	bf34      	ite	cc
 800d3ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3f2:	2300      	movcs	r3, #0
 800d3f4:	3015      	adds	r0, #21
 800d3f6:	fa02 f000 	lsl.w	r0, r2, r0
 800d3fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800d3fe:	4303      	orrs	r3, r0
 800d400:	461c      	mov	r4, r3
 800d402:	ec45 4b10 	vmov	d0, r4, r5
 800d406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40a:	45b8      	cmp	r8, r7
 800d40c:	bf3a      	itte	cc
 800d40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d412:	f1a6 0708 	subcc.w	r7, r6, #8
 800d416:	2300      	movcs	r3, #0
 800d418:	380b      	subs	r0, #11
 800d41a:	d012      	beq.n	800d442 <__b2d+0x8a>
 800d41c:	f1c0 0120 	rsb	r1, r0, #32
 800d420:	fa23 f401 	lsr.w	r4, r3, r1
 800d424:	4082      	lsls	r2, r0
 800d426:	4322      	orrs	r2, r4
 800d428:	4547      	cmp	r7, r8
 800d42a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d42e:	bf8c      	ite	hi
 800d430:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d434:	2200      	movls	r2, #0
 800d436:	4083      	lsls	r3, r0
 800d438:	40ca      	lsrs	r2, r1
 800d43a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d43e:	4313      	orrs	r3, r2
 800d440:	e7de      	b.n	800d400 <__b2d+0x48>
 800d442:	ea42 0501 	orr.w	r5, r2, r1
 800d446:	e7db      	b.n	800d400 <__b2d+0x48>
 800d448:	3ff00000 	.word	0x3ff00000

0800d44c <__d2b>:
 800d44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d450:	460f      	mov	r7, r1
 800d452:	2101      	movs	r1, #1
 800d454:	ec59 8b10 	vmov	r8, r9, d0
 800d458:	4616      	mov	r6, r2
 800d45a:	f7ff fc1b 	bl	800cc94 <_Balloc>
 800d45e:	4604      	mov	r4, r0
 800d460:	b930      	cbnz	r0, 800d470 <__d2b+0x24>
 800d462:	4602      	mov	r2, r0
 800d464:	4b24      	ldr	r3, [pc, #144]	; (800d4f8 <__d2b+0xac>)
 800d466:	4825      	ldr	r0, [pc, #148]	; (800d4fc <__d2b+0xb0>)
 800d468:	f240 310f 	movw	r1, #783	; 0x30f
 800d46c:	f001 f9a0 	bl	800e7b0 <__assert_func>
 800d470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d478:	bb2d      	cbnz	r5, 800d4c6 <__d2b+0x7a>
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	f1b8 0300 	subs.w	r3, r8, #0
 800d480:	d026      	beq.n	800d4d0 <__d2b+0x84>
 800d482:	4668      	mov	r0, sp
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	f7ff fd17 	bl	800ceb8 <__lo0bits>
 800d48a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d48e:	b1e8      	cbz	r0, 800d4cc <__d2b+0x80>
 800d490:	f1c0 0320 	rsb	r3, r0, #32
 800d494:	fa02 f303 	lsl.w	r3, r2, r3
 800d498:	430b      	orrs	r3, r1
 800d49a:	40c2      	lsrs	r2, r0
 800d49c:	6163      	str	r3, [r4, #20]
 800d49e:	9201      	str	r2, [sp, #4]
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	61a3      	str	r3, [r4, #24]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bf14      	ite	ne
 800d4a8:	2202      	movne	r2, #2
 800d4aa:	2201      	moveq	r2, #1
 800d4ac:	6122      	str	r2, [r4, #16]
 800d4ae:	b1bd      	cbz	r5, 800d4e0 <__d2b+0x94>
 800d4b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4b4:	4405      	add	r5, r0
 800d4b6:	603d      	str	r5, [r7, #0]
 800d4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4bc:	6030      	str	r0, [r6, #0]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	b003      	add	sp, #12
 800d4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4ca:	e7d6      	b.n	800d47a <__d2b+0x2e>
 800d4cc:	6161      	str	r1, [r4, #20]
 800d4ce:	e7e7      	b.n	800d4a0 <__d2b+0x54>
 800d4d0:	a801      	add	r0, sp, #4
 800d4d2:	f7ff fcf1 	bl	800ceb8 <__lo0bits>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	6163      	str	r3, [r4, #20]
 800d4da:	3020      	adds	r0, #32
 800d4dc:	2201      	movs	r2, #1
 800d4de:	e7e5      	b.n	800d4ac <__d2b+0x60>
 800d4e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4e8:	6038      	str	r0, [r7, #0]
 800d4ea:	6918      	ldr	r0, [r3, #16]
 800d4ec:	f7ff fcc4 	bl	800ce78 <__hi0bits>
 800d4f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4f4:	e7e2      	b.n	800d4bc <__d2b+0x70>
 800d4f6:	bf00      	nop
 800d4f8:	0800f9bd 	.word	0x0800f9bd
 800d4fc:	0800f9ce 	.word	0x0800f9ce

0800d500 <__ratio>:
 800d500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	4688      	mov	r8, r1
 800d506:	4669      	mov	r1, sp
 800d508:	4681      	mov	r9, r0
 800d50a:	f7ff ff55 	bl	800d3b8 <__b2d>
 800d50e:	a901      	add	r1, sp, #4
 800d510:	4640      	mov	r0, r8
 800d512:	ec55 4b10 	vmov	r4, r5, d0
 800d516:	f7ff ff4f 	bl	800d3b8 <__b2d>
 800d51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d51e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d522:	eba3 0c02 	sub.w	ip, r3, r2
 800d526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d52a:	1a9b      	subs	r3, r3, r2
 800d52c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d530:	ec51 0b10 	vmov	r0, r1, d0
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfd6      	itet	le
 800d538:	460a      	movle	r2, r1
 800d53a:	462a      	movgt	r2, r5
 800d53c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d540:	468b      	mov	fp, r1
 800d542:	462f      	mov	r7, r5
 800d544:	bfd4      	ite	le
 800d546:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d54a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d54e:	4620      	mov	r0, r4
 800d550:	ee10 2a10 	vmov	r2, s0
 800d554:	465b      	mov	r3, fp
 800d556:	4639      	mov	r1, r7
 800d558:	f7f3 f980 	bl	800085c <__aeabi_ddiv>
 800d55c:	ec41 0b10 	vmov	d0, r0, r1
 800d560:	b003      	add	sp, #12
 800d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d566 <__copybits>:
 800d566:	3901      	subs	r1, #1
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	1149      	asrs	r1, r1, #5
 800d56c:	6914      	ldr	r4, [r2, #16]
 800d56e:	3101      	adds	r1, #1
 800d570:	f102 0314 	add.w	r3, r2, #20
 800d574:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d578:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d57c:	1f05      	subs	r5, r0, #4
 800d57e:	42a3      	cmp	r3, r4
 800d580:	d30c      	bcc.n	800d59c <__copybits+0x36>
 800d582:	1aa3      	subs	r3, r4, r2
 800d584:	3b11      	subs	r3, #17
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	3211      	adds	r2, #17
 800d58c:	42a2      	cmp	r2, r4
 800d58e:	bf88      	it	hi
 800d590:	2300      	movhi	r3, #0
 800d592:	4418      	add	r0, r3
 800d594:	2300      	movs	r3, #0
 800d596:	4288      	cmp	r0, r1
 800d598:	d305      	bcc.n	800d5a6 <__copybits+0x40>
 800d59a:	bd70      	pop	{r4, r5, r6, pc}
 800d59c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5a4:	e7eb      	b.n	800d57e <__copybits+0x18>
 800d5a6:	f840 3b04 	str.w	r3, [r0], #4
 800d5aa:	e7f4      	b.n	800d596 <__copybits+0x30>

0800d5ac <__any_on>:
 800d5ac:	f100 0214 	add.w	r2, r0, #20
 800d5b0:	6900      	ldr	r0, [r0, #16]
 800d5b2:	114b      	asrs	r3, r1, #5
 800d5b4:	4298      	cmp	r0, r3
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	db11      	blt.n	800d5de <__any_on+0x32>
 800d5ba:	dd0a      	ble.n	800d5d2 <__any_on+0x26>
 800d5bc:	f011 011f 	ands.w	r1, r1, #31
 800d5c0:	d007      	beq.n	800d5d2 <__any_on+0x26>
 800d5c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5c6:	fa24 f001 	lsr.w	r0, r4, r1
 800d5ca:	fa00 f101 	lsl.w	r1, r0, r1
 800d5ce:	428c      	cmp	r4, r1
 800d5d0:	d10b      	bne.n	800d5ea <__any_on+0x3e>
 800d5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d803      	bhi.n	800d5e2 <__any_on+0x36>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	4603      	mov	r3, r0
 800d5e0:	e7f7      	b.n	800d5d2 <__any_on+0x26>
 800d5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d0f5      	beq.n	800d5d6 <__any_on+0x2a>
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7f6      	b.n	800d5dc <__any_on+0x30>

0800d5ee <sulp>:
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	ec45 4b10 	vmov	d0, r4, r5
 800d5f8:	4616      	mov	r6, r2
 800d5fa:	f7ff feb7 	bl	800d36c <__ulp>
 800d5fe:	ec51 0b10 	vmov	r0, r1, d0
 800d602:	b17e      	cbz	r6, 800d624 <sulp+0x36>
 800d604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd09      	ble.n	800d624 <sulp+0x36>
 800d610:	051b      	lsls	r3, r3, #20
 800d612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d616:	2400      	movs	r4, #0
 800d618:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d61c:	4622      	mov	r2, r4
 800d61e:	462b      	mov	r3, r5
 800d620:	f7f2 fff2 	bl	8000608 <__aeabi_dmul>
 800d624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d628 <_strtod_l>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ed2d 8b02 	vpush	{d8}
 800d630:	b09b      	sub	sp, #108	; 0x6c
 800d632:	4604      	mov	r4, r0
 800d634:	9213      	str	r2, [sp, #76]	; 0x4c
 800d636:	2200      	movs	r2, #0
 800d638:	9216      	str	r2, [sp, #88]	; 0x58
 800d63a:	460d      	mov	r5, r1
 800d63c:	f04f 0800 	mov.w	r8, #0
 800d640:	f04f 0900 	mov.w	r9, #0
 800d644:	460a      	mov	r2, r1
 800d646:	9215      	str	r2, [sp, #84]	; 0x54
 800d648:	7811      	ldrb	r1, [r2, #0]
 800d64a:	292b      	cmp	r1, #43	; 0x2b
 800d64c:	d04c      	beq.n	800d6e8 <_strtod_l+0xc0>
 800d64e:	d83a      	bhi.n	800d6c6 <_strtod_l+0x9e>
 800d650:	290d      	cmp	r1, #13
 800d652:	d834      	bhi.n	800d6be <_strtod_l+0x96>
 800d654:	2908      	cmp	r1, #8
 800d656:	d834      	bhi.n	800d6c2 <_strtod_l+0x9a>
 800d658:	2900      	cmp	r1, #0
 800d65a:	d03d      	beq.n	800d6d8 <_strtod_l+0xb0>
 800d65c:	2200      	movs	r2, #0
 800d65e:	920a      	str	r2, [sp, #40]	; 0x28
 800d660:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d662:	7832      	ldrb	r2, [r6, #0]
 800d664:	2a30      	cmp	r2, #48	; 0x30
 800d666:	f040 80b4 	bne.w	800d7d2 <_strtod_l+0x1aa>
 800d66a:	7872      	ldrb	r2, [r6, #1]
 800d66c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d670:	2a58      	cmp	r2, #88	; 0x58
 800d672:	d170      	bne.n	800d756 <_strtod_l+0x12e>
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	ab16      	add	r3, sp, #88	; 0x58
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	4a8e      	ldr	r2, [pc, #568]	; (800d8b8 <_strtod_l+0x290>)
 800d680:	ab17      	add	r3, sp, #92	; 0x5c
 800d682:	a915      	add	r1, sp, #84	; 0x54
 800d684:	4620      	mov	r0, r4
 800d686:	f001 f92f 	bl	800e8e8 <__gethex>
 800d68a:	f010 070f 	ands.w	r7, r0, #15
 800d68e:	4605      	mov	r5, r0
 800d690:	d005      	beq.n	800d69e <_strtod_l+0x76>
 800d692:	2f06      	cmp	r7, #6
 800d694:	d12a      	bne.n	800d6ec <_strtod_l+0xc4>
 800d696:	3601      	adds	r6, #1
 800d698:	2300      	movs	r3, #0
 800d69a:	9615      	str	r6, [sp, #84]	; 0x54
 800d69c:	930a      	str	r3, [sp, #40]	; 0x28
 800d69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f040 857f 	bne.w	800e1a4 <_strtod_l+0xb7c>
 800d6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a8:	b1db      	cbz	r3, 800d6e2 <_strtod_l+0xba>
 800d6aa:	4642      	mov	r2, r8
 800d6ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d6b0:	ec43 2b10 	vmov	d0, r2, r3
 800d6b4:	b01b      	add	sp, #108	; 0x6c
 800d6b6:	ecbd 8b02 	vpop	{d8}
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	2920      	cmp	r1, #32
 800d6c0:	d1cc      	bne.n	800d65c <_strtod_l+0x34>
 800d6c2:	3201      	adds	r2, #1
 800d6c4:	e7bf      	b.n	800d646 <_strtod_l+0x1e>
 800d6c6:	292d      	cmp	r1, #45	; 0x2d
 800d6c8:	d1c8      	bne.n	800d65c <_strtod_l+0x34>
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	910a      	str	r1, [sp, #40]	; 0x28
 800d6ce:	1c51      	adds	r1, r2, #1
 800d6d0:	9115      	str	r1, [sp, #84]	; 0x54
 800d6d2:	7852      	ldrb	r2, [r2, #1]
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	d1c3      	bne.n	800d660 <_strtod_l+0x38>
 800d6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6da:	9515      	str	r5, [sp, #84]	; 0x54
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f040 855f 	bne.w	800e1a0 <_strtod_l+0xb78>
 800d6e2:	4642      	mov	r2, r8
 800d6e4:	464b      	mov	r3, r9
 800d6e6:	e7e3      	b.n	800d6b0 <_strtod_l+0x88>
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	e7ef      	b.n	800d6cc <_strtod_l+0xa4>
 800d6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d6ee:	b13a      	cbz	r2, 800d700 <_strtod_l+0xd8>
 800d6f0:	2135      	movs	r1, #53	; 0x35
 800d6f2:	a818      	add	r0, sp, #96	; 0x60
 800d6f4:	f7ff ff37 	bl	800d566 <__copybits>
 800d6f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f7ff fb0a 	bl	800cd14 <_Bfree>
 800d700:	3f01      	subs	r7, #1
 800d702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d704:	2f04      	cmp	r7, #4
 800d706:	d806      	bhi.n	800d716 <_strtod_l+0xee>
 800d708:	e8df f007 	tbb	[pc, r7]
 800d70c:	201d0314 	.word	0x201d0314
 800d710:	14          	.byte	0x14
 800d711:	00          	.byte	0x00
 800d712:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d716:	05e9      	lsls	r1, r5, #23
 800d718:	bf48      	it	mi
 800d71a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d722:	0d1b      	lsrs	r3, r3, #20
 800d724:	051b      	lsls	r3, r3, #20
 800d726:	2b00      	cmp	r3, #0
 800d728:	d1b9      	bne.n	800d69e <_strtod_l+0x76>
 800d72a:	f7fe faf9 	bl	800bd20 <__errno>
 800d72e:	2322      	movs	r3, #34	; 0x22
 800d730:	6003      	str	r3, [r0, #0]
 800d732:	e7b4      	b.n	800d69e <_strtod_l+0x76>
 800d734:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d73c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d744:	e7e7      	b.n	800d716 <_strtod_l+0xee>
 800d746:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d8c0 <_strtod_l+0x298>
 800d74a:	e7e4      	b.n	800d716 <_strtod_l+0xee>
 800d74c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d750:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d754:	e7df      	b.n	800d716 <_strtod_l+0xee>
 800d756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	9215      	str	r2, [sp, #84]	; 0x54
 800d75c:	785b      	ldrb	r3, [r3, #1]
 800d75e:	2b30      	cmp	r3, #48	; 0x30
 800d760:	d0f9      	beq.n	800d756 <_strtod_l+0x12e>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d09b      	beq.n	800d69e <_strtod_l+0x76>
 800d766:	2301      	movs	r3, #1
 800d768:	f04f 0a00 	mov.w	sl, #0
 800d76c:	9304      	str	r3, [sp, #16]
 800d76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d770:	930b      	str	r3, [sp, #44]	; 0x2c
 800d772:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d776:	46d3      	mov	fp, sl
 800d778:	220a      	movs	r2, #10
 800d77a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d77c:	7806      	ldrb	r6, [r0, #0]
 800d77e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d782:	b2d9      	uxtb	r1, r3
 800d784:	2909      	cmp	r1, #9
 800d786:	d926      	bls.n	800d7d6 <_strtod_l+0x1ae>
 800d788:	494c      	ldr	r1, [pc, #304]	; (800d8bc <_strtod_l+0x294>)
 800d78a:	2201      	movs	r2, #1
 800d78c:	f000 ffe6 	bl	800e75c <strncmp>
 800d790:	2800      	cmp	r0, #0
 800d792:	d030      	beq.n	800d7f6 <_strtod_l+0x1ce>
 800d794:	2000      	movs	r0, #0
 800d796:	4632      	mov	r2, r6
 800d798:	9005      	str	r0, [sp, #20]
 800d79a:	465e      	mov	r6, fp
 800d79c:	4603      	mov	r3, r0
 800d79e:	2a65      	cmp	r2, #101	; 0x65
 800d7a0:	d001      	beq.n	800d7a6 <_strtod_l+0x17e>
 800d7a2:	2a45      	cmp	r2, #69	; 0x45
 800d7a4:	d113      	bne.n	800d7ce <_strtod_l+0x1a6>
 800d7a6:	b91e      	cbnz	r6, 800d7b0 <_strtod_l+0x188>
 800d7a8:	9a04      	ldr	r2, [sp, #16]
 800d7aa:	4302      	orrs	r2, r0
 800d7ac:	d094      	beq.n	800d6d8 <_strtod_l+0xb0>
 800d7ae:	2600      	movs	r6, #0
 800d7b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d7b2:	1c6a      	adds	r2, r5, #1
 800d7b4:	9215      	str	r2, [sp, #84]	; 0x54
 800d7b6:	786a      	ldrb	r2, [r5, #1]
 800d7b8:	2a2b      	cmp	r2, #43	; 0x2b
 800d7ba:	d074      	beq.n	800d8a6 <_strtod_l+0x27e>
 800d7bc:	2a2d      	cmp	r2, #45	; 0x2d
 800d7be:	d078      	beq.n	800d8b2 <_strtod_l+0x28a>
 800d7c0:	f04f 0c00 	mov.w	ip, #0
 800d7c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d7c8:	2909      	cmp	r1, #9
 800d7ca:	d97f      	bls.n	800d8cc <_strtod_l+0x2a4>
 800d7cc:	9515      	str	r5, [sp, #84]	; 0x54
 800d7ce:	2700      	movs	r7, #0
 800d7d0:	e09e      	b.n	800d910 <_strtod_l+0x2e8>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e7c8      	b.n	800d768 <_strtod_l+0x140>
 800d7d6:	f1bb 0f08 	cmp.w	fp, #8
 800d7da:	bfd8      	it	le
 800d7dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d7de:	f100 0001 	add.w	r0, r0, #1
 800d7e2:	bfda      	itte	le
 800d7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800d7ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d7ee:	f10b 0b01 	add.w	fp, fp, #1
 800d7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800d7f4:	e7c1      	b.n	800d77a <_strtod_l+0x152>
 800d7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	9215      	str	r2, [sp, #84]	; 0x54
 800d7fc:	785a      	ldrb	r2, [r3, #1]
 800d7fe:	f1bb 0f00 	cmp.w	fp, #0
 800d802:	d037      	beq.n	800d874 <_strtod_l+0x24c>
 800d804:	9005      	str	r0, [sp, #20]
 800d806:	465e      	mov	r6, fp
 800d808:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d80c:	2b09      	cmp	r3, #9
 800d80e:	d912      	bls.n	800d836 <_strtod_l+0x20e>
 800d810:	2301      	movs	r3, #1
 800d812:	e7c4      	b.n	800d79e <_strtod_l+0x176>
 800d814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	9215      	str	r2, [sp, #84]	; 0x54
 800d81a:	785a      	ldrb	r2, [r3, #1]
 800d81c:	3001      	adds	r0, #1
 800d81e:	2a30      	cmp	r2, #48	; 0x30
 800d820:	d0f8      	beq.n	800d814 <_strtod_l+0x1ec>
 800d822:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d826:	2b08      	cmp	r3, #8
 800d828:	f200 84c1 	bhi.w	800e1ae <_strtod_l+0xb86>
 800d82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d82e:	9005      	str	r0, [sp, #20]
 800d830:	2000      	movs	r0, #0
 800d832:	930b      	str	r3, [sp, #44]	; 0x2c
 800d834:	4606      	mov	r6, r0
 800d836:	3a30      	subs	r2, #48	; 0x30
 800d838:	f100 0301 	add.w	r3, r0, #1
 800d83c:	d014      	beq.n	800d868 <_strtod_l+0x240>
 800d83e:	9905      	ldr	r1, [sp, #20]
 800d840:	4419      	add	r1, r3
 800d842:	9105      	str	r1, [sp, #20]
 800d844:	4633      	mov	r3, r6
 800d846:	eb00 0c06 	add.w	ip, r0, r6
 800d84a:	210a      	movs	r1, #10
 800d84c:	4563      	cmp	r3, ip
 800d84e:	d113      	bne.n	800d878 <_strtod_l+0x250>
 800d850:	1833      	adds	r3, r6, r0
 800d852:	2b08      	cmp	r3, #8
 800d854:	f106 0601 	add.w	r6, r6, #1
 800d858:	4406      	add	r6, r0
 800d85a:	dc1a      	bgt.n	800d892 <_strtod_l+0x26a>
 800d85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d85e:	230a      	movs	r3, #10
 800d860:	fb03 2301 	mla	r3, r3, r1, r2
 800d864:	9309      	str	r3, [sp, #36]	; 0x24
 800d866:	2300      	movs	r3, #0
 800d868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d86a:	1c51      	adds	r1, r2, #1
 800d86c:	9115      	str	r1, [sp, #84]	; 0x54
 800d86e:	7852      	ldrb	r2, [r2, #1]
 800d870:	4618      	mov	r0, r3
 800d872:	e7c9      	b.n	800d808 <_strtod_l+0x1e0>
 800d874:	4658      	mov	r0, fp
 800d876:	e7d2      	b.n	800d81e <_strtod_l+0x1f6>
 800d878:	2b08      	cmp	r3, #8
 800d87a:	f103 0301 	add.w	r3, r3, #1
 800d87e:	dc03      	bgt.n	800d888 <_strtod_l+0x260>
 800d880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d882:	434f      	muls	r7, r1
 800d884:	9709      	str	r7, [sp, #36]	; 0x24
 800d886:	e7e1      	b.n	800d84c <_strtod_l+0x224>
 800d888:	2b10      	cmp	r3, #16
 800d88a:	bfd8      	it	le
 800d88c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d890:	e7dc      	b.n	800d84c <_strtod_l+0x224>
 800d892:	2e10      	cmp	r6, #16
 800d894:	bfdc      	itt	le
 800d896:	230a      	movle	r3, #10
 800d898:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d89c:	e7e3      	b.n	800d866 <_strtod_l+0x23e>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e780      	b.n	800d7a8 <_strtod_l+0x180>
 800d8a6:	f04f 0c00 	mov.w	ip, #0
 800d8aa:	1caa      	adds	r2, r5, #2
 800d8ac:	9215      	str	r2, [sp, #84]	; 0x54
 800d8ae:	78aa      	ldrb	r2, [r5, #2]
 800d8b0:	e788      	b.n	800d7c4 <_strtod_l+0x19c>
 800d8b2:	f04f 0c01 	mov.w	ip, #1
 800d8b6:	e7f8      	b.n	800d8aa <_strtod_l+0x282>
 800d8b8:	0800fb28 	.word	0x0800fb28
 800d8bc:	0800fb24 	.word	0x0800fb24
 800d8c0:	7ff00000 	.word	0x7ff00000
 800d8c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d8c6:	1c51      	adds	r1, r2, #1
 800d8c8:	9115      	str	r1, [sp, #84]	; 0x54
 800d8ca:	7852      	ldrb	r2, [r2, #1]
 800d8cc:	2a30      	cmp	r2, #48	; 0x30
 800d8ce:	d0f9      	beq.n	800d8c4 <_strtod_l+0x29c>
 800d8d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d8d4:	2908      	cmp	r1, #8
 800d8d6:	f63f af7a 	bhi.w	800d7ce <_strtod_l+0x1a6>
 800d8da:	3a30      	subs	r2, #48	; 0x30
 800d8dc:	9208      	str	r2, [sp, #32]
 800d8de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d8e0:	920c      	str	r2, [sp, #48]	; 0x30
 800d8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d8e4:	1c57      	adds	r7, r2, #1
 800d8e6:	9715      	str	r7, [sp, #84]	; 0x54
 800d8e8:	7852      	ldrb	r2, [r2, #1]
 800d8ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d8ee:	f1be 0f09 	cmp.w	lr, #9
 800d8f2:	d938      	bls.n	800d966 <_strtod_l+0x33e>
 800d8f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d8f6:	1a7f      	subs	r7, r7, r1
 800d8f8:	2f08      	cmp	r7, #8
 800d8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d8fe:	dc03      	bgt.n	800d908 <_strtod_l+0x2e0>
 800d900:	9908      	ldr	r1, [sp, #32]
 800d902:	428f      	cmp	r7, r1
 800d904:	bfa8      	it	ge
 800d906:	460f      	movge	r7, r1
 800d908:	f1bc 0f00 	cmp.w	ip, #0
 800d90c:	d000      	beq.n	800d910 <_strtod_l+0x2e8>
 800d90e:	427f      	negs	r7, r7
 800d910:	2e00      	cmp	r6, #0
 800d912:	d14f      	bne.n	800d9b4 <_strtod_l+0x38c>
 800d914:	9904      	ldr	r1, [sp, #16]
 800d916:	4301      	orrs	r1, r0
 800d918:	f47f aec1 	bne.w	800d69e <_strtod_l+0x76>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f47f aedb 	bne.w	800d6d8 <_strtod_l+0xb0>
 800d922:	2a69      	cmp	r2, #105	; 0x69
 800d924:	d029      	beq.n	800d97a <_strtod_l+0x352>
 800d926:	dc26      	bgt.n	800d976 <_strtod_l+0x34e>
 800d928:	2a49      	cmp	r2, #73	; 0x49
 800d92a:	d026      	beq.n	800d97a <_strtod_l+0x352>
 800d92c:	2a4e      	cmp	r2, #78	; 0x4e
 800d92e:	f47f aed3 	bne.w	800d6d8 <_strtod_l+0xb0>
 800d932:	499b      	ldr	r1, [pc, #620]	; (800dba0 <_strtod_l+0x578>)
 800d934:	a815      	add	r0, sp, #84	; 0x54
 800d936:	f001 fa17 	bl	800ed68 <__match>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f43f aecc 	beq.w	800d6d8 <_strtod_l+0xb0>
 800d940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b28      	cmp	r3, #40	; 0x28
 800d946:	d12f      	bne.n	800d9a8 <_strtod_l+0x380>
 800d948:	4996      	ldr	r1, [pc, #600]	; (800dba4 <_strtod_l+0x57c>)
 800d94a:	aa18      	add	r2, sp, #96	; 0x60
 800d94c:	a815      	add	r0, sp, #84	; 0x54
 800d94e:	f001 fa1f 	bl	800ed90 <__hexnan>
 800d952:	2805      	cmp	r0, #5
 800d954:	d128      	bne.n	800d9a8 <_strtod_l+0x380>
 800d956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d964:	e69b      	b.n	800d69e <_strtod_l+0x76>
 800d966:	9f08      	ldr	r7, [sp, #32]
 800d968:	210a      	movs	r1, #10
 800d96a:	fb01 2107 	mla	r1, r1, r7, r2
 800d96e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d972:	9208      	str	r2, [sp, #32]
 800d974:	e7b5      	b.n	800d8e2 <_strtod_l+0x2ba>
 800d976:	2a6e      	cmp	r2, #110	; 0x6e
 800d978:	e7d9      	b.n	800d92e <_strtod_l+0x306>
 800d97a:	498b      	ldr	r1, [pc, #556]	; (800dba8 <_strtod_l+0x580>)
 800d97c:	a815      	add	r0, sp, #84	; 0x54
 800d97e:	f001 f9f3 	bl	800ed68 <__match>
 800d982:	2800      	cmp	r0, #0
 800d984:	f43f aea8 	beq.w	800d6d8 <_strtod_l+0xb0>
 800d988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d98a:	4988      	ldr	r1, [pc, #544]	; (800dbac <_strtod_l+0x584>)
 800d98c:	3b01      	subs	r3, #1
 800d98e:	a815      	add	r0, sp, #84	; 0x54
 800d990:	9315      	str	r3, [sp, #84]	; 0x54
 800d992:	f001 f9e9 	bl	800ed68 <__match>
 800d996:	b910      	cbnz	r0, 800d99e <_strtod_l+0x376>
 800d998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d99a:	3301      	adds	r3, #1
 800d99c:	9315      	str	r3, [sp, #84]	; 0x54
 800d99e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800dbbc <_strtod_l+0x594>
 800d9a2:	f04f 0800 	mov.w	r8, #0
 800d9a6:	e67a      	b.n	800d69e <_strtod_l+0x76>
 800d9a8:	4881      	ldr	r0, [pc, #516]	; (800dbb0 <_strtod_l+0x588>)
 800d9aa:	f000 fef9 	bl	800e7a0 <nan>
 800d9ae:	ec59 8b10 	vmov	r8, r9, d0
 800d9b2:	e674      	b.n	800d69e <_strtod_l+0x76>
 800d9b4:	9b05      	ldr	r3, [sp, #20]
 800d9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9b8:	1afb      	subs	r3, r7, r3
 800d9ba:	f1bb 0f00 	cmp.w	fp, #0
 800d9be:	bf08      	it	eq
 800d9c0:	46b3      	moveq	fp, r6
 800d9c2:	2e10      	cmp	r6, #16
 800d9c4:	9308      	str	r3, [sp, #32]
 800d9c6:	4635      	mov	r5, r6
 800d9c8:	bfa8      	it	ge
 800d9ca:	2510      	movge	r5, #16
 800d9cc:	f7f2 fda2 	bl	8000514 <__aeabi_ui2d>
 800d9d0:	2e09      	cmp	r6, #9
 800d9d2:	4680      	mov	r8, r0
 800d9d4:	4689      	mov	r9, r1
 800d9d6:	dd13      	ble.n	800da00 <_strtod_l+0x3d8>
 800d9d8:	4b76      	ldr	r3, [pc, #472]	; (800dbb4 <_strtod_l+0x58c>)
 800d9da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d9e2:	f7f2 fe11 	bl	8000608 <__aeabi_dmul>
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	4689      	mov	r9, r1
 800d9ec:	f7f2 fd92 	bl	8000514 <__aeabi_ui2d>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4649      	mov	r1, r9
 800d9f8:	f7f2 fc50 	bl	800029c <__adddf3>
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	4689      	mov	r9, r1
 800da00:	2e0f      	cmp	r6, #15
 800da02:	dc38      	bgt.n	800da76 <_strtod_l+0x44e>
 800da04:	9b08      	ldr	r3, [sp, #32]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f43f ae49 	beq.w	800d69e <_strtod_l+0x76>
 800da0c:	dd24      	ble.n	800da58 <_strtod_l+0x430>
 800da0e:	2b16      	cmp	r3, #22
 800da10:	dc0b      	bgt.n	800da2a <_strtod_l+0x402>
 800da12:	4968      	ldr	r1, [pc, #416]	; (800dbb4 <_strtod_l+0x58c>)
 800da14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1c:	4642      	mov	r2, r8
 800da1e:	464b      	mov	r3, r9
 800da20:	f7f2 fdf2 	bl	8000608 <__aeabi_dmul>
 800da24:	4680      	mov	r8, r0
 800da26:	4689      	mov	r9, r1
 800da28:	e639      	b.n	800d69e <_strtod_l+0x76>
 800da2a:	9a08      	ldr	r2, [sp, #32]
 800da2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800da30:	4293      	cmp	r3, r2
 800da32:	db20      	blt.n	800da76 <_strtod_l+0x44e>
 800da34:	4c5f      	ldr	r4, [pc, #380]	; (800dbb4 <_strtod_l+0x58c>)
 800da36:	f1c6 060f 	rsb	r6, r6, #15
 800da3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800da3e:	4642      	mov	r2, r8
 800da40:	464b      	mov	r3, r9
 800da42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da46:	f7f2 fddf 	bl	8000608 <__aeabi_dmul>
 800da4a:	9b08      	ldr	r3, [sp, #32]
 800da4c:	1b9e      	subs	r6, r3, r6
 800da4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800da52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da56:	e7e3      	b.n	800da20 <_strtod_l+0x3f8>
 800da58:	9b08      	ldr	r3, [sp, #32]
 800da5a:	3316      	adds	r3, #22
 800da5c:	db0b      	blt.n	800da76 <_strtod_l+0x44e>
 800da5e:	9b05      	ldr	r3, [sp, #20]
 800da60:	1bdf      	subs	r7, r3, r7
 800da62:	4b54      	ldr	r3, [pc, #336]	; (800dbb4 <_strtod_l+0x58c>)
 800da64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800da68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da6c:	4640      	mov	r0, r8
 800da6e:	4649      	mov	r1, r9
 800da70:	f7f2 fef4 	bl	800085c <__aeabi_ddiv>
 800da74:	e7d6      	b.n	800da24 <_strtod_l+0x3fc>
 800da76:	9b08      	ldr	r3, [sp, #32]
 800da78:	1b75      	subs	r5, r6, r5
 800da7a:	441d      	add	r5, r3
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	dd70      	ble.n	800db62 <_strtod_l+0x53a>
 800da80:	f015 030f 	ands.w	r3, r5, #15
 800da84:	d00a      	beq.n	800da9c <_strtod_l+0x474>
 800da86:	494b      	ldr	r1, [pc, #300]	; (800dbb4 <_strtod_l+0x58c>)
 800da88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da94:	f7f2 fdb8 	bl	8000608 <__aeabi_dmul>
 800da98:	4680      	mov	r8, r0
 800da9a:	4689      	mov	r9, r1
 800da9c:	f035 050f 	bics.w	r5, r5, #15
 800daa0:	d04d      	beq.n	800db3e <_strtod_l+0x516>
 800daa2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800daa6:	dd22      	ble.n	800daee <_strtod_l+0x4c6>
 800daa8:	2500      	movs	r5, #0
 800daaa:	46ab      	mov	fp, r5
 800daac:	9509      	str	r5, [sp, #36]	; 0x24
 800daae:	9505      	str	r5, [sp, #20]
 800dab0:	2322      	movs	r3, #34	; 0x22
 800dab2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dbbc <_strtod_l+0x594>
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	f04f 0800 	mov.w	r8, #0
 800dabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f43f aded 	beq.w	800d69e <_strtod_l+0x76>
 800dac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7ff f924 	bl	800cd14 <_Bfree>
 800dacc:	9905      	ldr	r1, [sp, #20]
 800dace:	4620      	mov	r0, r4
 800dad0:	f7ff f920 	bl	800cd14 <_Bfree>
 800dad4:	4659      	mov	r1, fp
 800dad6:	4620      	mov	r0, r4
 800dad8:	f7ff f91c 	bl	800cd14 <_Bfree>
 800dadc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dade:	4620      	mov	r0, r4
 800dae0:	f7ff f918 	bl	800cd14 <_Bfree>
 800dae4:	4629      	mov	r1, r5
 800dae6:	4620      	mov	r0, r4
 800dae8:	f7ff f914 	bl	800cd14 <_Bfree>
 800daec:	e5d7      	b.n	800d69e <_strtod_l+0x76>
 800daee:	4b32      	ldr	r3, [pc, #200]	; (800dbb8 <_strtod_l+0x590>)
 800daf0:	9304      	str	r3, [sp, #16]
 800daf2:	2300      	movs	r3, #0
 800daf4:	112d      	asrs	r5, r5, #4
 800daf6:	4640      	mov	r0, r8
 800daf8:	4649      	mov	r1, r9
 800dafa:	469a      	mov	sl, r3
 800dafc:	2d01      	cmp	r5, #1
 800dafe:	dc21      	bgt.n	800db44 <_strtod_l+0x51c>
 800db00:	b10b      	cbz	r3, 800db06 <_strtod_l+0x4de>
 800db02:	4680      	mov	r8, r0
 800db04:	4689      	mov	r9, r1
 800db06:	492c      	ldr	r1, [pc, #176]	; (800dbb8 <_strtod_l+0x590>)
 800db08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800db0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800db10:	4642      	mov	r2, r8
 800db12:	464b      	mov	r3, r9
 800db14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db18:	f7f2 fd76 	bl	8000608 <__aeabi_dmul>
 800db1c:	4b27      	ldr	r3, [pc, #156]	; (800dbbc <_strtod_l+0x594>)
 800db1e:	460a      	mov	r2, r1
 800db20:	400b      	ands	r3, r1
 800db22:	4927      	ldr	r1, [pc, #156]	; (800dbc0 <_strtod_l+0x598>)
 800db24:	428b      	cmp	r3, r1
 800db26:	4680      	mov	r8, r0
 800db28:	d8be      	bhi.n	800daa8 <_strtod_l+0x480>
 800db2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800db2e:	428b      	cmp	r3, r1
 800db30:	bf86      	itte	hi
 800db32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800dbc4 <_strtod_l+0x59c>
 800db36:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800db3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800db3e:	2300      	movs	r3, #0
 800db40:	9304      	str	r3, [sp, #16]
 800db42:	e07b      	b.n	800dc3c <_strtod_l+0x614>
 800db44:	07ea      	lsls	r2, r5, #31
 800db46:	d505      	bpl.n	800db54 <_strtod_l+0x52c>
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fd5b 	bl	8000608 <__aeabi_dmul>
 800db52:	2301      	movs	r3, #1
 800db54:	9a04      	ldr	r2, [sp, #16]
 800db56:	3208      	adds	r2, #8
 800db58:	f10a 0a01 	add.w	sl, sl, #1
 800db5c:	106d      	asrs	r5, r5, #1
 800db5e:	9204      	str	r2, [sp, #16]
 800db60:	e7cc      	b.n	800dafc <_strtod_l+0x4d4>
 800db62:	d0ec      	beq.n	800db3e <_strtod_l+0x516>
 800db64:	426d      	negs	r5, r5
 800db66:	f015 020f 	ands.w	r2, r5, #15
 800db6a:	d00a      	beq.n	800db82 <_strtod_l+0x55a>
 800db6c:	4b11      	ldr	r3, [pc, #68]	; (800dbb4 <_strtod_l+0x58c>)
 800db6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fe6f 	bl	800085c <__aeabi_ddiv>
 800db7e:	4680      	mov	r8, r0
 800db80:	4689      	mov	r9, r1
 800db82:	112d      	asrs	r5, r5, #4
 800db84:	d0db      	beq.n	800db3e <_strtod_l+0x516>
 800db86:	2d1f      	cmp	r5, #31
 800db88:	dd1e      	ble.n	800dbc8 <_strtod_l+0x5a0>
 800db8a:	2500      	movs	r5, #0
 800db8c:	46ab      	mov	fp, r5
 800db8e:	9509      	str	r5, [sp, #36]	; 0x24
 800db90:	9505      	str	r5, [sp, #20]
 800db92:	2322      	movs	r3, #34	; 0x22
 800db94:	f04f 0800 	mov.w	r8, #0
 800db98:	f04f 0900 	mov.w	r9, #0
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	e78d      	b.n	800dabc <_strtod_l+0x494>
 800dba0:	0800f915 	.word	0x0800f915
 800dba4:	0800fb3c 	.word	0x0800fb3c
 800dba8:	0800f90d 	.word	0x0800f90d
 800dbac:	0800f944 	.word	0x0800f944
 800dbb0:	0800fccd 	.word	0x0800fccd
 800dbb4:	0800fa50 	.word	0x0800fa50
 800dbb8:	0800fa28 	.word	0x0800fa28
 800dbbc:	7ff00000 	.word	0x7ff00000
 800dbc0:	7ca00000 	.word	0x7ca00000
 800dbc4:	7fefffff 	.word	0x7fefffff
 800dbc8:	f015 0310 	ands.w	r3, r5, #16
 800dbcc:	bf18      	it	ne
 800dbce:	236a      	movne	r3, #106	; 0x6a
 800dbd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800df74 <_strtod_l+0x94c>
 800dbd4:	9304      	str	r3, [sp, #16]
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	4649      	mov	r1, r9
 800dbda:	2300      	movs	r3, #0
 800dbdc:	07ea      	lsls	r2, r5, #31
 800dbde:	d504      	bpl.n	800dbea <_strtod_l+0x5c2>
 800dbe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800dbe4:	f7f2 fd10 	bl	8000608 <__aeabi_dmul>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	106d      	asrs	r5, r5, #1
 800dbec:	f10a 0a08 	add.w	sl, sl, #8
 800dbf0:	d1f4      	bne.n	800dbdc <_strtod_l+0x5b4>
 800dbf2:	b10b      	cbz	r3, 800dbf8 <_strtod_l+0x5d0>
 800dbf4:	4680      	mov	r8, r0
 800dbf6:	4689      	mov	r9, r1
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	b1bb      	cbz	r3, 800dc2c <_strtod_l+0x604>
 800dbfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800dc00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	4649      	mov	r1, r9
 800dc08:	dd10      	ble.n	800dc2c <_strtod_l+0x604>
 800dc0a:	2b1f      	cmp	r3, #31
 800dc0c:	f340 811e 	ble.w	800de4c <_strtod_l+0x824>
 800dc10:	2b34      	cmp	r3, #52	; 0x34
 800dc12:	bfde      	ittt	le
 800dc14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800dc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dc1c:	4093      	lslle	r3, r2
 800dc1e:	f04f 0800 	mov.w	r8, #0
 800dc22:	bfcc      	ite	gt
 800dc24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dc28:	ea03 0901 	andle.w	r9, r3, r1
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4640      	mov	r0, r8
 800dc32:	4649      	mov	r1, r9
 800dc34:	f7f2 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1a6      	bne.n	800db8a <_strtod_l+0x562>
 800dc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc42:	4633      	mov	r3, r6
 800dc44:	465a      	mov	r2, fp
 800dc46:	4620      	mov	r0, r4
 800dc48:	f7ff f8cc 	bl	800cde4 <__s2b>
 800dc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f af2a 	beq.w	800daa8 <_strtod_l+0x480>
 800dc54:	9a08      	ldr	r2, [sp, #32]
 800dc56:	9b05      	ldr	r3, [sp, #20]
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	eba3 0307 	sub.w	r3, r3, r7
 800dc5e:	bfa8      	it	ge
 800dc60:	2300      	movge	r3, #0
 800dc62:	930c      	str	r3, [sp, #48]	; 0x30
 800dc64:	2500      	movs	r5, #0
 800dc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800dc6c:	46ab      	mov	fp, r5
 800dc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc70:	4620      	mov	r0, r4
 800dc72:	6859      	ldr	r1, [r3, #4]
 800dc74:	f7ff f80e 	bl	800cc94 <_Balloc>
 800dc78:	9005      	str	r0, [sp, #20]
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f43f af18 	beq.w	800dab0 <_strtod_l+0x488>
 800dc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc82:	691a      	ldr	r2, [r3, #16]
 800dc84:	3202      	adds	r2, #2
 800dc86:	f103 010c 	add.w	r1, r3, #12
 800dc8a:	0092      	lsls	r2, r2, #2
 800dc8c:	300c      	adds	r0, #12
 800dc8e:	f7fe f873 	bl	800bd78 <memcpy>
 800dc92:	ec49 8b10 	vmov	d0, r8, r9
 800dc96:	aa18      	add	r2, sp, #96	; 0x60
 800dc98:	a917      	add	r1, sp, #92	; 0x5c
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7ff fbd6 	bl	800d44c <__d2b>
 800dca0:	ec49 8b18 	vmov	d8, r8, r9
 800dca4:	9016      	str	r0, [sp, #88]	; 0x58
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f43f af02 	beq.w	800dab0 <_strtod_l+0x488>
 800dcac:	2101      	movs	r1, #1
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f7ff f930 	bl	800cf14 <__i2b>
 800dcb4:	4683      	mov	fp, r0
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f43f aefa 	beq.w	800dab0 <_strtod_l+0x488>
 800dcbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dcbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	bfab      	itete	ge
 800dcc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800dcc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800dcc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dcca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800dcce:	bfac      	ite	ge
 800dcd0:	eb06 0a03 	addge.w	sl, r6, r3
 800dcd4:	1b9f      	sublt	r7, r3, r6
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	1af6      	subs	r6, r6, r3
 800dcda:	4416      	add	r6, r2
 800dcdc:	4ba0      	ldr	r3, [pc, #640]	; (800df60 <_strtod_l+0x938>)
 800dcde:	3e01      	subs	r6, #1
 800dce0:	429e      	cmp	r6, r3
 800dce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dce6:	f280 80c4 	bge.w	800de72 <_strtod_l+0x84a>
 800dcea:	1b9b      	subs	r3, r3, r6
 800dcec:	2b1f      	cmp	r3, #31
 800dcee:	eba2 0203 	sub.w	r2, r2, r3
 800dcf2:	f04f 0101 	mov.w	r1, #1
 800dcf6:	f300 80b0 	bgt.w	800de5a <_strtod_l+0x832>
 800dcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800dcfe:	930e      	str	r3, [sp, #56]	; 0x38
 800dd00:	2300      	movs	r3, #0
 800dd02:	930d      	str	r3, [sp, #52]	; 0x34
 800dd04:	eb0a 0602 	add.w	r6, sl, r2
 800dd08:	9b04      	ldr	r3, [sp, #16]
 800dd0a:	45b2      	cmp	sl, r6
 800dd0c:	4417      	add	r7, r2
 800dd0e:	441f      	add	r7, r3
 800dd10:	4653      	mov	r3, sl
 800dd12:	bfa8      	it	ge
 800dd14:	4633      	movge	r3, r6
 800dd16:	42bb      	cmp	r3, r7
 800dd18:	bfa8      	it	ge
 800dd1a:	463b      	movge	r3, r7
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfc2      	ittt	gt
 800dd20:	1af6      	subgt	r6, r6, r3
 800dd22:	1aff      	subgt	r7, r7, r3
 800dd24:	ebaa 0a03 	subgt.w	sl, sl, r3
 800dd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dd17      	ble.n	800dd5e <_strtod_l+0x736>
 800dd2e:	4659      	mov	r1, fp
 800dd30:	461a      	mov	r2, r3
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff f9ae 	bl	800d094 <__pow5mult>
 800dd38:	4683      	mov	fp, r0
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	f43f aeb8 	beq.w	800dab0 <_strtod_l+0x488>
 800dd40:	4601      	mov	r1, r0
 800dd42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd44:	4620      	mov	r0, r4
 800dd46:	f7ff f8fb 	bl	800cf40 <__multiply>
 800dd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f43f aeaf 	beq.w	800dab0 <_strtod_l+0x488>
 800dd52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7fe ffdd 	bl	800cd14 <_Bfree>
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd5c:	9316      	str	r3, [sp, #88]	; 0x58
 800dd5e:	2e00      	cmp	r6, #0
 800dd60:	f300 808c 	bgt.w	800de7c <_strtod_l+0x854>
 800dd64:	9b08      	ldr	r3, [sp, #32]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dd08      	ble.n	800dd7c <_strtod_l+0x754>
 800dd6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd6c:	9905      	ldr	r1, [sp, #20]
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7ff f990 	bl	800d094 <__pow5mult>
 800dd74:	9005      	str	r0, [sp, #20]
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f43f ae9a 	beq.w	800dab0 <_strtod_l+0x488>
 800dd7c:	2f00      	cmp	r7, #0
 800dd7e:	dd08      	ble.n	800dd92 <_strtod_l+0x76a>
 800dd80:	9905      	ldr	r1, [sp, #20]
 800dd82:	463a      	mov	r2, r7
 800dd84:	4620      	mov	r0, r4
 800dd86:	f7ff f9df 	bl	800d148 <__lshift>
 800dd8a:	9005      	str	r0, [sp, #20]
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	f43f ae8f 	beq.w	800dab0 <_strtod_l+0x488>
 800dd92:	f1ba 0f00 	cmp.w	sl, #0
 800dd96:	dd08      	ble.n	800ddaa <_strtod_l+0x782>
 800dd98:	4659      	mov	r1, fp
 800dd9a:	4652      	mov	r2, sl
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f7ff f9d3 	bl	800d148 <__lshift>
 800dda2:	4683      	mov	fp, r0
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f43f ae83 	beq.w	800dab0 <_strtod_l+0x488>
 800ddaa:	9a05      	ldr	r2, [sp, #20]
 800ddac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f7ff fa52 	bl	800d258 <__mdiff>
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f43f ae7a 	beq.w	800dab0 <_strtod_l+0x488>
 800ddbc:	68c3      	ldr	r3, [r0, #12]
 800ddbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	60c3      	str	r3, [r0, #12]
 800ddc4:	4659      	mov	r1, fp
 800ddc6:	f7ff fa2b 	bl	800d220 <__mcmp>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	da60      	bge.n	800de90 <_strtod_l+0x868>
 800ddce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddd0:	ea53 0308 	orrs.w	r3, r3, r8
 800ddd4:	f040 8084 	bne.w	800dee0 <_strtod_l+0x8b8>
 800ddd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d17f      	bne.n	800dee0 <_strtod_l+0x8b8>
 800dde0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dde4:	0d1b      	lsrs	r3, r3, #20
 800dde6:	051b      	lsls	r3, r3, #20
 800dde8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ddec:	d978      	bls.n	800dee0 <_strtod_l+0x8b8>
 800ddee:	696b      	ldr	r3, [r5, #20]
 800ddf0:	b913      	cbnz	r3, 800ddf8 <_strtod_l+0x7d0>
 800ddf2:	692b      	ldr	r3, [r5, #16]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	dd73      	ble.n	800dee0 <_strtod_l+0x8b8>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7ff f9a3 	bl	800d148 <__lshift>
 800de02:	4659      	mov	r1, fp
 800de04:	4605      	mov	r5, r0
 800de06:	f7ff fa0b 	bl	800d220 <__mcmp>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	dd68      	ble.n	800dee0 <_strtod_l+0x8b8>
 800de0e:	9904      	ldr	r1, [sp, #16]
 800de10:	4a54      	ldr	r2, [pc, #336]	; (800df64 <_strtod_l+0x93c>)
 800de12:	464b      	mov	r3, r9
 800de14:	2900      	cmp	r1, #0
 800de16:	f000 8084 	beq.w	800df22 <_strtod_l+0x8fa>
 800de1a:	ea02 0109 	and.w	r1, r2, r9
 800de1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800de22:	dc7e      	bgt.n	800df22 <_strtod_l+0x8fa>
 800de24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800de28:	f77f aeb3 	ble.w	800db92 <_strtod_l+0x56a>
 800de2c:	4b4e      	ldr	r3, [pc, #312]	; (800df68 <_strtod_l+0x940>)
 800de2e:	4640      	mov	r0, r8
 800de30:	4649      	mov	r1, r9
 800de32:	2200      	movs	r2, #0
 800de34:	f7f2 fbe8 	bl	8000608 <__aeabi_dmul>
 800de38:	4b4a      	ldr	r3, [pc, #296]	; (800df64 <_strtod_l+0x93c>)
 800de3a:	400b      	ands	r3, r1
 800de3c:	4680      	mov	r8, r0
 800de3e:	4689      	mov	r9, r1
 800de40:	2b00      	cmp	r3, #0
 800de42:	f47f ae3f 	bne.w	800dac4 <_strtod_l+0x49c>
 800de46:	2322      	movs	r3, #34	; 0x22
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	e63b      	b.n	800dac4 <_strtod_l+0x49c>
 800de4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de50:	fa02 f303 	lsl.w	r3, r2, r3
 800de54:	ea03 0808 	and.w	r8, r3, r8
 800de58:	e6e8      	b.n	800dc2c <_strtod_l+0x604>
 800de5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800de5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800de62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800de66:	36e2      	adds	r6, #226	; 0xe2
 800de68:	fa01 f306 	lsl.w	r3, r1, r6
 800de6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800de70:	e748      	b.n	800dd04 <_strtod_l+0x6dc>
 800de72:	2100      	movs	r1, #0
 800de74:	2301      	movs	r3, #1
 800de76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800de7a:	e743      	b.n	800dd04 <_strtod_l+0x6dc>
 800de7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800de7e:	4632      	mov	r2, r6
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff f961 	bl	800d148 <__lshift>
 800de86:	9016      	str	r0, [sp, #88]	; 0x58
 800de88:	2800      	cmp	r0, #0
 800de8a:	f47f af6b 	bne.w	800dd64 <_strtod_l+0x73c>
 800de8e:	e60f      	b.n	800dab0 <_strtod_l+0x488>
 800de90:	46ca      	mov	sl, r9
 800de92:	d171      	bne.n	800df78 <_strtod_l+0x950>
 800de94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de9a:	b352      	cbz	r2, 800def2 <_strtod_l+0x8ca>
 800de9c:	4a33      	ldr	r2, [pc, #204]	; (800df6c <_strtod_l+0x944>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d12a      	bne.n	800def8 <_strtod_l+0x8d0>
 800dea2:	9b04      	ldr	r3, [sp, #16]
 800dea4:	4641      	mov	r1, r8
 800dea6:	b1fb      	cbz	r3, 800dee8 <_strtod_l+0x8c0>
 800dea8:	4b2e      	ldr	r3, [pc, #184]	; (800df64 <_strtod_l+0x93c>)
 800deaa:	ea09 0303 	and.w	r3, r9, r3
 800deae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800deb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deb6:	d81a      	bhi.n	800deee <_strtod_l+0x8c6>
 800deb8:	0d1b      	lsrs	r3, r3, #20
 800deba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800debe:	fa02 f303 	lsl.w	r3, r2, r3
 800dec2:	4299      	cmp	r1, r3
 800dec4:	d118      	bne.n	800def8 <_strtod_l+0x8d0>
 800dec6:	4b2a      	ldr	r3, [pc, #168]	; (800df70 <_strtod_l+0x948>)
 800dec8:	459a      	cmp	sl, r3
 800deca:	d102      	bne.n	800ded2 <_strtod_l+0x8aa>
 800decc:	3101      	adds	r1, #1
 800dece:	f43f adef 	beq.w	800dab0 <_strtod_l+0x488>
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <_strtod_l+0x93c>)
 800ded4:	ea0a 0303 	and.w	r3, sl, r3
 800ded8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800dedc:	f04f 0800 	mov.w	r8, #0
 800dee0:	9b04      	ldr	r3, [sp, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1a2      	bne.n	800de2c <_strtod_l+0x804>
 800dee6:	e5ed      	b.n	800dac4 <_strtod_l+0x49c>
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800deec:	e7e9      	b.n	800dec2 <_strtod_l+0x89a>
 800deee:	4613      	mov	r3, r2
 800def0:	e7e7      	b.n	800dec2 <_strtod_l+0x89a>
 800def2:	ea53 0308 	orrs.w	r3, r3, r8
 800def6:	d08a      	beq.n	800de0e <_strtod_l+0x7e6>
 800def8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800defa:	b1e3      	cbz	r3, 800df36 <_strtod_l+0x90e>
 800defc:	ea13 0f0a 	tst.w	r3, sl
 800df00:	d0ee      	beq.n	800dee0 <_strtod_l+0x8b8>
 800df02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df04:	9a04      	ldr	r2, [sp, #16]
 800df06:	4640      	mov	r0, r8
 800df08:	4649      	mov	r1, r9
 800df0a:	b1c3      	cbz	r3, 800df3e <_strtod_l+0x916>
 800df0c:	f7ff fb6f 	bl	800d5ee <sulp>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	ec51 0b18 	vmov	r0, r1, d8
 800df18:	f7f2 f9c0 	bl	800029c <__adddf3>
 800df1c:	4680      	mov	r8, r0
 800df1e:	4689      	mov	r9, r1
 800df20:	e7de      	b.n	800dee0 <_strtod_l+0x8b8>
 800df22:	4013      	ands	r3, r2
 800df24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800df2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800df30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800df34:	e7d4      	b.n	800dee0 <_strtod_l+0x8b8>
 800df36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df38:	ea13 0f08 	tst.w	r3, r8
 800df3c:	e7e0      	b.n	800df00 <_strtod_l+0x8d8>
 800df3e:	f7ff fb56 	bl	800d5ee <sulp>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	ec51 0b18 	vmov	r0, r1, d8
 800df4a:	f7f2 f9a5 	bl	8000298 <__aeabi_dsub>
 800df4e:	2200      	movs	r2, #0
 800df50:	2300      	movs	r3, #0
 800df52:	4680      	mov	r8, r0
 800df54:	4689      	mov	r9, r1
 800df56:	f7f2 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d0c0      	beq.n	800dee0 <_strtod_l+0x8b8>
 800df5e:	e618      	b.n	800db92 <_strtod_l+0x56a>
 800df60:	fffffc02 	.word	0xfffffc02
 800df64:	7ff00000 	.word	0x7ff00000
 800df68:	39500000 	.word	0x39500000
 800df6c:	000fffff 	.word	0x000fffff
 800df70:	7fefffff 	.word	0x7fefffff
 800df74:	0800fb50 	.word	0x0800fb50
 800df78:	4659      	mov	r1, fp
 800df7a:	4628      	mov	r0, r5
 800df7c:	f7ff fac0 	bl	800d500 <__ratio>
 800df80:	ec57 6b10 	vmov	r6, r7, d0
 800df84:	ee10 0a10 	vmov	r0, s0
 800df88:	2200      	movs	r2, #0
 800df8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 fdb6 	bl	8000b00 <__aeabi_dcmple>
 800df94:	2800      	cmp	r0, #0
 800df96:	d071      	beq.n	800e07c <_strtod_l+0xa54>
 800df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d17c      	bne.n	800e098 <_strtod_l+0xa70>
 800df9e:	f1b8 0f00 	cmp.w	r8, #0
 800dfa2:	d15a      	bne.n	800e05a <_strtod_l+0xa32>
 800dfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d15d      	bne.n	800e068 <_strtod_l+0xa40>
 800dfac:	4b90      	ldr	r3, [pc, #576]	; (800e1f0 <_strtod_l+0xbc8>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	f7f2 fd9a 	bl	8000aec <__aeabi_dcmplt>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d15c      	bne.n	800e076 <_strtod_l+0xa4e>
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	4b8c      	ldr	r3, [pc, #560]	; (800e1f4 <_strtod_l+0xbcc>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f7f2 fb20 	bl	8000608 <__aeabi_dmul>
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dfd0:	9606      	str	r6, [sp, #24]
 800dfd2:	9307      	str	r3, [sp, #28]
 800dfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dfd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800dfdc:	4b86      	ldr	r3, [pc, #536]	; (800e1f8 <_strtod_l+0xbd0>)
 800dfde:	ea0a 0303 	and.w	r3, sl, r3
 800dfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800dfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfe6:	4b85      	ldr	r3, [pc, #532]	; (800e1fc <_strtod_l+0xbd4>)
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	f040 8090 	bne.w	800e10e <_strtod_l+0xae6>
 800dfee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800dff2:	ec49 8b10 	vmov	d0, r8, r9
 800dff6:	f7ff f9b9 	bl	800d36c <__ulp>
 800dffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dffe:	ec51 0b10 	vmov	r0, r1, d0
 800e002:	f7f2 fb01 	bl	8000608 <__aeabi_dmul>
 800e006:	4642      	mov	r2, r8
 800e008:	464b      	mov	r3, r9
 800e00a:	f7f2 f947 	bl	800029c <__adddf3>
 800e00e:	460b      	mov	r3, r1
 800e010:	4979      	ldr	r1, [pc, #484]	; (800e1f8 <_strtod_l+0xbd0>)
 800e012:	4a7b      	ldr	r2, [pc, #492]	; (800e200 <_strtod_l+0xbd8>)
 800e014:	4019      	ands	r1, r3
 800e016:	4291      	cmp	r1, r2
 800e018:	4680      	mov	r8, r0
 800e01a:	d944      	bls.n	800e0a6 <_strtod_l+0xa7e>
 800e01c:	ee18 2a90 	vmov	r2, s17
 800e020:	4b78      	ldr	r3, [pc, #480]	; (800e204 <_strtod_l+0xbdc>)
 800e022:	429a      	cmp	r2, r3
 800e024:	d104      	bne.n	800e030 <_strtod_l+0xa08>
 800e026:	ee18 3a10 	vmov	r3, s16
 800e02a:	3301      	adds	r3, #1
 800e02c:	f43f ad40 	beq.w	800dab0 <_strtod_l+0x488>
 800e030:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e204 <_strtod_l+0xbdc>
 800e034:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e03a:	4620      	mov	r0, r4
 800e03c:	f7fe fe6a 	bl	800cd14 <_Bfree>
 800e040:	9905      	ldr	r1, [sp, #20]
 800e042:	4620      	mov	r0, r4
 800e044:	f7fe fe66 	bl	800cd14 <_Bfree>
 800e048:	4659      	mov	r1, fp
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7fe fe62 	bl	800cd14 <_Bfree>
 800e050:	4629      	mov	r1, r5
 800e052:	4620      	mov	r0, r4
 800e054:	f7fe fe5e 	bl	800cd14 <_Bfree>
 800e058:	e609      	b.n	800dc6e <_strtod_l+0x646>
 800e05a:	f1b8 0f01 	cmp.w	r8, #1
 800e05e:	d103      	bne.n	800e068 <_strtod_l+0xa40>
 800e060:	f1b9 0f00 	cmp.w	r9, #0
 800e064:	f43f ad95 	beq.w	800db92 <_strtod_l+0x56a>
 800e068:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e1c0 <_strtod_l+0xb98>
 800e06c:	4f60      	ldr	r7, [pc, #384]	; (800e1f0 <_strtod_l+0xbc8>)
 800e06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e072:	2600      	movs	r6, #0
 800e074:	e7ae      	b.n	800dfd4 <_strtod_l+0x9ac>
 800e076:	4f5f      	ldr	r7, [pc, #380]	; (800e1f4 <_strtod_l+0xbcc>)
 800e078:	2600      	movs	r6, #0
 800e07a:	e7a7      	b.n	800dfcc <_strtod_l+0x9a4>
 800e07c:	4b5d      	ldr	r3, [pc, #372]	; (800e1f4 <_strtod_l+0xbcc>)
 800e07e:	4630      	mov	r0, r6
 800e080:	4639      	mov	r1, r7
 800e082:	2200      	movs	r2, #0
 800e084:	f7f2 fac0 	bl	8000608 <__aeabi_dmul>
 800e088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d09c      	beq.n	800dfcc <_strtod_l+0x9a4>
 800e092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e096:	e79d      	b.n	800dfd4 <_strtod_l+0x9ac>
 800e098:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e1c8 <_strtod_l+0xba0>
 800e09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0a0:	ec57 6b17 	vmov	r6, r7, d7
 800e0a4:	e796      	b.n	800dfd4 <_strtod_l+0x9ac>
 800e0a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e0aa:	9b04      	ldr	r3, [sp, #16]
 800e0ac:	46ca      	mov	sl, r9
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1c2      	bne.n	800e038 <_strtod_l+0xa10>
 800e0b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0b8:	0d1b      	lsrs	r3, r3, #20
 800e0ba:	051b      	lsls	r3, r3, #20
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d1bb      	bne.n	800e038 <_strtod_l+0xa10>
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 fe00 	bl	8000cc8 <__aeabi_d2lz>
 800e0c8:	f7f2 fa70 	bl	80005ac <__aeabi_l2d>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	4639      	mov	r1, r7
 800e0d4:	f7f2 f8e0 	bl	8000298 <__aeabi_dsub>
 800e0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0de:	ea43 0308 	orr.w	r3, r3, r8
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	460f      	mov	r7, r1
 800e0e8:	d054      	beq.n	800e194 <_strtod_l+0xb6c>
 800e0ea:	a339      	add	r3, pc, #228	; (adr r3, 800e1d0 <_strtod_l+0xba8>)
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f7f2 fcfc 	bl	8000aec <__aeabi_dcmplt>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f47f ace5 	bne.w	800dac4 <_strtod_l+0x49c>
 800e0fa:	a337      	add	r3, pc, #220	; (adr r3, 800e1d8 <_strtod_l+0xbb0>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	4630      	mov	r0, r6
 800e102:	4639      	mov	r1, r7
 800e104:	f7f2 fd10 	bl	8000b28 <__aeabi_dcmpgt>
 800e108:	2800      	cmp	r0, #0
 800e10a:	d095      	beq.n	800e038 <_strtod_l+0xa10>
 800e10c:	e4da      	b.n	800dac4 <_strtod_l+0x49c>
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	b333      	cbz	r3, 800e160 <_strtod_l+0xb38>
 800e112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e118:	d822      	bhi.n	800e160 <_strtod_l+0xb38>
 800e11a:	a331      	add	r3, pc, #196	; (adr r3, 800e1e0 <_strtod_l+0xbb8>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	4630      	mov	r0, r6
 800e122:	4639      	mov	r1, r7
 800e124:	f7f2 fcec 	bl	8000b00 <__aeabi_dcmple>
 800e128:	b1a0      	cbz	r0, 800e154 <_strtod_l+0xb2c>
 800e12a:	4639      	mov	r1, r7
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7f2 fd43 	bl	8000bb8 <__aeabi_d2uiz>
 800e132:	2801      	cmp	r0, #1
 800e134:	bf38      	it	cc
 800e136:	2001      	movcc	r0, #1
 800e138:	f7f2 f9ec 	bl	8000514 <__aeabi_ui2d>
 800e13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
 800e142:	bb23      	cbnz	r3, 800e18e <_strtod_l+0xb66>
 800e144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e148:	9010      	str	r0, [sp, #64]	; 0x40
 800e14a:	9311      	str	r3, [sp, #68]	; 0x44
 800e14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e15c:	1a9b      	subs	r3, r3, r2
 800e15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e164:	eeb0 0a48 	vmov.f32	s0, s16
 800e168:	eef0 0a68 	vmov.f32	s1, s17
 800e16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e170:	f7ff f8fc 	bl	800d36c <__ulp>
 800e174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e178:	ec53 2b10 	vmov	r2, r3, d0
 800e17c:	f7f2 fa44 	bl	8000608 <__aeabi_dmul>
 800e180:	ec53 2b18 	vmov	r2, r3, d8
 800e184:	f7f2 f88a 	bl	800029c <__adddf3>
 800e188:	4680      	mov	r8, r0
 800e18a:	4689      	mov	r9, r1
 800e18c:	e78d      	b.n	800e0aa <_strtod_l+0xa82>
 800e18e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e192:	e7db      	b.n	800e14c <_strtod_l+0xb24>
 800e194:	a314      	add	r3, pc, #80	; (adr r3, 800e1e8 <_strtod_l+0xbc0>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	f7f2 fca7 	bl	8000aec <__aeabi_dcmplt>
 800e19e:	e7b3      	b.n	800e108 <_strtod_l+0xae0>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	f7ff ba7c 	b.w	800d6a6 <_strtod_l+0x7e>
 800e1ae:	2a65      	cmp	r2, #101	; 0x65
 800e1b0:	f43f ab75 	beq.w	800d89e <_strtod_l+0x276>
 800e1b4:	2a45      	cmp	r2, #69	; 0x45
 800e1b6:	f43f ab72 	beq.w	800d89e <_strtod_l+0x276>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	f7ff bbaa 	b.w	800d914 <_strtod_l+0x2ec>
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	bff00000 	.word	0xbff00000
 800e1c8:	00000000 	.word	0x00000000
 800e1cc:	3ff00000 	.word	0x3ff00000
 800e1d0:	94a03595 	.word	0x94a03595
 800e1d4:	3fdfffff 	.word	0x3fdfffff
 800e1d8:	35afe535 	.word	0x35afe535
 800e1dc:	3fe00000 	.word	0x3fe00000
 800e1e0:	ffc00000 	.word	0xffc00000
 800e1e4:	41dfffff 	.word	0x41dfffff
 800e1e8:	94a03595 	.word	0x94a03595
 800e1ec:	3fcfffff 	.word	0x3fcfffff
 800e1f0:	3ff00000 	.word	0x3ff00000
 800e1f4:	3fe00000 	.word	0x3fe00000
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	7fe00000 	.word	0x7fe00000
 800e200:	7c9fffff 	.word	0x7c9fffff
 800e204:	7fefffff 	.word	0x7fefffff

0800e208 <_strtod_r>:
 800e208:	4b01      	ldr	r3, [pc, #4]	; (800e210 <_strtod_r+0x8>)
 800e20a:	f7ff ba0d 	b.w	800d628 <_strtod_l>
 800e20e:	bf00      	nop
 800e210:	2000006c 	.word	0x2000006c

0800e214 <_strtol_l.constprop.0>:
 800e214:	2b01      	cmp	r3, #1
 800e216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21a:	d001      	beq.n	800e220 <_strtol_l.constprop.0+0xc>
 800e21c:	2b24      	cmp	r3, #36	; 0x24
 800e21e:	d906      	bls.n	800e22e <_strtol_l.constprop.0+0x1a>
 800e220:	f7fd fd7e 	bl	800bd20 <__errno>
 800e224:	2316      	movs	r3, #22
 800e226:	6003      	str	r3, [r0, #0]
 800e228:	2000      	movs	r0, #0
 800e22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e314 <_strtol_l.constprop.0+0x100>
 800e232:	460d      	mov	r5, r1
 800e234:	462e      	mov	r6, r5
 800e236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e23a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e23e:	f017 0708 	ands.w	r7, r7, #8
 800e242:	d1f7      	bne.n	800e234 <_strtol_l.constprop.0+0x20>
 800e244:	2c2d      	cmp	r4, #45	; 0x2d
 800e246:	d132      	bne.n	800e2ae <_strtol_l.constprop.0+0x9a>
 800e248:	782c      	ldrb	r4, [r5, #0]
 800e24a:	2701      	movs	r7, #1
 800e24c:	1cb5      	adds	r5, r6, #2
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d05b      	beq.n	800e30a <_strtol_l.constprop.0+0xf6>
 800e252:	2b10      	cmp	r3, #16
 800e254:	d109      	bne.n	800e26a <_strtol_l.constprop.0+0x56>
 800e256:	2c30      	cmp	r4, #48	; 0x30
 800e258:	d107      	bne.n	800e26a <_strtol_l.constprop.0+0x56>
 800e25a:	782c      	ldrb	r4, [r5, #0]
 800e25c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e260:	2c58      	cmp	r4, #88	; 0x58
 800e262:	d14d      	bne.n	800e300 <_strtol_l.constprop.0+0xec>
 800e264:	786c      	ldrb	r4, [r5, #1]
 800e266:	2310      	movs	r3, #16
 800e268:	3502      	adds	r5, #2
 800e26a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e26e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e272:	f04f 0e00 	mov.w	lr, #0
 800e276:	fbb8 f9f3 	udiv	r9, r8, r3
 800e27a:	4676      	mov	r6, lr
 800e27c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e284:	f1bc 0f09 	cmp.w	ip, #9
 800e288:	d816      	bhi.n	800e2b8 <_strtol_l.constprop.0+0xa4>
 800e28a:	4664      	mov	r4, ip
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	dd24      	ble.n	800e2da <_strtol_l.constprop.0+0xc6>
 800e290:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e294:	d008      	beq.n	800e2a8 <_strtol_l.constprop.0+0x94>
 800e296:	45b1      	cmp	r9, r6
 800e298:	d31c      	bcc.n	800e2d4 <_strtol_l.constprop.0+0xc0>
 800e29a:	d101      	bne.n	800e2a0 <_strtol_l.constprop.0+0x8c>
 800e29c:	45a2      	cmp	sl, r4
 800e29e:	db19      	blt.n	800e2d4 <_strtol_l.constprop.0+0xc0>
 800e2a0:	fb06 4603 	mla	r6, r6, r3, r4
 800e2a4:	f04f 0e01 	mov.w	lr, #1
 800e2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ac:	e7e8      	b.n	800e280 <_strtol_l.constprop.0+0x6c>
 800e2ae:	2c2b      	cmp	r4, #43	; 0x2b
 800e2b0:	bf04      	itt	eq
 800e2b2:	782c      	ldrbeq	r4, [r5, #0]
 800e2b4:	1cb5      	addeq	r5, r6, #2
 800e2b6:	e7ca      	b.n	800e24e <_strtol_l.constprop.0+0x3a>
 800e2b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e2bc:	f1bc 0f19 	cmp.w	ip, #25
 800e2c0:	d801      	bhi.n	800e2c6 <_strtol_l.constprop.0+0xb2>
 800e2c2:	3c37      	subs	r4, #55	; 0x37
 800e2c4:	e7e2      	b.n	800e28c <_strtol_l.constprop.0+0x78>
 800e2c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e2ca:	f1bc 0f19 	cmp.w	ip, #25
 800e2ce:	d804      	bhi.n	800e2da <_strtol_l.constprop.0+0xc6>
 800e2d0:	3c57      	subs	r4, #87	; 0x57
 800e2d2:	e7db      	b.n	800e28c <_strtol_l.constprop.0+0x78>
 800e2d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e2d8:	e7e6      	b.n	800e2a8 <_strtol_l.constprop.0+0x94>
 800e2da:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e2de:	d105      	bne.n	800e2ec <_strtol_l.constprop.0+0xd8>
 800e2e0:	2322      	movs	r3, #34	; 0x22
 800e2e2:	6003      	str	r3, [r0, #0]
 800e2e4:	4646      	mov	r6, r8
 800e2e6:	b942      	cbnz	r2, 800e2fa <_strtol_l.constprop.0+0xe6>
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	e79e      	b.n	800e22a <_strtol_l.constprop.0+0x16>
 800e2ec:	b107      	cbz	r7, 800e2f0 <_strtol_l.constprop.0+0xdc>
 800e2ee:	4276      	negs	r6, r6
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	d0f9      	beq.n	800e2e8 <_strtol_l.constprop.0+0xd4>
 800e2f4:	f1be 0f00 	cmp.w	lr, #0
 800e2f8:	d000      	beq.n	800e2fc <_strtol_l.constprop.0+0xe8>
 800e2fa:	1e69      	subs	r1, r5, #1
 800e2fc:	6011      	str	r1, [r2, #0]
 800e2fe:	e7f3      	b.n	800e2e8 <_strtol_l.constprop.0+0xd4>
 800e300:	2430      	movs	r4, #48	; 0x30
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1b1      	bne.n	800e26a <_strtol_l.constprop.0+0x56>
 800e306:	2308      	movs	r3, #8
 800e308:	e7af      	b.n	800e26a <_strtol_l.constprop.0+0x56>
 800e30a:	2c30      	cmp	r4, #48	; 0x30
 800e30c:	d0a5      	beq.n	800e25a <_strtol_l.constprop.0+0x46>
 800e30e:	230a      	movs	r3, #10
 800e310:	e7ab      	b.n	800e26a <_strtol_l.constprop.0+0x56>
 800e312:	bf00      	nop
 800e314:	0800fb79 	.word	0x0800fb79

0800e318 <_strtol_r>:
 800e318:	f7ff bf7c 	b.w	800e214 <_strtol_l.constprop.0>

0800e31c <__ssputs_r>:
 800e31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e320:	688e      	ldr	r6, [r1, #8]
 800e322:	461f      	mov	r7, r3
 800e324:	42be      	cmp	r6, r7
 800e326:	680b      	ldr	r3, [r1, #0]
 800e328:	4682      	mov	sl, r0
 800e32a:	460c      	mov	r4, r1
 800e32c:	4690      	mov	r8, r2
 800e32e:	d82c      	bhi.n	800e38a <__ssputs_r+0x6e>
 800e330:	898a      	ldrh	r2, [r1, #12]
 800e332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e336:	d026      	beq.n	800e386 <__ssputs_r+0x6a>
 800e338:	6965      	ldr	r5, [r4, #20]
 800e33a:	6909      	ldr	r1, [r1, #16]
 800e33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e340:	eba3 0901 	sub.w	r9, r3, r1
 800e344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e348:	1c7b      	adds	r3, r7, #1
 800e34a:	444b      	add	r3, r9
 800e34c:	106d      	asrs	r5, r5, #1
 800e34e:	429d      	cmp	r5, r3
 800e350:	bf38      	it	cc
 800e352:	461d      	movcc	r5, r3
 800e354:	0553      	lsls	r3, r2, #21
 800e356:	d527      	bpl.n	800e3a8 <__ssputs_r+0x8c>
 800e358:	4629      	mov	r1, r5
 800e35a:	f7fe fc0f 	bl	800cb7c <_malloc_r>
 800e35e:	4606      	mov	r6, r0
 800e360:	b360      	cbz	r0, 800e3bc <__ssputs_r+0xa0>
 800e362:	6921      	ldr	r1, [r4, #16]
 800e364:	464a      	mov	r2, r9
 800e366:	f7fd fd07 	bl	800bd78 <memcpy>
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e374:	81a3      	strh	r3, [r4, #12]
 800e376:	6126      	str	r6, [r4, #16]
 800e378:	6165      	str	r5, [r4, #20]
 800e37a:	444e      	add	r6, r9
 800e37c:	eba5 0509 	sub.w	r5, r5, r9
 800e380:	6026      	str	r6, [r4, #0]
 800e382:	60a5      	str	r5, [r4, #8]
 800e384:	463e      	mov	r6, r7
 800e386:	42be      	cmp	r6, r7
 800e388:	d900      	bls.n	800e38c <__ssputs_r+0x70>
 800e38a:	463e      	mov	r6, r7
 800e38c:	6820      	ldr	r0, [r4, #0]
 800e38e:	4632      	mov	r2, r6
 800e390:	4641      	mov	r1, r8
 800e392:	f000 f9c9 	bl	800e728 <memmove>
 800e396:	68a3      	ldr	r3, [r4, #8]
 800e398:	1b9b      	subs	r3, r3, r6
 800e39a:	60a3      	str	r3, [r4, #8]
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	4433      	add	r3, r6
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a8:	462a      	mov	r2, r5
 800e3aa:	f000 fd9e 	bl	800eeea <_realloc_r>
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1e0      	bne.n	800e376 <__ssputs_r+0x5a>
 800e3b4:	6921      	ldr	r1, [r4, #16]
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	f7fe fb6c 	bl	800ca94 <_free_r>
 800e3bc:	230c      	movs	r3, #12
 800e3be:	f8ca 3000 	str.w	r3, [sl]
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c8:	81a3      	strh	r3, [r4, #12]
 800e3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3ce:	e7e9      	b.n	800e3a4 <__ssputs_r+0x88>

0800e3d0 <_svfiprintf_r>:
 800e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d4:	4698      	mov	r8, r3
 800e3d6:	898b      	ldrh	r3, [r1, #12]
 800e3d8:	061b      	lsls	r3, r3, #24
 800e3da:	b09d      	sub	sp, #116	; 0x74
 800e3dc:	4607      	mov	r7, r0
 800e3de:	460d      	mov	r5, r1
 800e3e0:	4614      	mov	r4, r2
 800e3e2:	d50e      	bpl.n	800e402 <_svfiprintf_r+0x32>
 800e3e4:	690b      	ldr	r3, [r1, #16]
 800e3e6:	b963      	cbnz	r3, 800e402 <_svfiprintf_r+0x32>
 800e3e8:	2140      	movs	r1, #64	; 0x40
 800e3ea:	f7fe fbc7 	bl	800cb7c <_malloc_r>
 800e3ee:	6028      	str	r0, [r5, #0]
 800e3f0:	6128      	str	r0, [r5, #16]
 800e3f2:	b920      	cbnz	r0, 800e3fe <_svfiprintf_r+0x2e>
 800e3f4:	230c      	movs	r3, #12
 800e3f6:	603b      	str	r3, [r7, #0]
 800e3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3fc:	e0d0      	b.n	800e5a0 <_svfiprintf_r+0x1d0>
 800e3fe:	2340      	movs	r3, #64	; 0x40
 800e400:	616b      	str	r3, [r5, #20]
 800e402:	2300      	movs	r3, #0
 800e404:	9309      	str	r3, [sp, #36]	; 0x24
 800e406:	2320      	movs	r3, #32
 800e408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e410:	2330      	movs	r3, #48	; 0x30
 800e412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5b8 <_svfiprintf_r+0x1e8>
 800e416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e41a:	f04f 0901 	mov.w	r9, #1
 800e41e:	4623      	mov	r3, r4
 800e420:	469a      	mov	sl, r3
 800e422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e426:	b10a      	cbz	r2, 800e42c <_svfiprintf_r+0x5c>
 800e428:	2a25      	cmp	r2, #37	; 0x25
 800e42a:	d1f9      	bne.n	800e420 <_svfiprintf_r+0x50>
 800e42c:	ebba 0b04 	subs.w	fp, sl, r4
 800e430:	d00b      	beq.n	800e44a <_svfiprintf_r+0x7a>
 800e432:	465b      	mov	r3, fp
 800e434:	4622      	mov	r2, r4
 800e436:	4629      	mov	r1, r5
 800e438:	4638      	mov	r0, r7
 800e43a:	f7ff ff6f 	bl	800e31c <__ssputs_r>
 800e43e:	3001      	adds	r0, #1
 800e440:	f000 80a9 	beq.w	800e596 <_svfiprintf_r+0x1c6>
 800e444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e446:	445a      	add	r2, fp
 800e448:	9209      	str	r2, [sp, #36]	; 0x24
 800e44a:	f89a 3000 	ldrb.w	r3, [sl]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 80a1 	beq.w	800e596 <_svfiprintf_r+0x1c6>
 800e454:	2300      	movs	r3, #0
 800e456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e45e:	f10a 0a01 	add.w	sl, sl, #1
 800e462:	9304      	str	r3, [sp, #16]
 800e464:	9307      	str	r3, [sp, #28]
 800e466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e46a:	931a      	str	r3, [sp, #104]	; 0x68
 800e46c:	4654      	mov	r4, sl
 800e46e:	2205      	movs	r2, #5
 800e470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e474:	4850      	ldr	r0, [pc, #320]	; (800e5b8 <_svfiprintf_r+0x1e8>)
 800e476:	f7f1 feb3 	bl	80001e0 <memchr>
 800e47a:	9a04      	ldr	r2, [sp, #16]
 800e47c:	b9d8      	cbnz	r0, 800e4b6 <_svfiprintf_r+0xe6>
 800e47e:	06d0      	lsls	r0, r2, #27
 800e480:	bf44      	itt	mi
 800e482:	2320      	movmi	r3, #32
 800e484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e488:	0711      	lsls	r1, r2, #28
 800e48a:	bf44      	itt	mi
 800e48c:	232b      	movmi	r3, #43	; 0x2b
 800e48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e492:	f89a 3000 	ldrb.w	r3, [sl]
 800e496:	2b2a      	cmp	r3, #42	; 0x2a
 800e498:	d015      	beq.n	800e4c6 <_svfiprintf_r+0xf6>
 800e49a:	9a07      	ldr	r2, [sp, #28]
 800e49c:	4654      	mov	r4, sl
 800e49e:	2000      	movs	r0, #0
 800e4a0:	f04f 0c0a 	mov.w	ip, #10
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4aa:	3b30      	subs	r3, #48	; 0x30
 800e4ac:	2b09      	cmp	r3, #9
 800e4ae:	d94d      	bls.n	800e54c <_svfiprintf_r+0x17c>
 800e4b0:	b1b0      	cbz	r0, 800e4e0 <_svfiprintf_r+0x110>
 800e4b2:	9207      	str	r2, [sp, #28]
 800e4b4:	e014      	b.n	800e4e0 <_svfiprintf_r+0x110>
 800e4b6:	eba0 0308 	sub.w	r3, r0, r8
 800e4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	9304      	str	r3, [sp, #16]
 800e4c2:	46a2      	mov	sl, r4
 800e4c4:	e7d2      	b.n	800e46c <_svfiprintf_r+0x9c>
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	1d19      	adds	r1, r3, #4
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	9103      	str	r1, [sp, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfbb      	ittet	lt
 800e4d2:	425b      	neglt	r3, r3
 800e4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e4d8:	9307      	strge	r3, [sp, #28]
 800e4da:	9307      	strlt	r3, [sp, #28]
 800e4dc:	bfb8      	it	lt
 800e4de:	9204      	strlt	r2, [sp, #16]
 800e4e0:	7823      	ldrb	r3, [r4, #0]
 800e4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e4e4:	d10c      	bne.n	800e500 <_svfiprintf_r+0x130>
 800e4e6:	7863      	ldrb	r3, [r4, #1]
 800e4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ea:	d134      	bne.n	800e556 <_svfiprintf_r+0x186>
 800e4ec:	9b03      	ldr	r3, [sp, #12]
 800e4ee:	1d1a      	adds	r2, r3, #4
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	9203      	str	r2, [sp, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bfb8      	it	lt
 800e4f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e4fc:	3402      	adds	r4, #2
 800e4fe:	9305      	str	r3, [sp, #20]
 800e500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e5c8 <_svfiprintf_r+0x1f8>
 800e504:	7821      	ldrb	r1, [r4, #0]
 800e506:	2203      	movs	r2, #3
 800e508:	4650      	mov	r0, sl
 800e50a:	f7f1 fe69 	bl	80001e0 <memchr>
 800e50e:	b138      	cbz	r0, 800e520 <_svfiprintf_r+0x150>
 800e510:	9b04      	ldr	r3, [sp, #16]
 800e512:	eba0 000a 	sub.w	r0, r0, sl
 800e516:	2240      	movs	r2, #64	; 0x40
 800e518:	4082      	lsls	r2, r0
 800e51a:	4313      	orrs	r3, r2
 800e51c:	3401      	adds	r4, #1
 800e51e:	9304      	str	r3, [sp, #16]
 800e520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e524:	4825      	ldr	r0, [pc, #148]	; (800e5bc <_svfiprintf_r+0x1ec>)
 800e526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e52a:	2206      	movs	r2, #6
 800e52c:	f7f1 fe58 	bl	80001e0 <memchr>
 800e530:	2800      	cmp	r0, #0
 800e532:	d038      	beq.n	800e5a6 <_svfiprintf_r+0x1d6>
 800e534:	4b22      	ldr	r3, [pc, #136]	; (800e5c0 <_svfiprintf_r+0x1f0>)
 800e536:	bb1b      	cbnz	r3, 800e580 <_svfiprintf_r+0x1b0>
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	3307      	adds	r3, #7
 800e53c:	f023 0307 	bic.w	r3, r3, #7
 800e540:	3308      	adds	r3, #8
 800e542:	9303      	str	r3, [sp, #12]
 800e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e546:	4433      	add	r3, r6
 800e548:	9309      	str	r3, [sp, #36]	; 0x24
 800e54a:	e768      	b.n	800e41e <_svfiprintf_r+0x4e>
 800e54c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e550:	460c      	mov	r4, r1
 800e552:	2001      	movs	r0, #1
 800e554:	e7a6      	b.n	800e4a4 <_svfiprintf_r+0xd4>
 800e556:	2300      	movs	r3, #0
 800e558:	3401      	adds	r4, #1
 800e55a:	9305      	str	r3, [sp, #20]
 800e55c:	4619      	mov	r1, r3
 800e55e:	f04f 0c0a 	mov.w	ip, #10
 800e562:	4620      	mov	r0, r4
 800e564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e568:	3a30      	subs	r2, #48	; 0x30
 800e56a:	2a09      	cmp	r2, #9
 800e56c:	d903      	bls.n	800e576 <_svfiprintf_r+0x1a6>
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0c6      	beq.n	800e500 <_svfiprintf_r+0x130>
 800e572:	9105      	str	r1, [sp, #20]
 800e574:	e7c4      	b.n	800e500 <_svfiprintf_r+0x130>
 800e576:	fb0c 2101 	mla	r1, ip, r1, r2
 800e57a:	4604      	mov	r4, r0
 800e57c:	2301      	movs	r3, #1
 800e57e:	e7f0      	b.n	800e562 <_svfiprintf_r+0x192>
 800e580:	ab03      	add	r3, sp, #12
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	462a      	mov	r2, r5
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <_svfiprintf_r+0x1f4>)
 800e588:	a904      	add	r1, sp, #16
 800e58a:	4638      	mov	r0, r7
 800e58c:	f7fc fc36 	bl	800adfc <_printf_float>
 800e590:	1c42      	adds	r2, r0, #1
 800e592:	4606      	mov	r6, r0
 800e594:	d1d6      	bne.n	800e544 <_svfiprintf_r+0x174>
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	065b      	lsls	r3, r3, #25
 800e59a:	f53f af2d 	bmi.w	800e3f8 <_svfiprintf_r+0x28>
 800e59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5a0:	b01d      	add	sp, #116	; 0x74
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	ab03      	add	r3, sp, #12
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <_svfiprintf_r+0x1f4>)
 800e5ae:	a904      	add	r1, sp, #16
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7fc fec7 	bl	800b344 <_printf_i>
 800e5b6:	e7eb      	b.n	800e590 <_svfiprintf_r+0x1c0>
 800e5b8:	0800fc79 	.word	0x0800fc79
 800e5bc:	0800fc83 	.word	0x0800fc83
 800e5c0:	0800adfd 	.word	0x0800adfd
 800e5c4:	0800e31d 	.word	0x0800e31d
 800e5c8:	0800fc7f 	.word	0x0800fc7f

0800e5cc <__sflush_r>:
 800e5cc:	898a      	ldrh	r2, [r1, #12]
 800e5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	0710      	lsls	r0, r2, #28
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	d458      	bmi.n	800e68c <__sflush_r+0xc0>
 800e5da:	684b      	ldr	r3, [r1, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dc05      	bgt.n	800e5ec <__sflush_r+0x20>
 800e5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	dc02      	bgt.n	800e5ec <__sflush_r+0x20>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ee:	2e00      	cmp	r6, #0
 800e5f0:	d0f9      	beq.n	800e5e6 <__sflush_r+0x1a>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5f8:	682f      	ldr	r7, [r5, #0]
 800e5fa:	6a21      	ldr	r1, [r4, #32]
 800e5fc:	602b      	str	r3, [r5, #0]
 800e5fe:	d032      	beq.n	800e666 <__sflush_r+0x9a>
 800e600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	075a      	lsls	r2, r3, #29
 800e606:	d505      	bpl.n	800e614 <__sflush_r+0x48>
 800e608:	6863      	ldr	r3, [r4, #4]
 800e60a:	1ac0      	subs	r0, r0, r3
 800e60c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e60e:	b10b      	cbz	r3, 800e614 <__sflush_r+0x48>
 800e610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e612:	1ac0      	subs	r0, r0, r3
 800e614:	2300      	movs	r3, #0
 800e616:	4602      	mov	r2, r0
 800e618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e61a:	6a21      	ldr	r1, [r4, #32]
 800e61c:	4628      	mov	r0, r5
 800e61e:	47b0      	blx	r6
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	d106      	bne.n	800e634 <__sflush_r+0x68>
 800e626:	6829      	ldr	r1, [r5, #0]
 800e628:	291d      	cmp	r1, #29
 800e62a:	d82b      	bhi.n	800e684 <__sflush_r+0xb8>
 800e62c:	4a29      	ldr	r2, [pc, #164]	; (800e6d4 <__sflush_r+0x108>)
 800e62e:	410a      	asrs	r2, r1
 800e630:	07d6      	lsls	r6, r2, #31
 800e632:	d427      	bmi.n	800e684 <__sflush_r+0xb8>
 800e634:	2200      	movs	r2, #0
 800e636:	6062      	str	r2, [r4, #4]
 800e638:	04d9      	lsls	r1, r3, #19
 800e63a:	6922      	ldr	r2, [r4, #16]
 800e63c:	6022      	str	r2, [r4, #0]
 800e63e:	d504      	bpl.n	800e64a <__sflush_r+0x7e>
 800e640:	1c42      	adds	r2, r0, #1
 800e642:	d101      	bne.n	800e648 <__sflush_r+0x7c>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	b903      	cbnz	r3, 800e64a <__sflush_r+0x7e>
 800e648:	6560      	str	r0, [r4, #84]	; 0x54
 800e64a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e64c:	602f      	str	r7, [r5, #0]
 800e64e:	2900      	cmp	r1, #0
 800e650:	d0c9      	beq.n	800e5e6 <__sflush_r+0x1a>
 800e652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e656:	4299      	cmp	r1, r3
 800e658:	d002      	beq.n	800e660 <__sflush_r+0x94>
 800e65a:	4628      	mov	r0, r5
 800e65c:	f7fe fa1a 	bl	800ca94 <_free_r>
 800e660:	2000      	movs	r0, #0
 800e662:	6360      	str	r0, [r4, #52]	; 0x34
 800e664:	e7c0      	b.n	800e5e8 <__sflush_r+0x1c>
 800e666:	2301      	movs	r3, #1
 800e668:	4628      	mov	r0, r5
 800e66a:	47b0      	blx	r6
 800e66c:	1c41      	adds	r1, r0, #1
 800e66e:	d1c8      	bne.n	800e602 <__sflush_r+0x36>
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0c5      	beq.n	800e602 <__sflush_r+0x36>
 800e676:	2b1d      	cmp	r3, #29
 800e678:	d001      	beq.n	800e67e <__sflush_r+0xb2>
 800e67a:	2b16      	cmp	r3, #22
 800e67c:	d101      	bne.n	800e682 <__sflush_r+0xb6>
 800e67e:	602f      	str	r7, [r5, #0]
 800e680:	e7b1      	b.n	800e5e6 <__sflush_r+0x1a>
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	e7ad      	b.n	800e5e8 <__sflush_r+0x1c>
 800e68c:	690f      	ldr	r7, [r1, #16]
 800e68e:	2f00      	cmp	r7, #0
 800e690:	d0a9      	beq.n	800e5e6 <__sflush_r+0x1a>
 800e692:	0793      	lsls	r3, r2, #30
 800e694:	680e      	ldr	r6, [r1, #0]
 800e696:	bf08      	it	eq
 800e698:	694b      	ldreq	r3, [r1, #20]
 800e69a:	600f      	str	r7, [r1, #0]
 800e69c:	bf18      	it	ne
 800e69e:	2300      	movne	r3, #0
 800e6a0:	eba6 0807 	sub.w	r8, r6, r7
 800e6a4:	608b      	str	r3, [r1, #8]
 800e6a6:	f1b8 0f00 	cmp.w	r8, #0
 800e6aa:	dd9c      	ble.n	800e5e6 <__sflush_r+0x1a>
 800e6ac:	6a21      	ldr	r1, [r4, #32]
 800e6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6b0:	4643      	mov	r3, r8
 800e6b2:	463a      	mov	r2, r7
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b0      	blx	r6
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	dc06      	bgt.n	800e6ca <__sflush_r+0xfe>
 800e6bc:	89a3      	ldrh	r3, [r4, #12]
 800e6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c2:	81a3      	strh	r3, [r4, #12]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c8:	e78e      	b.n	800e5e8 <__sflush_r+0x1c>
 800e6ca:	4407      	add	r7, r0
 800e6cc:	eba8 0800 	sub.w	r8, r8, r0
 800e6d0:	e7e9      	b.n	800e6a6 <__sflush_r+0xda>
 800e6d2:	bf00      	nop
 800e6d4:	dfbffffe 	.word	0xdfbffffe

0800e6d8 <_fflush_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	690b      	ldr	r3, [r1, #16]
 800e6dc:	4605      	mov	r5, r0
 800e6de:	460c      	mov	r4, r1
 800e6e0:	b913      	cbnz	r3, 800e6e8 <_fflush_r+0x10>
 800e6e2:	2500      	movs	r5, #0
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	b118      	cbz	r0, 800e6f2 <_fflush_r+0x1a>
 800e6ea:	6a03      	ldr	r3, [r0, #32]
 800e6ec:	b90b      	cbnz	r3, 800e6f2 <_fflush_r+0x1a>
 800e6ee:	f7fd f9d5 	bl	800ba9c <__sinit>
 800e6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d0f3      	beq.n	800e6e2 <_fflush_r+0xa>
 800e6fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6fc:	07d0      	lsls	r0, r2, #31
 800e6fe:	d404      	bmi.n	800e70a <_fflush_r+0x32>
 800e700:	0599      	lsls	r1, r3, #22
 800e702:	d402      	bmi.n	800e70a <_fflush_r+0x32>
 800e704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e706:	f7fd fb35 	bl	800bd74 <__retarget_lock_acquire_recursive>
 800e70a:	4628      	mov	r0, r5
 800e70c:	4621      	mov	r1, r4
 800e70e:	f7ff ff5d 	bl	800e5cc <__sflush_r>
 800e712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e714:	07da      	lsls	r2, r3, #31
 800e716:	4605      	mov	r5, r0
 800e718:	d4e4      	bmi.n	800e6e4 <_fflush_r+0xc>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	059b      	lsls	r3, r3, #22
 800e71e:	d4e1      	bmi.n	800e6e4 <_fflush_r+0xc>
 800e720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e722:	f7fd fb28 	bl	800bd76 <__retarget_lock_release_recursive>
 800e726:	e7dd      	b.n	800e6e4 <_fflush_r+0xc>

0800e728 <memmove>:
 800e728:	4288      	cmp	r0, r1
 800e72a:	b510      	push	{r4, lr}
 800e72c:	eb01 0402 	add.w	r4, r1, r2
 800e730:	d902      	bls.n	800e738 <memmove+0x10>
 800e732:	4284      	cmp	r4, r0
 800e734:	4623      	mov	r3, r4
 800e736:	d807      	bhi.n	800e748 <memmove+0x20>
 800e738:	1e43      	subs	r3, r0, #1
 800e73a:	42a1      	cmp	r1, r4
 800e73c:	d008      	beq.n	800e750 <memmove+0x28>
 800e73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e746:	e7f8      	b.n	800e73a <memmove+0x12>
 800e748:	4402      	add	r2, r0
 800e74a:	4601      	mov	r1, r0
 800e74c:	428a      	cmp	r2, r1
 800e74e:	d100      	bne.n	800e752 <memmove+0x2a>
 800e750:	bd10      	pop	{r4, pc}
 800e752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e75a:	e7f7      	b.n	800e74c <memmove+0x24>

0800e75c <strncmp>:
 800e75c:	b510      	push	{r4, lr}
 800e75e:	b16a      	cbz	r2, 800e77c <strncmp+0x20>
 800e760:	3901      	subs	r1, #1
 800e762:	1884      	adds	r4, r0, r2
 800e764:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e768:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d103      	bne.n	800e778 <strncmp+0x1c>
 800e770:	42a0      	cmp	r0, r4
 800e772:	d001      	beq.n	800e778 <strncmp+0x1c>
 800e774:	2a00      	cmp	r2, #0
 800e776:	d1f5      	bne.n	800e764 <strncmp+0x8>
 800e778:	1ad0      	subs	r0, r2, r3
 800e77a:	bd10      	pop	{r4, pc}
 800e77c:	4610      	mov	r0, r2
 800e77e:	e7fc      	b.n	800e77a <strncmp+0x1e>

0800e780 <_sbrk_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4d06      	ldr	r5, [pc, #24]	; (800e79c <_sbrk_r+0x1c>)
 800e784:	2300      	movs	r3, #0
 800e786:	4604      	mov	r4, r0
 800e788:	4608      	mov	r0, r1
 800e78a:	602b      	str	r3, [r5, #0]
 800e78c:	f7f3 f92c 	bl	80019e8 <_sbrk>
 800e790:	1c43      	adds	r3, r0, #1
 800e792:	d102      	bne.n	800e79a <_sbrk_r+0x1a>
 800e794:	682b      	ldr	r3, [r5, #0]
 800e796:	b103      	cbz	r3, 800e79a <_sbrk_r+0x1a>
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	bd38      	pop	{r3, r4, r5, pc}
 800e79c:	200061c4 	.word	0x200061c4

0800e7a0 <nan>:
 800e7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e7a8 <nan+0x8>
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	00000000 	.word	0x00000000
 800e7ac:	7ff80000 	.word	0x7ff80000

0800e7b0 <__assert_func>:
 800e7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7b2:	4614      	mov	r4, r2
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <__assert_func+0x2c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	68d8      	ldr	r0, [r3, #12]
 800e7be:	b14c      	cbz	r4, 800e7d4 <__assert_func+0x24>
 800e7c0:	4b07      	ldr	r3, [pc, #28]	; (800e7e0 <__assert_func+0x30>)
 800e7c2:	9100      	str	r1, [sp, #0]
 800e7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7c8:	4906      	ldr	r1, [pc, #24]	; (800e7e4 <__assert_func+0x34>)
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	f000 fbca 	bl	800ef64 <fiprintf>
 800e7d0:	f000 fbda 	bl	800ef88 <abort>
 800e7d4:	4b04      	ldr	r3, [pc, #16]	; (800e7e8 <__assert_func+0x38>)
 800e7d6:	461c      	mov	r4, r3
 800e7d8:	e7f3      	b.n	800e7c2 <__assert_func+0x12>
 800e7da:	bf00      	nop
 800e7dc:	20000068 	.word	0x20000068
 800e7e0:	0800fc92 	.word	0x0800fc92
 800e7e4:	0800fc9f 	.word	0x0800fc9f
 800e7e8:	0800fccd 	.word	0x0800fccd

0800e7ec <_calloc_r>:
 800e7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ee:	fba1 2402 	umull	r2, r4, r1, r2
 800e7f2:	b94c      	cbnz	r4, 800e808 <_calloc_r+0x1c>
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	9201      	str	r2, [sp, #4]
 800e7f8:	f7fe f9c0 	bl	800cb7c <_malloc_r>
 800e7fc:	9a01      	ldr	r2, [sp, #4]
 800e7fe:	4605      	mov	r5, r0
 800e800:	b930      	cbnz	r0, 800e810 <_calloc_r+0x24>
 800e802:	4628      	mov	r0, r5
 800e804:	b003      	add	sp, #12
 800e806:	bd30      	pop	{r4, r5, pc}
 800e808:	220c      	movs	r2, #12
 800e80a:	6002      	str	r2, [r0, #0]
 800e80c:	2500      	movs	r5, #0
 800e80e:	e7f8      	b.n	800e802 <_calloc_r+0x16>
 800e810:	4621      	mov	r1, r4
 800e812:	f7fd f9dc 	bl	800bbce <memset>
 800e816:	e7f4      	b.n	800e802 <_calloc_r+0x16>

0800e818 <rshift>:
 800e818:	6903      	ldr	r3, [r0, #16]
 800e81a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e81e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e822:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e826:	f100 0414 	add.w	r4, r0, #20
 800e82a:	dd45      	ble.n	800e8b8 <rshift+0xa0>
 800e82c:	f011 011f 	ands.w	r1, r1, #31
 800e830:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e834:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e838:	d10c      	bne.n	800e854 <rshift+0x3c>
 800e83a:	f100 0710 	add.w	r7, r0, #16
 800e83e:	4629      	mov	r1, r5
 800e840:	42b1      	cmp	r1, r6
 800e842:	d334      	bcc.n	800e8ae <rshift+0x96>
 800e844:	1a9b      	subs	r3, r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	1eea      	subs	r2, r5, #3
 800e84a:	4296      	cmp	r6, r2
 800e84c:	bf38      	it	cc
 800e84e:	2300      	movcc	r3, #0
 800e850:	4423      	add	r3, r4
 800e852:	e015      	b.n	800e880 <rshift+0x68>
 800e854:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e858:	f1c1 0820 	rsb	r8, r1, #32
 800e85c:	40cf      	lsrs	r7, r1
 800e85e:	f105 0e04 	add.w	lr, r5, #4
 800e862:	46a1      	mov	r9, r4
 800e864:	4576      	cmp	r6, lr
 800e866:	46f4      	mov	ip, lr
 800e868:	d815      	bhi.n	800e896 <rshift+0x7e>
 800e86a:	1a9a      	subs	r2, r3, r2
 800e86c:	0092      	lsls	r2, r2, #2
 800e86e:	3a04      	subs	r2, #4
 800e870:	3501      	adds	r5, #1
 800e872:	42ae      	cmp	r6, r5
 800e874:	bf38      	it	cc
 800e876:	2200      	movcc	r2, #0
 800e878:	18a3      	adds	r3, r4, r2
 800e87a:	50a7      	str	r7, [r4, r2]
 800e87c:	b107      	cbz	r7, 800e880 <rshift+0x68>
 800e87e:	3304      	adds	r3, #4
 800e880:	1b1a      	subs	r2, r3, r4
 800e882:	42a3      	cmp	r3, r4
 800e884:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e888:	bf08      	it	eq
 800e88a:	2300      	moveq	r3, #0
 800e88c:	6102      	str	r2, [r0, #16]
 800e88e:	bf08      	it	eq
 800e890:	6143      	streq	r3, [r0, #20]
 800e892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e896:	f8dc c000 	ldr.w	ip, [ip]
 800e89a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e89e:	ea4c 0707 	orr.w	r7, ip, r7
 800e8a2:	f849 7b04 	str.w	r7, [r9], #4
 800e8a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8aa:	40cf      	lsrs	r7, r1
 800e8ac:	e7da      	b.n	800e864 <rshift+0x4c>
 800e8ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8b6:	e7c3      	b.n	800e840 <rshift+0x28>
 800e8b8:	4623      	mov	r3, r4
 800e8ba:	e7e1      	b.n	800e880 <rshift+0x68>

0800e8bc <__hexdig_fun>:
 800e8bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	d802      	bhi.n	800e8ca <__hexdig_fun+0xe>
 800e8c4:	3820      	subs	r0, #32
 800e8c6:	b2c0      	uxtb	r0, r0
 800e8c8:	4770      	bx	lr
 800e8ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	d801      	bhi.n	800e8d6 <__hexdig_fun+0x1a>
 800e8d2:	3847      	subs	r0, #71	; 0x47
 800e8d4:	e7f7      	b.n	800e8c6 <__hexdig_fun+0xa>
 800e8d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e8da:	2b05      	cmp	r3, #5
 800e8dc:	d801      	bhi.n	800e8e2 <__hexdig_fun+0x26>
 800e8de:	3827      	subs	r0, #39	; 0x27
 800e8e0:	e7f1      	b.n	800e8c6 <__hexdig_fun+0xa>
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	4770      	bx	lr
	...

0800e8e8 <__gethex>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	4617      	mov	r7, r2
 800e8ee:	680a      	ldr	r2, [r1, #0]
 800e8f0:	b085      	sub	sp, #20
 800e8f2:	f102 0b02 	add.w	fp, r2, #2
 800e8f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e8fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e8fe:	4681      	mov	r9, r0
 800e900:	468a      	mov	sl, r1
 800e902:	9302      	str	r3, [sp, #8]
 800e904:	32fe      	adds	r2, #254	; 0xfe
 800e906:	eb02 030b 	add.w	r3, r2, fp
 800e90a:	46d8      	mov	r8, fp
 800e90c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e910:	9301      	str	r3, [sp, #4]
 800e912:	2830      	cmp	r0, #48	; 0x30
 800e914:	d0f7      	beq.n	800e906 <__gethex+0x1e>
 800e916:	f7ff ffd1 	bl	800e8bc <__hexdig_fun>
 800e91a:	4604      	mov	r4, r0
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d138      	bne.n	800e992 <__gethex+0xaa>
 800e920:	49a7      	ldr	r1, [pc, #668]	; (800ebc0 <__gethex+0x2d8>)
 800e922:	2201      	movs	r2, #1
 800e924:	4640      	mov	r0, r8
 800e926:	f7ff ff19 	bl	800e75c <strncmp>
 800e92a:	4606      	mov	r6, r0
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d169      	bne.n	800ea04 <__gethex+0x11c>
 800e930:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e934:	465d      	mov	r5, fp
 800e936:	f7ff ffc1 	bl	800e8bc <__hexdig_fun>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d064      	beq.n	800ea08 <__gethex+0x120>
 800e93e:	465a      	mov	r2, fp
 800e940:	7810      	ldrb	r0, [r2, #0]
 800e942:	2830      	cmp	r0, #48	; 0x30
 800e944:	4690      	mov	r8, r2
 800e946:	f102 0201 	add.w	r2, r2, #1
 800e94a:	d0f9      	beq.n	800e940 <__gethex+0x58>
 800e94c:	f7ff ffb6 	bl	800e8bc <__hexdig_fun>
 800e950:	2301      	movs	r3, #1
 800e952:	fab0 f480 	clz	r4, r0
 800e956:	0964      	lsrs	r4, r4, #5
 800e958:	465e      	mov	r6, fp
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	4642      	mov	r2, r8
 800e95e:	4615      	mov	r5, r2
 800e960:	3201      	adds	r2, #1
 800e962:	7828      	ldrb	r0, [r5, #0]
 800e964:	f7ff ffaa 	bl	800e8bc <__hexdig_fun>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d1f8      	bne.n	800e95e <__gethex+0x76>
 800e96c:	4994      	ldr	r1, [pc, #592]	; (800ebc0 <__gethex+0x2d8>)
 800e96e:	2201      	movs	r2, #1
 800e970:	4628      	mov	r0, r5
 800e972:	f7ff fef3 	bl	800e75c <strncmp>
 800e976:	b978      	cbnz	r0, 800e998 <__gethex+0xb0>
 800e978:	b946      	cbnz	r6, 800e98c <__gethex+0xa4>
 800e97a:	1c6e      	adds	r6, r5, #1
 800e97c:	4632      	mov	r2, r6
 800e97e:	4615      	mov	r5, r2
 800e980:	3201      	adds	r2, #1
 800e982:	7828      	ldrb	r0, [r5, #0]
 800e984:	f7ff ff9a 	bl	800e8bc <__hexdig_fun>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d1f8      	bne.n	800e97e <__gethex+0x96>
 800e98c:	1b73      	subs	r3, r6, r5
 800e98e:	009e      	lsls	r6, r3, #2
 800e990:	e004      	b.n	800e99c <__gethex+0xb4>
 800e992:	2400      	movs	r4, #0
 800e994:	4626      	mov	r6, r4
 800e996:	e7e1      	b.n	800e95c <__gethex+0x74>
 800e998:	2e00      	cmp	r6, #0
 800e99a:	d1f7      	bne.n	800e98c <__gethex+0xa4>
 800e99c:	782b      	ldrb	r3, [r5, #0]
 800e99e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9a2:	2b50      	cmp	r3, #80	; 0x50
 800e9a4:	d13d      	bne.n	800ea22 <__gethex+0x13a>
 800e9a6:	786b      	ldrb	r3, [r5, #1]
 800e9a8:	2b2b      	cmp	r3, #43	; 0x2b
 800e9aa:	d02f      	beq.n	800ea0c <__gethex+0x124>
 800e9ac:	2b2d      	cmp	r3, #45	; 0x2d
 800e9ae:	d031      	beq.n	800ea14 <__gethex+0x12c>
 800e9b0:	1c69      	adds	r1, r5, #1
 800e9b2:	f04f 0b00 	mov.w	fp, #0
 800e9b6:	7808      	ldrb	r0, [r1, #0]
 800e9b8:	f7ff ff80 	bl	800e8bc <__hexdig_fun>
 800e9bc:	1e42      	subs	r2, r0, #1
 800e9be:	b2d2      	uxtb	r2, r2
 800e9c0:	2a18      	cmp	r2, #24
 800e9c2:	d82e      	bhi.n	800ea22 <__gethex+0x13a>
 800e9c4:	f1a0 0210 	sub.w	r2, r0, #16
 800e9c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9cc:	f7ff ff76 	bl	800e8bc <__hexdig_fun>
 800e9d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800e9d4:	fa5f fc8c 	uxtb.w	ip, ip
 800e9d8:	f1bc 0f18 	cmp.w	ip, #24
 800e9dc:	d91d      	bls.n	800ea1a <__gethex+0x132>
 800e9de:	f1bb 0f00 	cmp.w	fp, #0
 800e9e2:	d000      	beq.n	800e9e6 <__gethex+0xfe>
 800e9e4:	4252      	negs	r2, r2
 800e9e6:	4416      	add	r6, r2
 800e9e8:	f8ca 1000 	str.w	r1, [sl]
 800e9ec:	b1dc      	cbz	r4, 800ea26 <__gethex+0x13e>
 800e9ee:	9b01      	ldr	r3, [sp, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bf14      	ite	ne
 800e9f4:	f04f 0800 	movne.w	r8, #0
 800e9f8:	f04f 0806 	moveq.w	r8, #6
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	b005      	add	sp, #20
 800ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea04:	4645      	mov	r5, r8
 800ea06:	4626      	mov	r6, r4
 800ea08:	2401      	movs	r4, #1
 800ea0a:	e7c7      	b.n	800e99c <__gethex+0xb4>
 800ea0c:	f04f 0b00 	mov.w	fp, #0
 800ea10:	1ca9      	adds	r1, r5, #2
 800ea12:	e7d0      	b.n	800e9b6 <__gethex+0xce>
 800ea14:	f04f 0b01 	mov.w	fp, #1
 800ea18:	e7fa      	b.n	800ea10 <__gethex+0x128>
 800ea1a:	230a      	movs	r3, #10
 800ea1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ea20:	e7d0      	b.n	800e9c4 <__gethex+0xdc>
 800ea22:	4629      	mov	r1, r5
 800ea24:	e7e0      	b.n	800e9e8 <__gethex+0x100>
 800ea26:	eba5 0308 	sub.w	r3, r5, r8
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	2b07      	cmp	r3, #7
 800ea30:	dc0a      	bgt.n	800ea48 <__gethex+0x160>
 800ea32:	4648      	mov	r0, r9
 800ea34:	f7fe f92e 	bl	800cc94 <_Balloc>
 800ea38:	4604      	mov	r4, r0
 800ea3a:	b940      	cbnz	r0, 800ea4e <__gethex+0x166>
 800ea3c:	4b61      	ldr	r3, [pc, #388]	; (800ebc4 <__gethex+0x2dc>)
 800ea3e:	4602      	mov	r2, r0
 800ea40:	21e4      	movs	r1, #228	; 0xe4
 800ea42:	4861      	ldr	r0, [pc, #388]	; (800ebc8 <__gethex+0x2e0>)
 800ea44:	f7ff feb4 	bl	800e7b0 <__assert_func>
 800ea48:	3101      	adds	r1, #1
 800ea4a:	105b      	asrs	r3, r3, #1
 800ea4c:	e7ef      	b.n	800ea2e <__gethex+0x146>
 800ea4e:	f100 0a14 	add.w	sl, r0, #20
 800ea52:	2300      	movs	r3, #0
 800ea54:	495a      	ldr	r1, [pc, #360]	; (800ebc0 <__gethex+0x2d8>)
 800ea56:	f8cd a004 	str.w	sl, [sp, #4]
 800ea5a:	469b      	mov	fp, r3
 800ea5c:	45a8      	cmp	r8, r5
 800ea5e:	d342      	bcc.n	800eae6 <__gethex+0x1fe>
 800ea60:	9801      	ldr	r0, [sp, #4]
 800ea62:	f840 bb04 	str.w	fp, [r0], #4
 800ea66:	eba0 000a 	sub.w	r0, r0, sl
 800ea6a:	1080      	asrs	r0, r0, #2
 800ea6c:	6120      	str	r0, [r4, #16]
 800ea6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ea72:	4658      	mov	r0, fp
 800ea74:	f7fe fa00 	bl	800ce78 <__hi0bits>
 800ea78:	683d      	ldr	r5, [r7, #0]
 800ea7a:	eba8 0000 	sub.w	r0, r8, r0
 800ea7e:	42a8      	cmp	r0, r5
 800ea80:	dd59      	ble.n	800eb36 <__gethex+0x24e>
 800ea82:	eba0 0805 	sub.w	r8, r0, r5
 800ea86:	4641      	mov	r1, r8
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f7fe fd8f 	bl	800d5ac <__any_on>
 800ea8e:	4683      	mov	fp, r0
 800ea90:	b1b8      	cbz	r0, 800eac2 <__gethex+0x1da>
 800ea92:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ea96:	1159      	asrs	r1, r3, #5
 800ea98:	f003 021f 	and.w	r2, r3, #31
 800ea9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eaa0:	f04f 0b01 	mov.w	fp, #1
 800eaa4:	fa0b f202 	lsl.w	r2, fp, r2
 800eaa8:	420a      	tst	r2, r1
 800eaaa:	d00a      	beq.n	800eac2 <__gethex+0x1da>
 800eaac:	455b      	cmp	r3, fp
 800eaae:	dd06      	ble.n	800eabe <__gethex+0x1d6>
 800eab0:	f1a8 0102 	sub.w	r1, r8, #2
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7fe fd79 	bl	800d5ac <__any_on>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	d138      	bne.n	800eb30 <__gethex+0x248>
 800eabe:	f04f 0b02 	mov.w	fp, #2
 800eac2:	4641      	mov	r1, r8
 800eac4:	4620      	mov	r0, r4
 800eac6:	f7ff fea7 	bl	800e818 <rshift>
 800eaca:	4446      	add	r6, r8
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	42b3      	cmp	r3, r6
 800ead0:	da41      	bge.n	800eb56 <__gethex+0x26e>
 800ead2:	4621      	mov	r1, r4
 800ead4:	4648      	mov	r0, r9
 800ead6:	f7fe f91d 	bl	800cd14 <_Bfree>
 800eada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eadc:	2300      	movs	r3, #0
 800eade:	6013      	str	r3, [r2, #0]
 800eae0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800eae4:	e78a      	b.n	800e9fc <__gethex+0x114>
 800eae6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800eaea:	2a2e      	cmp	r2, #46	; 0x2e
 800eaec:	d014      	beq.n	800eb18 <__gethex+0x230>
 800eaee:	2b20      	cmp	r3, #32
 800eaf0:	d106      	bne.n	800eb00 <__gethex+0x218>
 800eaf2:	9b01      	ldr	r3, [sp, #4]
 800eaf4:	f843 bb04 	str.w	fp, [r3], #4
 800eaf8:	f04f 0b00 	mov.w	fp, #0
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	465b      	mov	r3, fp
 800eb00:	7828      	ldrb	r0, [r5, #0]
 800eb02:	9303      	str	r3, [sp, #12]
 800eb04:	f7ff feda 	bl	800e8bc <__hexdig_fun>
 800eb08:	9b03      	ldr	r3, [sp, #12]
 800eb0a:	f000 000f 	and.w	r0, r0, #15
 800eb0e:	4098      	lsls	r0, r3
 800eb10:	ea4b 0b00 	orr.w	fp, fp, r0
 800eb14:	3304      	adds	r3, #4
 800eb16:	e7a1      	b.n	800ea5c <__gethex+0x174>
 800eb18:	45a8      	cmp	r8, r5
 800eb1a:	d8e8      	bhi.n	800eaee <__gethex+0x206>
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	4628      	mov	r0, r5
 800eb20:	9303      	str	r3, [sp, #12]
 800eb22:	f7ff fe1b 	bl	800e75c <strncmp>
 800eb26:	4926      	ldr	r1, [pc, #152]	; (800ebc0 <__gethex+0x2d8>)
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d1df      	bne.n	800eaee <__gethex+0x206>
 800eb2e:	e795      	b.n	800ea5c <__gethex+0x174>
 800eb30:	f04f 0b03 	mov.w	fp, #3
 800eb34:	e7c5      	b.n	800eac2 <__gethex+0x1da>
 800eb36:	da0b      	bge.n	800eb50 <__gethex+0x268>
 800eb38:	eba5 0800 	sub.w	r8, r5, r0
 800eb3c:	4621      	mov	r1, r4
 800eb3e:	4642      	mov	r2, r8
 800eb40:	4648      	mov	r0, r9
 800eb42:	f7fe fb01 	bl	800d148 <__lshift>
 800eb46:	eba6 0608 	sub.w	r6, r6, r8
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	f100 0a14 	add.w	sl, r0, #20
 800eb50:	f04f 0b00 	mov.w	fp, #0
 800eb54:	e7ba      	b.n	800eacc <__gethex+0x1e4>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	42b3      	cmp	r3, r6
 800eb5a:	dd73      	ble.n	800ec44 <__gethex+0x35c>
 800eb5c:	1b9e      	subs	r6, r3, r6
 800eb5e:	42b5      	cmp	r5, r6
 800eb60:	dc34      	bgt.n	800ebcc <__gethex+0x2e4>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d023      	beq.n	800ebb0 <__gethex+0x2c8>
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d025      	beq.n	800ebb8 <__gethex+0x2d0>
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d115      	bne.n	800eb9c <__gethex+0x2b4>
 800eb70:	42b5      	cmp	r5, r6
 800eb72:	d113      	bne.n	800eb9c <__gethex+0x2b4>
 800eb74:	2d01      	cmp	r5, #1
 800eb76:	d10b      	bne.n	800eb90 <__gethex+0x2a8>
 800eb78:	9a02      	ldr	r2, [sp, #8]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	2301      	movs	r3, #1
 800eb80:	6123      	str	r3, [r4, #16]
 800eb82:	f8ca 3000 	str.w	r3, [sl]
 800eb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800eb8c:	601c      	str	r4, [r3, #0]
 800eb8e:	e735      	b.n	800e9fc <__gethex+0x114>
 800eb90:	1e69      	subs	r1, r5, #1
 800eb92:	4620      	mov	r0, r4
 800eb94:	f7fe fd0a 	bl	800d5ac <__any_on>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d1ed      	bne.n	800eb78 <__gethex+0x290>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4648      	mov	r0, r9
 800eba0:	f7fe f8b8 	bl	800cd14 <_Bfree>
 800eba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eba6:	2300      	movs	r3, #0
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ebae:	e725      	b.n	800e9fc <__gethex+0x114>
 800ebb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1f2      	bne.n	800eb9c <__gethex+0x2b4>
 800ebb6:	e7df      	b.n	800eb78 <__gethex+0x290>
 800ebb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1dc      	bne.n	800eb78 <__gethex+0x290>
 800ebbe:	e7ed      	b.n	800eb9c <__gethex+0x2b4>
 800ebc0:	0800fb24 	.word	0x0800fb24
 800ebc4:	0800f9bd 	.word	0x0800f9bd
 800ebc8:	0800fcce 	.word	0x0800fcce
 800ebcc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ebd0:	f1bb 0f00 	cmp.w	fp, #0
 800ebd4:	d133      	bne.n	800ec3e <__gethex+0x356>
 800ebd6:	f1b8 0f00 	cmp.w	r8, #0
 800ebda:	d004      	beq.n	800ebe6 <__gethex+0x2fe>
 800ebdc:	4641      	mov	r1, r8
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f7fe fce4 	bl	800d5ac <__any_on>
 800ebe4:	4683      	mov	fp, r0
 800ebe6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ebea:	2301      	movs	r3, #1
 800ebec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ebf0:	f008 081f 	and.w	r8, r8, #31
 800ebf4:	fa03 f308 	lsl.w	r3, r3, r8
 800ebf8:	4213      	tst	r3, r2
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	bf18      	it	ne
 800ec00:	f04b 0b02 	orrne.w	fp, fp, #2
 800ec04:	1bad      	subs	r5, r5, r6
 800ec06:	f7ff fe07 	bl	800e818 <rshift>
 800ec0a:	687e      	ldr	r6, [r7, #4]
 800ec0c:	f04f 0802 	mov.w	r8, #2
 800ec10:	f1bb 0f00 	cmp.w	fp, #0
 800ec14:	d04a      	beq.n	800ecac <__gethex+0x3c4>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d016      	beq.n	800ec4a <__gethex+0x362>
 800ec1c:	2b03      	cmp	r3, #3
 800ec1e:	d018      	beq.n	800ec52 <__gethex+0x36a>
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d109      	bne.n	800ec38 <__gethex+0x350>
 800ec24:	f01b 0f02 	tst.w	fp, #2
 800ec28:	d006      	beq.n	800ec38 <__gethex+0x350>
 800ec2a:	f8da 3000 	ldr.w	r3, [sl]
 800ec2e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ec32:	f01b 0f01 	tst.w	fp, #1
 800ec36:	d10f      	bne.n	800ec58 <__gethex+0x370>
 800ec38:	f048 0810 	orr.w	r8, r8, #16
 800ec3c:	e036      	b.n	800ecac <__gethex+0x3c4>
 800ec3e:	f04f 0b01 	mov.w	fp, #1
 800ec42:	e7d0      	b.n	800ebe6 <__gethex+0x2fe>
 800ec44:	f04f 0801 	mov.w	r8, #1
 800ec48:	e7e2      	b.n	800ec10 <__gethex+0x328>
 800ec4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec4c:	f1c3 0301 	rsb	r3, r3, #1
 800ec50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0ef      	beq.n	800ec38 <__gethex+0x350>
 800ec58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec5c:	f104 0214 	add.w	r2, r4, #20
 800ec60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	4694      	mov	ip, r2
 800ec6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ec72:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800ec76:	d01e      	beq.n	800ecb6 <__gethex+0x3ce>
 800ec78:	3101      	adds	r1, #1
 800ec7a:	f8cc 1000 	str.w	r1, [ip]
 800ec7e:	f1b8 0f02 	cmp.w	r8, #2
 800ec82:	f104 0214 	add.w	r2, r4, #20
 800ec86:	d13d      	bne.n	800ed04 <__gethex+0x41c>
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	42ab      	cmp	r3, r5
 800ec8e:	d10b      	bne.n	800eca8 <__gethex+0x3c0>
 800ec90:	1169      	asrs	r1, r5, #5
 800ec92:	2301      	movs	r3, #1
 800ec94:	f005 051f 	and.w	r5, r5, #31
 800ec98:	fa03 f505 	lsl.w	r5, r3, r5
 800ec9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eca0:	421d      	tst	r5, r3
 800eca2:	bf18      	it	ne
 800eca4:	f04f 0801 	movne.w	r8, #1
 800eca8:	f048 0820 	orr.w	r8, r8, #32
 800ecac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecae:	601c      	str	r4, [r3, #0]
 800ecb0:	9b02      	ldr	r3, [sp, #8]
 800ecb2:	601e      	str	r6, [r3, #0]
 800ecb4:	e6a2      	b.n	800e9fc <__gethex+0x114>
 800ecb6:	4290      	cmp	r0, r2
 800ecb8:	f842 3c04 	str.w	r3, [r2, #-4]
 800ecbc:	d8d6      	bhi.n	800ec6c <__gethex+0x384>
 800ecbe:	68a2      	ldr	r2, [r4, #8]
 800ecc0:	4593      	cmp	fp, r2
 800ecc2:	db17      	blt.n	800ecf4 <__gethex+0x40c>
 800ecc4:	6861      	ldr	r1, [r4, #4]
 800ecc6:	4648      	mov	r0, r9
 800ecc8:	3101      	adds	r1, #1
 800ecca:	f7fd ffe3 	bl	800cc94 <_Balloc>
 800ecce:	4682      	mov	sl, r0
 800ecd0:	b918      	cbnz	r0, 800ecda <__gethex+0x3f2>
 800ecd2:	4b1b      	ldr	r3, [pc, #108]	; (800ed40 <__gethex+0x458>)
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	2184      	movs	r1, #132	; 0x84
 800ecd8:	e6b3      	b.n	800ea42 <__gethex+0x15a>
 800ecda:	6922      	ldr	r2, [r4, #16]
 800ecdc:	3202      	adds	r2, #2
 800ecde:	f104 010c 	add.w	r1, r4, #12
 800ece2:	0092      	lsls	r2, r2, #2
 800ece4:	300c      	adds	r0, #12
 800ece6:	f7fd f847 	bl	800bd78 <memcpy>
 800ecea:	4621      	mov	r1, r4
 800ecec:	4648      	mov	r0, r9
 800ecee:	f7fe f811 	bl	800cd14 <_Bfree>
 800ecf2:	4654      	mov	r4, sl
 800ecf4:	6922      	ldr	r2, [r4, #16]
 800ecf6:	1c51      	adds	r1, r2, #1
 800ecf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ecfc:	6121      	str	r1, [r4, #16]
 800ecfe:	2101      	movs	r1, #1
 800ed00:	6151      	str	r1, [r2, #20]
 800ed02:	e7bc      	b.n	800ec7e <__gethex+0x396>
 800ed04:	6921      	ldr	r1, [r4, #16]
 800ed06:	4559      	cmp	r1, fp
 800ed08:	dd0b      	ble.n	800ed22 <__gethex+0x43a>
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f7ff fd83 	bl	800e818 <rshift>
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	3601      	adds	r6, #1
 800ed16:	42b3      	cmp	r3, r6
 800ed18:	f6ff aedb 	blt.w	800ead2 <__gethex+0x1ea>
 800ed1c:	f04f 0801 	mov.w	r8, #1
 800ed20:	e7c2      	b.n	800eca8 <__gethex+0x3c0>
 800ed22:	f015 051f 	ands.w	r5, r5, #31
 800ed26:	d0f9      	beq.n	800ed1c <__gethex+0x434>
 800ed28:	9b01      	ldr	r3, [sp, #4]
 800ed2a:	441a      	add	r2, r3
 800ed2c:	f1c5 0520 	rsb	r5, r5, #32
 800ed30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ed34:	f7fe f8a0 	bl	800ce78 <__hi0bits>
 800ed38:	42a8      	cmp	r0, r5
 800ed3a:	dbe6      	blt.n	800ed0a <__gethex+0x422>
 800ed3c:	e7ee      	b.n	800ed1c <__gethex+0x434>
 800ed3e:	bf00      	nop
 800ed40:	0800f9bd 	.word	0x0800f9bd

0800ed44 <L_shift>:
 800ed44:	f1c2 0208 	rsb	r2, r2, #8
 800ed48:	0092      	lsls	r2, r2, #2
 800ed4a:	b570      	push	{r4, r5, r6, lr}
 800ed4c:	f1c2 0620 	rsb	r6, r2, #32
 800ed50:	6843      	ldr	r3, [r0, #4]
 800ed52:	6804      	ldr	r4, [r0, #0]
 800ed54:	fa03 f506 	lsl.w	r5, r3, r6
 800ed58:	432c      	orrs	r4, r5
 800ed5a:	40d3      	lsrs	r3, r2
 800ed5c:	6004      	str	r4, [r0, #0]
 800ed5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed62:	4288      	cmp	r0, r1
 800ed64:	d3f4      	bcc.n	800ed50 <L_shift+0xc>
 800ed66:	bd70      	pop	{r4, r5, r6, pc}

0800ed68 <__match>:
 800ed68:	b530      	push	{r4, r5, lr}
 800ed6a:	6803      	ldr	r3, [r0, #0]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed72:	b914      	cbnz	r4, 800ed7a <__match+0x12>
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	2001      	movs	r0, #1
 800ed78:	bd30      	pop	{r4, r5, pc}
 800ed7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed82:	2d19      	cmp	r5, #25
 800ed84:	bf98      	it	ls
 800ed86:	3220      	addls	r2, #32
 800ed88:	42a2      	cmp	r2, r4
 800ed8a:	d0f0      	beq.n	800ed6e <__match+0x6>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	e7f3      	b.n	800ed78 <__match+0x10>

0800ed90 <__hexnan>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	680b      	ldr	r3, [r1, #0]
 800ed96:	6801      	ldr	r1, [r0, #0]
 800ed98:	115e      	asrs	r6, r3, #5
 800ed9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed9e:	f013 031f 	ands.w	r3, r3, #31
 800eda2:	b087      	sub	sp, #28
 800eda4:	bf18      	it	ne
 800eda6:	3604      	addne	r6, #4
 800eda8:	2500      	movs	r5, #0
 800edaa:	1f37      	subs	r7, r6, #4
 800edac:	4682      	mov	sl, r0
 800edae:	4690      	mov	r8, r2
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800edb6:	46b9      	mov	r9, r7
 800edb8:	463c      	mov	r4, r7
 800edba:	9502      	str	r5, [sp, #8]
 800edbc:	46ab      	mov	fp, r5
 800edbe:	784a      	ldrb	r2, [r1, #1]
 800edc0:	1c4b      	adds	r3, r1, #1
 800edc2:	9303      	str	r3, [sp, #12]
 800edc4:	b342      	cbz	r2, 800ee18 <__hexnan+0x88>
 800edc6:	4610      	mov	r0, r2
 800edc8:	9105      	str	r1, [sp, #20]
 800edca:	9204      	str	r2, [sp, #16]
 800edcc:	f7ff fd76 	bl	800e8bc <__hexdig_fun>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d14f      	bne.n	800ee74 <__hexnan+0xe4>
 800edd4:	9a04      	ldr	r2, [sp, #16]
 800edd6:	9905      	ldr	r1, [sp, #20]
 800edd8:	2a20      	cmp	r2, #32
 800edda:	d818      	bhi.n	800ee0e <__hexnan+0x7e>
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	459b      	cmp	fp, r3
 800ede0:	dd13      	ble.n	800ee0a <__hexnan+0x7a>
 800ede2:	454c      	cmp	r4, r9
 800ede4:	d206      	bcs.n	800edf4 <__hexnan+0x64>
 800ede6:	2d07      	cmp	r5, #7
 800ede8:	dc04      	bgt.n	800edf4 <__hexnan+0x64>
 800edea:	462a      	mov	r2, r5
 800edec:	4649      	mov	r1, r9
 800edee:	4620      	mov	r0, r4
 800edf0:	f7ff ffa8 	bl	800ed44 <L_shift>
 800edf4:	4544      	cmp	r4, r8
 800edf6:	d950      	bls.n	800ee9a <__hexnan+0x10a>
 800edf8:	2300      	movs	r3, #0
 800edfa:	f1a4 0904 	sub.w	r9, r4, #4
 800edfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee02:	f8cd b008 	str.w	fp, [sp, #8]
 800ee06:	464c      	mov	r4, r9
 800ee08:	461d      	mov	r5, r3
 800ee0a:	9903      	ldr	r1, [sp, #12]
 800ee0c:	e7d7      	b.n	800edbe <__hexnan+0x2e>
 800ee0e:	2a29      	cmp	r2, #41	; 0x29
 800ee10:	d155      	bne.n	800eebe <__hexnan+0x12e>
 800ee12:	3102      	adds	r1, #2
 800ee14:	f8ca 1000 	str.w	r1, [sl]
 800ee18:	f1bb 0f00 	cmp.w	fp, #0
 800ee1c:	d04f      	beq.n	800eebe <__hexnan+0x12e>
 800ee1e:	454c      	cmp	r4, r9
 800ee20:	d206      	bcs.n	800ee30 <__hexnan+0xa0>
 800ee22:	2d07      	cmp	r5, #7
 800ee24:	dc04      	bgt.n	800ee30 <__hexnan+0xa0>
 800ee26:	462a      	mov	r2, r5
 800ee28:	4649      	mov	r1, r9
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f7ff ff8a 	bl	800ed44 <L_shift>
 800ee30:	4544      	cmp	r4, r8
 800ee32:	d934      	bls.n	800ee9e <__hexnan+0x10e>
 800ee34:	f1a8 0204 	sub.w	r2, r8, #4
 800ee38:	4623      	mov	r3, r4
 800ee3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee42:	429f      	cmp	r7, r3
 800ee44:	d2f9      	bcs.n	800ee3a <__hexnan+0xaa>
 800ee46:	1b3b      	subs	r3, r7, r4
 800ee48:	f023 0303 	bic.w	r3, r3, #3
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	3e03      	subs	r6, #3
 800ee50:	3401      	adds	r4, #1
 800ee52:	42a6      	cmp	r6, r4
 800ee54:	bf38      	it	cc
 800ee56:	2304      	movcc	r3, #4
 800ee58:	4443      	add	r3, r8
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f843 2b04 	str.w	r2, [r3], #4
 800ee60:	429f      	cmp	r7, r3
 800ee62:	d2fb      	bcs.n	800ee5c <__hexnan+0xcc>
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	b91b      	cbnz	r3, 800ee70 <__hexnan+0xe0>
 800ee68:	4547      	cmp	r7, r8
 800ee6a:	d126      	bne.n	800eeba <__hexnan+0x12a>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	2005      	movs	r0, #5
 800ee72:	e025      	b.n	800eec0 <__hexnan+0x130>
 800ee74:	3501      	adds	r5, #1
 800ee76:	2d08      	cmp	r5, #8
 800ee78:	f10b 0b01 	add.w	fp, fp, #1
 800ee7c:	dd06      	ble.n	800ee8c <__hexnan+0xfc>
 800ee7e:	4544      	cmp	r4, r8
 800ee80:	d9c3      	bls.n	800ee0a <__hexnan+0x7a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee88:	2501      	movs	r5, #1
 800ee8a:	3c04      	subs	r4, #4
 800ee8c:	6822      	ldr	r2, [r4, #0]
 800ee8e:	f000 000f 	and.w	r0, r0, #15
 800ee92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ee96:	6020      	str	r0, [r4, #0]
 800ee98:	e7b7      	b.n	800ee0a <__hexnan+0x7a>
 800ee9a:	2508      	movs	r5, #8
 800ee9c:	e7b5      	b.n	800ee0a <__hexnan+0x7a>
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d0df      	beq.n	800ee64 <__hexnan+0xd4>
 800eea4:	f1c3 0320 	rsb	r3, r3, #32
 800eea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeac:	40da      	lsrs	r2, r3
 800eeae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eeb2:	4013      	ands	r3, r2
 800eeb4:	f846 3c04 	str.w	r3, [r6, #-4]
 800eeb8:	e7d4      	b.n	800ee64 <__hexnan+0xd4>
 800eeba:	3f04      	subs	r7, #4
 800eebc:	e7d2      	b.n	800ee64 <__hexnan+0xd4>
 800eebe:	2004      	movs	r0, #4
 800eec0:	b007      	add	sp, #28
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eec6 <__ascii_mbtowc>:
 800eec6:	b082      	sub	sp, #8
 800eec8:	b901      	cbnz	r1, 800eecc <__ascii_mbtowc+0x6>
 800eeca:	a901      	add	r1, sp, #4
 800eecc:	b142      	cbz	r2, 800eee0 <__ascii_mbtowc+0x1a>
 800eece:	b14b      	cbz	r3, 800eee4 <__ascii_mbtowc+0x1e>
 800eed0:	7813      	ldrb	r3, [r2, #0]
 800eed2:	600b      	str	r3, [r1, #0]
 800eed4:	7812      	ldrb	r2, [r2, #0]
 800eed6:	1e10      	subs	r0, r2, #0
 800eed8:	bf18      	it	ne
 800eeda:	2001      	movne	r0, #1
 800eedc:	b002      	add	sp, #8
 800eede:	4770      	bx	lr
 800eee0:	4610      	mov	r0, r2
 800eee2:	e7fb      	b.n	800eedc <__ascii_mbtowc+0x16>
 800eee4:	f06f 0001 	mvn.w	r0, #1
 800eee8:	e7f8      	b.n	800eedc <__ascii_mbtowc+0x16>

0800eeea <_realloc_r>:
 800eeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeee:	4680      	mov	r8, r0
 800eef0:	4614      	mov	r4, r2
 800eef2:	460e      	mov	r6, r1
 800eef4:	b921      	cbnz	r1, 800ef00 <_realloc_r+0x16>
 800eef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eefa:	4611      	mov	r1, r2
 800eefc:	f7fd be3e 	b.w	800cb7c <_malloc_r>
 800ef00:	b92a      	cbnz	r2, 800ef0e <_realloc_r+0x24>
 800ef02:	f7fd fdc7 	bl	800ca94 <_free_r>
 800ef06:	4625      	mov	r5, r4
 800ef08:	4628      	mov	r0, r5
 800ef0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0e:	f000 f842 	bl	800ef96 <_malloc_usable_size_r>
 800ef12:	4284      	cmp	r4, r0
 800ef14:	4607      	mov	r7, r0
 800ef16:	d802      	bhi.n	800ef1e <_realloc_r+0x34>
 800ef18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef1c:	d812      	bhi.n	800ef44 <_realloc_r+0x5a>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4640      	mov	r0, r8
 800ef22:	f7fd fe2b 	bl	800cb7c <_malloc_r>
 800ef26:	4605      	mov	r5, r0
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d0ed      	beq.n	800ef08 <_realloc_r+0x1e>
 800ef2c:	42bc      	cmp	r4, r7
 800ef2e:	4622      	mov	r2, r4
 800ef30:	4631      	mov	r1, r6
 800ef32:	bf28      	it	cs
 800ef34:	463a      	movcs	r2, r7
 800ef36:	f7fc ff1f 	bl	800bd78 <memcpy>
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	f7fd fda9 	bl	800ca94 <_free_r>
 800ef42:	e7e1      	b.n	800ef08 <_realloc_r+0x1e>
 800ef44:	4635      	mov	r5, r6
 800ef46:	e7df      	b.n	800ef08 <_realloc_r+0x1e>

0800ef48 <__ascii_wctomb>:
 800ef48:	b149      	cbz	r1, 800ef5e <__ascii_wctomb+0x16>
 800ef4a:	2aff      	cmp	r2, #255	; 0xff
 800ef4c:	bf85      	ittet	hi
 800ef4e:	238a      	movhi	r3, #138	; 0x8a
 800ef50:	6003      	strhi	r3, [r0, #0]
 800ef52:	700a      	strbls	r2, [r1, #0]
 800ef54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ef58:	bf98      	it	ls
 800ef5a:	2001      	movls	r0, #1
 800ef5c:	4770      	bx	lr
 800ef5e:	4608      	mov	r0, r1
 800ef60:	4770      	bx	lr
	...

0800ef64 <fiprintf>:
 800ef64:	b40e      	push	{r1, r2, r3}
 800ef66:	b503      	push	{r0, r1, lr}
 800ef68:	4601      	mov	r1, r0
 800ef6a:	ab03      	add	r3, sp, #12
 800ef6c:	4805      	ldr	r0, [pc, #20]	; (800ef84 <fiprintf+0x20>)
 800ef6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef72:	6800      	ldr	r0, [r0, #0]
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	f000 f83f 	bl	800eff8 <_vfiprintf_r>
 800ef7a:	b002      	add	sp, #8
 800ef7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef80:	b003      	add	sp, #12
 800ef82:	4770      	bx	lr
 800ef84:	20000068 	.word	0x20000068

0800ef88 <abort>:
 800ef88:	b508      	push	{r3, lr}
 800ef8a:	2006      	movs	r0, #6
 800ef8c:	f000 fa0c 	bl	800f3a8 <raise>
 800ef90:	2001      	movs	r0, #1
 800ef92:	f7f2 fcb1 	bl	80018f8 <_exit>

0800ef96 <_malloc_usable_size_r>:
 800ef96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef9a:	1f18      	subs	r0, r3, #4
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	bfbc      	itt	lt
 800efa0:	580b      	ldrlt	r3, [r1, r0]
 800efa2:	18c0      	addlt	r0, r0, r3
 800efa4:	4770      	bx	lr

0800efa6 <__sfputc_r>:
 800efa6:	6893      	ldr	r3, [r2, #8]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	b410      	push	{r4}
 800efae:	6093      	str	r3, [r2, #8]
 800efb0:	da08      	bge.n	800efc4 <__sfputc_r+0x1e>
 800efb2:	6994      	ldr	r4, [r2, #24]
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	db01      	blt.n	800efbc <__sfputc_r+0x16>
 800efb8:	290a      	cmp	r1, #10
 800efba:	d103      	bne.n	800efc4 <__sfputc_r+0x1e>
 800efbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efc0:	f000 b934 	b.w	800f22c <__swbuf_r>
 800efc4:	6813      	ldr	r3, [r2, #0]
 800efc6:	1c58      	adds	r0, r3, #1
 800efc8:	6010      	str	r0, [r2, #0]
 800efca:	7019      	strb	r1, [r3, #0]
 800efcc:	4608      	mov	r0, r1
 800efce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <__sfputs_r>:
 800efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd6:	4606      	mov	r6, r0
 800efd8:	460f      	mov	r7, r1
 800efda:	4614      	mov	r4, r2
 800efdc:	18d5      	adds	r5, r2, r3
 800efde:	42ac      	cmp	r4, r5
 800efe0:	d101      	bne.n	800efe6 <__sfputs_r+0x12>
 800efe2:	2000      	movs	r0, #0
 800efe4:	e007      	b.n	800eff6 <__sfputs_r+0x22>
 800efe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efea:	463a      	mov	r2, r7
 800efec:	4630      	mov	r0, r6
 800efee:	f7ff ffda 	bl	800efa6 <__sfputc_r>
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	d1f3      	bne.n	800efde <__sfputs_r+0xa>
 800eff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eff8 <_vfiprintf_r>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	460d      	mov	r5, r1
 800effe:	b09d      	sub	sp, #116	; 0x74
 800f000:	4614      	mov	r4, r2
 800f002:	4698      	mov	r8, r3
 800f004:	4606      	mov	r6, r0
 800f006:	b118      	cbz	r0, 800f010 <_vfiprintf_r+0x18>
 800f008:	6a03      	ldr	r3, [r0, #32]
 800f00a:	b90b      	cbnz	r3, 800f010 <_vfiprintf_r+0x18>
 800f00c:	f7fc fd46 	bl	800ba9c <__sinit>
 800f010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f012:	07d9      	lsls	r1, r3, #31
 800f014:	d405      	bmi.n	800f022 <_vfiprintf_r+0x2a>
 800f016:	89ab      	ldrh	r3, [r5, #12]
 800f018:	059a      	lsls	r2, r3, #22
 800f01a:	d402      	bmi.n	800f022 <_vfiprintf_r+0x2a>
 800f01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f01e:	f7fc fea9 	bl	800bd74 <__retarget_lock_acquire_recursive>
 800f022:	89ab      	ldrh	r3, [r5, #12]
 800f024:	071b      	lsls	r3, r3, #28
 800f026:	d501      	bpl.n	800f02c <_vfiprintf_r+0x34>
 800f028:	692b      	ldr	r3, [r5, #16]
 800f02a:	b99b      	cbnz	r3, 800f054 <_vfiprintf_r+0x5c>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4630      	mov	r0, r6
 800f030:	f000 f93a 	bl	800f2a8 <__swsetup_r>
 800f034:	b170      	cbz	r0, 800f054 <_vfiprintf_r+0x5c>
 800f036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f038:	07dc      	lsls	r4, r3, #31
 800f03a:	d504      	bpl.n	800f046 <_vfiprintf_r+0x4e>
 800f03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f040:	b01d      	add	sp, #116	; 0x74
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	89ab      	ldrh	r3, [r5, #12]
 800f048:	0598      	lsls	r0, r3, #22
 800f04a:	d4f7      	bmi.n	800f03c <_vfiprintf_r+0x44>
 800f04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f04e:	f7fc fe92 	bl	800bd76 <__retarget_lock_release_recursive>
 800f052:	e7f3      	b.n	800f03c <_vfiprintf_r+0x44>
 800f054:	2300      	movs	r3, #0
 800f056:	9309      	str	r3, [sp, #36]	; 0x24
 800f058:	2320      	movs	r3, #32
 800f05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f062:	2330      	movs	r3, #48	; 0x30
 800f064:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f218 <_vfiprintf_r+0x220>
 800f068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f06c:	f04f 0901 	mov.w	r9, #1
 800f070:	4623      	mov	r3, r4
 800f072:	469a      	mov	sl, r3
 800f074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f078:	b10a      	cbz	r2, 800f07e <_vfiprintf_r+0x86>
 800f07a:	2a25      	cmp	r2, #37	; 0x25
 800f07c:	d1f9      	bne.n	800f072 <_vfiprintf_r+0x7a>
 800f07e:	ebba 0b04 	subs.w	fp, sl, r4
 800f082:	d00b      	beq.n	800f09c <_vfiprintf_r+0xa4>
 800f084:	465b      	mov	r3, fp
 800f086:	4622      	mov	r2, r4
 800f088:	4629      	mov	r1, r5
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7ff ffa2 	bl	800efd4 <__sfputs_r>
 800f090:	3001      	adds	r0, #1
 800f092:	f000 80a9 	beq.w	800f1e8 <_vfiprintf_r+0x1f0>
 800f096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f098:	445a      	add	r2, fp
 800f09a:	9209      	str	r2, [sp, #36]	; 0x24
 800f09c:	f89a 3000 	ldrb.w	r3, [sl]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 80a1 	beq.w	800f1e8 <_vfiprintf_r+0x1f0>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0b0:	f10a 0a01 	add.w	sl, sl, #1
 800f0b4:	9304      	str	r3, [sp, #16]
 800f0b6:	9307      	str	r3, [sp, #28]
 800f0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800f0be:	4654      	mov	r4, sl
 800f0c0:	2205      	movs	r2, #5
 800f0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0c6:	4854      	ldr	r0, [pc, #336]	; (800f218 <_vfiprintf_r+0x220>)
 800f0c8:	f7f1 f88a 	bl	80001e0 <memchr>
 800f0cc:	9a04      	ldr	r2, [sp, #16]
 800f0ce:	b9d8      	cbnz	r0, 800f108 <_vfiprintf_r+0x110>
 800f0d0:	06d1      	lsls	r1, r2, #27
 800f0d2:	bf44      	itt	mi
 800f0d4:	2320      	movmi	r3, #32
 800f0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0da:	0713      	lsls	r3, r2, #28
 800f0dc:	bf44      	itt	mi
 800f0de:	232b      	movmi	r3, #43	; 0x2b
 800f0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ea:	d015      	beq.n	800f118 <_vfiprintf_r+0x120>
 800f0ec:	9a07      	ldr	r2, [sp, #28]
 800f0ee:	4654      	mov	r4, sl
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	f04f 0c0a 	mov.w	ip, #10
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0fc:	3b30      	subs	r3, #48	; 0x30
 800f0fe:	2b09      	cmp	r3, #9
 800f100:	d94d      	bls.n	800f19e <_vfiprintf_r+0x1a6>
 800f102:	b1b0      	cbz	r0, 800f132 <_vfiprintf_r+0x13a>
 800f104:	9207      	str	r2, [sp, #28]
 800f106:	e014      	b.n	800f132 <_vfiprintf_r+0x13a>
 800f108:	eba0 0308 	sub.w	r3, r0, r8
 800f10c:	fa09 f303 	lsl.w	r3, r9, r3
 800f110:	4313      	orrs	r3, r2
 800f112:	9304      	str	r3, [sp, #16]
 800f114:	46a2      	mov	sl, r4
 800f116:	e7d2      	b.n	800f0be <_vfiprintf_r+0xc6>
 800f118:	9b03      	ldr	r3, [sp, #12]
 800f11a:	1d19      	adds	r1, r3, #4
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	9103      	str	r1, [sp, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	bfbb      	ittet	lt
 800f124:	425b      	neglt	r3, r3
 800f126:	f042 0202 	orrlt.w	r2, r2, #2
 800f12a:	9307      	strge	r3, [sp, #28]
 800f12c:	9307      	strlt	r3, [sp, #28]
 800f12e:	bfb8      	it	lt
 800f130:	9204      	strlt	r2, [sp, #16]
 800f132:	7823      	ldrb	r3, [r4, #0]
 800f134:	2b2e      	cmp	r3, #46	; 0x2e
 800f136:	d10c      	bne.n	800f152 <_vfiprintf_r+0x15a>
 800f138:	7863      	ldrb	r3, [r4, #1]
 800f13a:	2b2a      	cmp	r3, #42	; 0x2a
 800f13c:	d134      	bne.n	800f1a8 <_vfiprintf_r+0x1b0>
 800f13e:	9b03      	ldr	r3, [sp, #12]
 800f140:	1d1a      	adds	r2, r3, #4
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	9203      	str	r2, [sp, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	bfb8      	it	lt
 800f14a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f14e:	3402      	adds	r4, #2
 800f150:	9305      	str	r3, [sp, #20]
 800f152:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f228 <_vfiprintf_r+0x230>
 800f156:	7821      	ldrb	r1, [r4, #0]
 800f158:	2203      	movs	r2, #3
 800f15a:	4650      	mov	r0, sl
 800f15c:	f7f1 f840 	bl	80001e0 <memchr>
 800f160:	b138      	cbz	r0, 800f172 <_vfiprintf_r+0x17a>
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	eba0 000a 	sub.w	r0, r0, sl
 800f168:	2240      	movs	r2, #64	; 0x40
 800f16a:	4082      	lsls	r2, r0
 800f16c:	4313      	orrs	r3, r2
 800f16e:	3401      	adds	r4, #1
 800f170:	9304      	str	r3, [sp, #16]
 800f172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f176:	4829      	ldr	r0, [pc, #164]	; (800f21c <_vfiprintf_r+0x224>)
 800f178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f17c:	2206      	movs	r2, #6
 800f17e:	f7f1 f82f 	bl	80001e0 <memchr>
 800f182:	2800      	cmp	r0, #0
 800f184:	d03f      	beq.n	800f206 <_vfiprintf_r+0x20e>
 800f186:	4b26      	ldr	r3, [pc, #152]	; (800f220 <_vfiprintf_r+0x228>)
 800f188:	bb1b      	cbnz	r3, 800f1d2 <_vfiprintf_r+0x1da>
 800f18a:	9b03      	ldr	r3, [sp, #12]
 800f18c:	3307      	adds	r3, #7
 800f18e:	f023 0307 	bic.w	r3, r3, #7
 800f192:	3308      	adds	r3, #8
 800f194:	9303      	str	r3, [sp, #12]
 800f196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f198:	443b      	add	r3, r7
 800f19a:	9309      	str	r3, [sp, #36]	; 0x24
 800f19c:	e768      	b.n	800f070 <_vfiprintf_r+0x78>
 800f19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	2001      	movs	r0, #1
 800f1a6:	e7a6      	b.n	800f0f6 <_vfiprintf_r+0xfe>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	3401      	adds	r4, #1
 800f1ac:	9305      	str	r3, [sp, #20]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	f04f 0c0a 	mov.w	ip, #10
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ba:	3a30      	subs	r2, #48	; 0x30
 800f1bc:	2a09      	cmp	r2, #9
 800f1be:	d903      	bls.n	800f1c8 <_vfiprintf_r+0x1d0>
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0c6      	beq.n	800f152 <_vfiprintf_r+0x15a>
 800f1c4:	9105      	str	r1, [sp, #20]
 800f1c6:	e7c4      	b.n	800f152 <_vfiprintf_r+0x15a>
 800f1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e7f0      	b.n	800f1b4 <_vfiprintf_r+0x1bc>
 800f1d2:	ab03      	add	r3, sp, #12
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	462a      	mov	r2, r5
 800f1d8:	4b12      	ldr	r3, [pc, #72]	; (800f224 <_vfiprintf_r+0x22c>)
 800f1da:	a904      	add	r1, sp, #16
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fb fe0d 	bl	800adfc <_printf_float>
 800f1e2:	4607      	mov	r7, r0
 800f1e4:	1c78      	adds	r0, r7, #1
 800f1e6:	d1d6      	bne.n	800f196 <_vfiprintf_r+0x19e>
 800f1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1ea:	07d9      	lsls	r1, r3, #31
 800f1ec:	d405      	bmi.n	800f1fa <_vfiprintf_r+0x202>
 800f1ee:	89ab      	ldrh	r3, [r5, #12]
 800f1f0:	059a      	lsls	r2, r3, #22
 800f1f2:	d402      	bmi.n	800f1fa <_vfiprintf_r+0x202>
 800f1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1f6:	f7fc fdbe 	bl	800bd76 <__retarget_lock_release_recursive>
 800f1fa:	89ab      	ldrh	r3, [r5, #12]
 800f1fc:	065b      	lsls	r3, r3, #25
 800f1fe:	f53f af1d 	bmi.w	800f03c <_vfiprintf_r+0x44>
 800f202:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f204:	e71c      	b.n	800f040 <_vfiprintf_r+0x48>
 800f206:	ab03      	add	r3, sp, #12
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	462a      	mov	r2, r5
 800f20c:	4b05      	ldr	r3, [pc, #20]	; (800f224 <_vfiprintf_r+0x22c>)
 800f20e:	a904      	add	r1, sp, #16
 800f210:	4630      	mov	r0, r6
 800f212:	f7fc f897 	bl	800b344 <_printf_i>
 800f216:	e7e4      	b.n	800f1e2 <_vfiprintf_r+0x1ea>
 800f218:	0800fc79 	.word	0x0800fc79
 800f21c:	0800fc83 	.word	0x0800fc83
 800f220:	0800adfd 	.word	0x0800adfd
 800f224:	0800efd5 	.word	0x0800efd5
 800f228:	0800fc7f 	.word	0x0800fc7f

0800f22c <__swbuf_r>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	460e      	mov	r6, r1
 800f230:	4614      	mov	r4, r2
 800f232:	4605      	mov	r5, r0
 800f234:	b118      	cbz	r0, 800f23e <__swbuf_r+0x12>
 800f236:	6a03      	ldr	r3, [r0, #32]
 800f238:	b90b      	cbnz	r3, 800f23e <__swbuf_r+0x12>
 800f23a:	f7fc fc2f 	bl	800ba9c <__sinit>
 800f23e:	69a3      	ldr	r3, [r4, #24]
 800f240:	60a3      	str	r3, [r4, #8]
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	071a      	lsls	r2, r3, #28
 800f246:	d525      	bpl.n	800f294 <__swbuf_r+0x68>
 800f248:	6923      	ldr	r3, [r4, #16]
 800f24a:	b31b      	cbz	r3, 800f294 <__swbuf_r+0x68>
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	6922      	ldr	r2, [r4, #16]
 800f250:	1a98      	subs	r0, r3, r2
 800f252:	6963      	ldr	r3, [r4, #20]
 800f254:	b2f6      	uxtb	r6, r6
 800f256:	4283      	cmp	r3, r0
 800f258:	4637      	mov	r7, r6
 800f25a:	dc04      	bgt.n	800f266 <__swbuf_r+0x3a>
 800f25c:	4621      	mov	r1, r4
 800f25e:	4628      	mov	r0, r5
 800f260:	f7ff fa3a 	bl	800e6d8 <_fflush_r>
 800f264:	b9e0      	cbnz	r0, 800f2a0 <__swbuf_r+0x74>
 800f266:	68a3      	ldr	r3, [r4, #8]
 800f268:	3b01      	subs	r3, #1
 800f26a:	60a3      	str	r3, [r4, #8]
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	1c5a      	adds	r2, r3, #1
 800f270:	6022      	str	r2, [r4, #0]
 800f272:	701e      	strb	r6, [r3, #0]
 800f274:	6962      	ldr	r2, [r4, #20]
 800f276:	1c43      	adds	r3, r0, #1
 800f278:	429a      	cmp	r2, r3
 800f27a:	d004      	beq.n	800f286 <__swbuf_r+0x5a>
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	07db      	lsls	r3, r3, #31
 800f280:	d506      	bpl.n	800f290 <__swbuf_r+0x64>
 800f282:	2e0a      	cmp	r6, #10
 800f284:	d104      	bne.n	800f290 <__swbuf_r+0x64>
 800f286:	4621      	mov	r1, r4
 800f288:	4628      	mov	r0, r5
 800f28a:	f7ff fa25 	bl	800e6d8 <_fflush_r>
 800f28e:	b938      	cbnz	r0, 800f2a0 <__swbuf_r+0x74>
 800f290:	4638      	mov	r0, r7
 800f292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f294:	4621      	mov	r1, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f000 f806 	bl	800f2a8 <__swsetup_r>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d0d5      	beq.n	800f24c <__swbuf_r+0x20>
 800f2a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f2a4:	e7f4      	b.n	800f290 <__swbuf_r+0x64>
	...

0800f2a8 <__swsetup_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4b2a      	ldr	r3, [pc, #168]	; (800f354 <__swsetup_r+0xac>)
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	b118      	cbz	r0, 800f2bc <__swsetup_r+0x14>
 800f2b4:	6a03      	ldr	r3, [r0, #32]
 800f2b6:	b90b      	cbnz	r3, 800f2bc <__swsetup_r+0x14>
 800f2b8:	f7fc fbf0 	bl	800ba9c <__sinit>
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2c2:	0718      	lsls	r0, r3, #28
 800f2c4:	d422      	bmi.n	800f30c <__swsetup_r+0x64>
 800f2c6:	06d9      	lsls	r1, r3, #27
 800f2c8:	d407      	bmi.n	800f2da <__swsetup_r+0x32>
 800f2ca:	2309      	movs	r3, #9
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d8:	e034      	b.n	800f344 <__swsetup_r+0x9c>
 800f2da:	0758      	lsls	r0, r3, #29
 800f2dc:	d512      	bpl.n	800f304 <__swsetup_r+0x5c>
 800f2de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2e0:	b141      	cbz	r1, 800f2f4 <__swsetup_r+0x4c>
 800f2e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2e6:	4299      	cmp	r1, r3
 800f2e8:	d002      	beq.n	800f2f0 <__swsetup_r+0x48>
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f7fd fbd2 	bl	800ca94 <_free_r>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	6363      	str	r3, [r4, #52]	; 0x34
 800f2f4:	89a3      	ldrh	r3, [r4, #12]
 800f2f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2fa:	81a3      	strh	r3, [r4, #12]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	6063      	str	r3, [r4, #4]
 800f300:	6923      	ldr	r3, [r4, #16]
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	f043 0308 	orr.w	r3, r3, #8
 800f30a:	81a3      	strh	r3, [r4, #12]
 800f30c:	6923      	ldr	r3, [r4, #16]
 800f30e:	b94b      	cbnz	r3, 800f324 <__swsetup_r+0x7c>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f31a:	d003      	beq.n	800f324 <__swsetup_r+0x7c>
 800f31c:	4621      	mov	r1, r4
 800f31e:	4628      	mov	r0, r5
 800f320:	f000 f884 	bl	800f42c <__smakebuf_r>
 800f324:	89a0      	ldrh	r0, [r4, #12]
 800f326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f32a:	f010 0301 	ands.w	r3, r0, #1
 800f32e:	d00a      	beq.n	800f346 <__swsetup_r+0x9e>
 800f330:	2300      	movs	r3, #0
 800f332:	60a3      	str	r3, [r4, #8]
 800f334:	6963      	ldr	r3, [r4, #20]
 800f336:	425b      	negs	r3, r3
 800f338:	61a3      	str	r3, [r4, #24]
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	b943      	cbnz	r3, 800f350 <__swsetup_r+0xa8>
 800f33e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f342:	d1c4      	bne.n	800f2ce <__swsetup_r+0x26>
 800f344:	bd38      	pop	{r3, r4, r5, pc}
 800f346:	0781      	lsls	r1, r0, #30
 800f348:	bf58      	it	pl
 800f34a:	6963      	ldrpl	r3, [r4, #20]
 800f34c:	60a3      	str	r3, [r4, #8]
 800f34e:	e7f4      	b.n	800f33a <__swsetup_r+0x92>
 800f350:	2000      	movs	r0, #0
 800f352:	e7f7      	b.n	800f344 <__swsetup_r+0x9c>
 800f354:	20000068 	.word	0x20000068

0800f358 <_raise_r>:
 800f358:	291f      	cmp	r1, #31
 800f35a:	b538      	push	{r3, r4, r5, lr}
 800f35c:	4604      	mov	r4, r0
 800f35e:	460d      	mov	r5, r1
 800f360:	d904      	bls.n	800f36c <_raise_r+0x14>
 800f362:	2316      	movs	r3, #22
 800f364:	6003      	str	r3, [r0, #0]
 800f366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f36e:	b112      	cbz	r2, 800f376 <_raise_r+0x1e>
 800f370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f374:	b94b      	cbnz	r3, 800f38a <_raise_r+0x32>
 800f376:	4620      	mov	r0, r4
 800f378:	f000 f830 	bl	800f3dc <_getpid_r>
 800f37c:	462a      	mov	r2, r5
 800f37e:	4601      	mov	r1, r0
 800f380:	4620      	mov	r0, r4
 800f382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f386:	f000 b817 	b.w	800f3b8 <_kill_r>
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d00a      	beq.n	800f3a4 <_raise_r+0x4c>
 800f38e:	1c59      	adds	r1, r3, #1
 800f390:	d103      	bne.n	800f39a <_raise_r+0x42>
 800f392:	2316      	movs	r3, #22
 800f394:	6003      	str	r3, [r0, #0]
 800f396:	2001      	movs	r0, #1
 800f398:	e7e7      	b.n	800f36a <_raise_r+0x12>
 800f39a:	2400      	movs	r4, #0
 800f39c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	4798      	blx	r3
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e7e0      	b.n	800f36a <_raise_r+0x12>

0800f3a8 <raise>:
 800f3a8:	4b02      	ldr	r3, [pc, #8]	; (800f3b4 <raise+0xc>)
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	f7ff bfd3 	b.w	800f358 <_raise_r>
 800f3b2:	bf00      	nop
 800f3b4:	20000068 	.word	0x20000068

0800f3b8 <_kill_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4d07      	ldr	r5, [pc, #28]	; (800f3d8 <_kill_r+0x20>)
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4604      	mov	r4, r0
 800f3c0:	4608      	mov	r0, r1
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	f7f2 fa87 	bl	80018d8 <_kill>
 800f3ca:	1c43      	adds	r3, r0, #1
 800f3cc:	d102      	bne.n	800f3d4 <_kill_r+0x1c>
 800f3ce:	682b      	ldr	r3, [r5, #0]
 800f3d0:	b103      	cbz	r3, 800f3d4 <_kill_r+0x1c>
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	bd38      	pop	{r3, r4, r5, pc}
 800f3d6:	bf00      	nop
 800f3d8:	200061c4 	.word	0x200061c4

0800f3dc <_getpid_r>:
 800f3dc:	f7f2 ba74 	b.w	80018c8 <_getpid>

0800f3e0 <__swhatbuf_r>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e8:	2900      	cmp	r1, #0
 800f3ea:	b096      	sub	sp, #88	; 0x58
 800f3ec:	4615      	mov	r5, r2
 800f3ee:	461e      	mov	r6, r3
 800f3f0:	da0d      	bge.n	800f40e <__swhatbuf_r+0x2e>
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f3f8:	f04f 0100 	mov.w	r1, #0
 800f3fc:	bf0c      	ite	eq
 800f3fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f402:	2340      	movne	r3, #64	; 0x40
 800f404:	2000      	movs	r0, #0
 800f406:	6031      	str	r1, [r6, #0]
 800f408:	602b      	str	r3, [r5, #0]
 800f40a:	b016      	add	sp, #88	; 0x58
 800f40c:	bd70      	pop	{r4, r5, r6, pc}
 800f40e:	466a      	mov	r2, sp
 800f410:	f000 f848 	bl	800f4a4 <_fstat_r>
 800f414:	2800      	cmp	r0, #0
 800f416:	dbec      	blt.n	800f3f2 <__swhatbuf_r+0x12>
 800f418:	9901      	ldr	r1, [sp, #4]
 800f41a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f41e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f422:	4259      	negs	r1, r3
 800f424:	4159      	adcs	r1, r3
 800f426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42a:	e7eb      	b.n	800f404 <__swhatbuf_r+0x24>

0800f42c <__smakebuf_r>:
 800f42c:	898b      	ldrh	r3, [r1, #12]
 800f42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f430:	079d      	lsls	r5, r3, #30
 800f432:	4606      	mov	r6, r0
 800f434:	460c      	mov	r4, r1
 800f436:	d507      	bpl.n	800f448 <__smakebuf_r+0x1c>
 800f438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	6123      	str	r3, [r4, #16]
 800f440:	2301      	movs	r3, #1
 800f442:	6163      	str	r3, [r4, #20]
 800f444:	b002      	add	sp, #8
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	ab01      	add	r3, sp, #4
 800f44a:	466a      	mov	r2, sp
 800f44c:	f7ff ffc8 	bl	800f3e0 <__swhatbuf_r>
 800f450:	9900      	ldr	r1, [sp, #0]
 800f452:	4605      	mov	r5, r0
 800f454:	4630      	mov	r0, r6
 800f456:	f7fd fb91 	bl	800cb7c <_malloc_r>
 800f45a:	b948      	cbnz	r0, 800f470 <__smakebuf_r+0x44>
 800f45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f460:	059a      	lsls	r2, r3, #22
 800f462:	d4ef      	bmi.n	800f444 <__smakebuf_r+0x18>
 800f464:	f023 0303 	bic.w	r3, r3, #3
 800f468:	f043 0302 	orr.w	r3, r3, #2
 800f46c:	81a3      	strh	r3, [r4, #12]
 800f46e:	e7e3      	b.n	800f438 <__smakebuf_r+0xc>
 800f470:	89a3      	ldrh	r3, [r4, #12]
 800f472:	6020      	str	r0, [r4, #0]
 800f474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f478:	81a3      	strh	r3, [r4, #12]
 800f47a:	9b00      	ldr	r3, [sp, #0]
 800f47c:	6163      	str	r3, [r4, #20]
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	6120      	str	r0, [r4, #16]
 800f482:	b15b      	cbz	r3, 800f49c <__smakebuf_r+0x70>
 800f484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f488:	4630      	mov	r0, r6
 800f48a:	f000 f81d 	bl	800f4c8 <_isatty_r>
 800f48e:	b128      	cbz	r0, 800f49c <__smakebuf_r+0x70>
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	f023 0303 	bic.w	r3, r3, #3
 800f496:	f043 0301 	orr.w	r3, r3, #1
 800f49a:	81a3      	strh	r3, [r4, #12]
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	431d      	orrs	r5, r3
 800f4a0:	81a5      	strh	r5, [r4, #12]
 800f4a2:	e7cf      	b.n	800f444 <__smakebuf_r+0x18>

0800f4a4 <_fstat_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4d07      	ldr	r5, [pc, #28]	; (800f4c4 <_fstat_r+0x20>)
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	4608      	mov	r0, r1
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	f7f2 fa70 	bl	8001996 <_fstat>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	d102      	bne.n	800f4c0 <_fstat_r+0x1c>
 800f4ba:	682b      	ldr	r3, [r5, #0]
 800f4bc:	b103      	cbz	r3, 800f4c0 <_fstat_r+0x1c>
 800f4be:	6023      	str	r3, [r4, #0]
 800f4c0:	bd38      	pop	{r3, r4, r5, pc}
 800f4c2:	bf00      	nop
 800f4c4:	200061c4 	.word	0x200061c4

0800f4c8 <_isatty_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4d06      	ldr	r5, [pc, #24]	; (800f4e4 <_isatty_r+0x1c>)
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	4608      	mov	r0, r1
 800f4d2:	602b      	str	r3, [r5, #0]
 800f4d4:	f7f2 fa6f 	bl	80019b6 <_isatty>
 800f4d8:	1c43      	adds	r3, r0, #1
 800f4da:	d102      	bne.n	800f4e2 <_isatty_r+0x1a>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	b103      	cbz	r3, 800f4e2 <_isatty_r+0x1a>
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	bd38      	pop	{r3, r4, r5, pc}
 800f4e4:	200061c4 	.word	0x200061c4

0800f4e8 <_init>:
 800f4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ea:	bf00      	nop
 800f4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ee:	bc08      	pop	{r3}
 800f4f0:	469e      	mov	lr, r3
 800f4f2:	4770      	bx	lr

0800f4f4 <_fini>:
 800f4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f6:	bf00      	nop
 800f4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4fa:	bc08      	pop	{r3}
 800f4fc:	469e      	mov	lr, r3
 800f4fe:	4770      	bx	lr
